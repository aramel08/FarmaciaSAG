/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ModuloSeguridad;

import Conexion.Conexion;
import Formularios_SAG.Login;
import Formularios_SAG.LoginRolesPrivilegios;
import Formularios_SAG.Operaciones;
import Formularios_SAG.PantallaPrincipal;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author arame
 */
public class Roles extends javax.swing.JFrame {

    /**
     * Creates new form Roles
     */
    int agregari = 0;
    int guardari = 0;
    int editari = 0;
    int cancelari = 0;
    int reportesi = 0;
    int activoi = 0;
    int inactivoi = 0;
    int anulari = 0;
    int buscari = 0;
    int crearcomprai = 0;
    int historicoi = 0;
    int eliminari=0;
    int aprobari=0;

    public Roles() {
        initComponents();
        CargarUsuarios cu = new CargarUsuarios();
        ComboUsuario.setModel(cu.getvalues());
        CargarPermisos pe = new CargarPermisos();
        ComboPermisos.setModel(pe.getvalues());
        usuario.setText(LoginRolesPrivilegios.txtUsuario.getText());
    }
     @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("componentes/LOGOSAG(2).png"));
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        TablaRoles = new javax.swing.JTable();
        PanelRol = new javax.swing.JPanel();
        Agregar = new javax.swing.JCheckBox();
        Cancelar = new javax.swing.JCheckBox();
        Guardar = new javax.swing.JCheckBox();
        Editar = new javax.swing.JCheckBox();
        Activo = new javax.swing.JCheckBox();
        Inactivo = new javax.swing.JCheckBox();
        Anular = new javax.swing.JCheckBox();
        Buscar = new javax.swing.JCheckBox();
        CrearCompra = new javax.swing.JCheckBox();
        Historico = new javax.swing.JCheckBox();
        Reportes = new javax.swing.JCheckBox();
        Todos = new javax.swing.JCheckBox();
        txtListadoU = new javax.swing.JLabel();
        Aprobar = new javax.swing.JCheckBox();
        Eliminar1 = new javax.swing.JCheckBox();
        BtnSalir = new javax.swing.JLabel();
        txtGuardar = new javax.swing.JLabel();
        ComboUsuario = new javax.swing.JComboBox<>();
        ComboPermisos = new javax.swing.JComboBox<>();
        usuario = new javax.swing.JLabel();
        txtRol = new javax.swing.JLabel();
        BActualizar = new javax.swing.JLabel();
        txtCancelar = new javax.swing.JLabel();
        txtListadop = new javax.swing.JLabel();
        txtPermiso = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TablaRoles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1", "Clientes", null},
                {"2", "Empleados", null},
                {"3", "Proveedoress", null},
                {"4", "Medicamentos", null},
                {"5", "Sucursal", null},
                {"6", "Almacén", null},
                {"7", "Compras", null},
                {"8", "Ventas", null},
                {"9", "Sueldo Hitorico", null},
                {"10", "Cargo Historico", null},
                {"11", "Restringuir Medicamento", null},
                {"12", "Historico Medicamento", null},
                {"13", "Contacto Proveedor", null},
                {"14", "Productos Proveedor", null},
                {"15", "Gerencia", null},
                {"16", "Caja", null},
                {"17", "Factura ", null},
                {"18", "Operaciones", null},
                {"19", "Detalle Almacén", null},
                {"20", "Inventario", null},
                {"21", "Gerencia-Sucursal", null},
                {"22", null, null},
                {"23", null, null}
            },
            new String [] {
                "Item", "Permiso", "Acción"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TablaRoles.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaRolesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(TablaRoles);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 320, -1, 360));

        PanelRol.setEnabled(false);

        Agregar.setText("Agregar");
        Agregar.setEnabled(false);

        Cancelar.setText("Cancelar");
        Cancelar.setEnabled(false);
        Cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelarActionPerformed(evt);
            }
        });

        Guardar.setText("Guardar");
        Guardar.setEnabled(false);
        Guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarActionPerformed(evt);
            }
        });

        Editar.setText("Editar");
        Editar.setEnabled(false);

        Activo.setText("Activo");
        Activo.setEnabled(false);

        Inactivo.setText("Inactivo");
        Inactivo.setEnabled(false);

        Anular.setText("Anular");
        Anular.setEnabled(false);

        Buscar.setText("Buscar");
        Buscar.setEnabled(false);

        CrearCompra.setText("Crear Compras");
        CrearCompra.setEnabled(false);

        Historico.setText("Históricos");
        Historico.setEnabled(false);

        Reportes.setText("Reportes");
        Reportes.setEnabled(false);
        Reportes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReportesActionPerformed(evt);
            }
        });

        Todos.setText("Todos los permisos");
        Todos.setEnabled(false);
        Todos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                TodosItemStateChanged(evt);
            }
        });
        Todos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TodosMouseClicked(evt);
            }
        });

        txtListadoU.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        txtListadoU.setText("Listado  de permisos al usuario:");

        Aprobar.setText("Aprobar");
        Aprobar.setEnabled(false);
        Aprobar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AprobarActionPerformed(evt);
            }
        });

        Eliminar1.setText("Eliminar");
        Eliminar1.setEnabled(false);
        Eliminar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Eliminar1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelRolLayout = new javax.swing.GroupLayout(PanelRol);
        PanelRol.setLayout(PanelRolLayout);
        PanelRolLayout.setHorizontalGroup(
            PanelRolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelRolLayout.createSequentialGroup()
                .addGroup(PanelRolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelRolLayout.createSequentialGroup()
                        .addContainerGap(10, Short.MAX_VALUE)
                        .addComponent(txtListadoU))
                    .addGroup(PanelRolLayout.createSequentialGroup()
                        .addGroup(PanelRolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanelRolLayout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addGroup(PanelRolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Agregar)
                                    .addComponent(Cancelar)
                                    .addComponent(CrearCompra)
                                    .addComponent(Anular)
                                    .addComponent(Activo)
                                    .addComponent(Buscar)))
                            .addGroup(PanelRolLayout.createSequentialGroup()
                                .addGap(149, 149, 149)
                                .addComponent(Reportes)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelRolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Aprobar)
                    .addComponent(Todos)
                    .addComponent(Guardar)
                    .addComponent(Editar)
                    .addComponent(Inactivo)
                    .addComponent(Eliminar1)
                    .addComponent(Historico))
                .addContainerGap())
        );
        PanelRolLayout.setVerticalGroup(
            PanelRolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelRolLayout.createSequentialGroup()
                .addContainerGap(29, Short.MAX_VALUE)
                .addGroup(PanelRolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Todos)
                    .addComponent(txtListadoU))
                .addGap(28, 28, 28)
                .addGroup(PanelRolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Agregar)
                    .addComponent(Guardar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelRolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Cancelar)
                    .addComponent(Editar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelRolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Activo)
                    .addComponent(Inactivo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelRolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Anular)
                    .addComponent(Aprobar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelRolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Historico)
                    .addComponent(CrearCompra))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelRolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Eliminar1)
                    .addComponent(Buscar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Reportes)
                .addGap(11, 11, 11))
        );

        getContentPane().add(PanelRol, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 260, 400, 320));

        BtnSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BtnSalirMouseClicked(evt);
            }
        });
        getContentPane().add(BtnSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 20, 70, 40));

        txtGuardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtGuardarMouseClicked(evt);
            }
        });
        getContentPane().add(txtGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 610, 110, 40));

        ComboUsuario.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Usuario" }));
        ComboUsuario.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboUsuarioItemStateChanged(evt);
            }
        });
        ComboUsuario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ComboUsuarioMouseClicked(evt);
            }
        });
        ComboUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboUsuarioActionPerformed(evt);
            }
        });
        getContentPane().add(ComboUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 200, -1, -1));

        ComboPermisos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Permisos" }));
        ComboPermisos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboPermisosItemStateChanged(evt);
            }
        });
        ComboPermisos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboPermisosActionPerformed(evt);
            }
        });
        getContentPane().add(ComboPermisos, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 250, -1, -1));

        usuario.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        usuario.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(usuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 50, 230, 20));

        txtRol.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        txtRol.setText("Listado de permisos del Usuario:");
        getContentPane().add(txtRol, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 190, -1, 40));

        BActualizar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BActualizarMouseClicked(evt);
            }
        });
        getContentPane().add(BActualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 610, 110, 40));

        txtCancelar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtCancelarMouseClicked(evt);
            }
        });
        getContentPane().add(txtCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 610, 110, 40));

        txtListadop.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        txtListadop.setText("Listado de permisos del Usuario:");
        getContentPane().add(txtListadop, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 290, -1, -1));

        txtPermiso.setIcon(new javax.swing.ImageIcon(getClass().getResource("/componentes/Modulo de Seguridad (3).png"))); // NOI18N
        txtPermiso.setText("jLabel1");
        getContentPane().add(txtPermiso, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -20, 1020, 740));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void ComboUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboUsuarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboUsuarioActionPerformed

    private void GuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_GuardarActionPerformed

    private void CancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CancelarActionPerformed

    private void ReportesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReportesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ReportesActionPerformed

    private void ComboPermisosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboPermisosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboPermisosActionPerformed

    private void ComboUsuarioItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboUsuarioItemStateChanged
        /*if (ComboUsuario.getSelectedIndex() == 1) {
            CARGARtp();
            ObtenerRol();
        } else if (ComboUsuario.getSelectedIndex() == 2) {
            CARGARtp();
            ObtenerRol();
        } else if (ComboUsuario.getSelectedIndex() == 3) {
            CARGARtp();
            ObtenerRol();
        } else if (ComboUsuario.getSelectedIndex() == 4) {
            CARGARtp();
            ObtenerRol();
        } else if (ComboUsuario.getSelectedIndex() == 5) {
            CARGARtp();
            ObtenerRol();
        } else if (ComboUsuario.getSelectedIndex() == 6) {
            CARGARtp();
            ObtenerRol();
        }*/
        CARGARtp();
        ObtenerRol();
    }//GEN-LAST:event_ComboUsuarioItemStateChanged

    private void ComboPermisosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboPermisosItemStateChanged
        if (ComboPermisos.getSelectedIndex() == 1) {
            habilitar();
        } else if (ComboPermisos.getSelectedIndex() == 2) {
            hEmpleado();
        } else if (ComboPermisos.getSelectedIndex() == 3) {
            habilitar();
        } else if (ComboPermisos.getSelectedIndex() == 4) {
            habilitar();
        } else if (ComboPermisos.getSelectedIndex() == 5) {
            habilitar();
        } else if (ComboPermisos.getSelectedIndex() == 6) {
            habilitar();
        } else if (ComboPermisos.getSelectedIndex() == 7) {
            hCompras();
        } else if (ComboPermisos.getSelectedIndex() == 8) {
            hventas();
        } else if (ComboPermisos.getSelectedIndex() == 9) {
            hhistorico();
        } else if (ComboPermisos.getSelectedIndex() == 10) {
            hhistorico();
        } else if (ComboPermisos.getSelectedIndex() == 11) {
            habilitar();
        } else if (ComboPermisos.getSelectedIndex() == 12) {
            hventas();
        } else if (ComboPermisos.getSelectedIndex() == 13) {
            habilitar();
        } else if (ComboPermisos.getSelectedIndex() == 14) {
            habilitar();
        } else if (ComboPermisos.getSelectedIndex() == 15) {
            habilitar();
        } else if (ComboPermisos.getSelectedIndex() == 16) {
            habilitar();
        } else if (ComboPermisos.getSelectedIndex() == 17) {
            habilitarfac();
        } else if (ComboPermisos.getSelectedIndex() == 18) {
            habilitar();
        } else if (ComboPermisos.getSelectedIndex() == 19) {
            habilitar();
        } else if (ComboPermisos.getSelectedIndex() == 20) {
            hventas();
        } else if (ComboPermisos.getSelectedIndex() == 21) {
            habilitarg();
        }else if (ComboPermisos.getSelectedIndex() == 22) {
            habilitarCom();
        }
    }//GEN-LAST:event_ComboPermisosItemStateChanged

    private void TodosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_TodosItemStateChanged

        if (Todos.isSelected()) {
            Stodo();
        } else {
            DStodo();
        }

    }//GEN-LAST:event_TodosItemStateChanged

    private void TodosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TodosMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_TodosMouseClicked

    private void txtGuardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtGuardarMouseClicked

        if (Agregar.isSelected()) {
            agregari = 1;
        } else {
            agregari = 0;
        }
        if (Editar.isSelected()) {
            editari = 1;
        } else {
            editari = 0;
        }
        if (Guardar.isSelected()) {
            guardari = 1;
        } else {
            guardari = 0;
        }
        if (Cancelar.isSelected()) {
            cancelari = 1;
        } else {
            cancelari = 0;
        }
        if (Reportes.isSelected()) {
            reportesi = 1;
        } else {
            reportesi = 0;
        }
        if (Buscar.isSelected()) {
            buscari = 1;
        } else {
            buscari = 0;
        }
        if (Anular.isSelected()) {
            anulari = 1;
        } else {
            anulari = 0;
        }
        if (Activo.isSelected()) {
            activoi = 1;
        } else {
            activoi = 0;
        }
        if (Inactivo.isSelected()) {
            inactivoi = 1;
        } else {
            inactivoi = 0;
        }
        if (Historico.isSelected()) {
            historicoi = 1;
        } else {
            historicoi = 0;
        }
        if (CrearCompra.isSelected()) {
            crearcomprai = 1;
        } else {
            crearcomprai = 0;
        }
        if (Eliminar1.isSelected()) {
            eliminari = 1;
        } else {
            eliminari = 0;
        }
        if (Aprobar.isSelected()) {
            aprobari = 1;
        } else {
            aprobari= 0;
        }
        if (ComboPermisos.equals("Seleccione Permiso")) {
            JOptionPane.showMessageDialog(null, "Seleccione Permiso");

        } else {

            try {
                Connection con = Conexion.getConexion();
                PreparedStatement ps = con.prepareStatement("Insert into PermisosUsuario (IdPermiso, IdUsuario, Agregar, Guardar, Cancelar, Editar, Activo, Inactivo, Reporte, Anular, CrearCompra, Historicos, Buscar, Eliminar, Aprobar) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                ps.setInt(1, ComboPermisos.getSelectedIndex());
                ps.setInt(2, ComboUsuario.getSelectedIndex());
                ps.setInt(3, agregari);
                ps.setInt(4, guardari);
                ps.setInt(5, cancelari);
                ps.setInt(6, editari);
                ps.setInt(7, activoi);
                ps.setInt(8, inactivoi);
                ps.setInt(9, reportesi);
                ps.setInt(10, anulari);
                ps.setInt(11, crearcomprai);
                ps.setInt(12, historicoi);
                ps.setInt(13, buscari);
                ps.setInt(14, eliminari);
                ps.setInt(15, aprobari);
                ps.executeUpdate();

                JOptionPane.showMessageDialog(null, "Registro guardado");
                //Inhabillitar();

                CARGARtp();
                Nohabilitar();
                DStodo();

            } catch (SQLException ex) {
                //lo.LogBitacora("Error: No se pudo guardar la factura" + "Excepción: " + ex + ". Origen: " + this.getClass().getSimpleName(), Factura, Guardar);

                JOptionPane.showMessageDialog(null, ex.toString());
            }
        }
    }//GEN-LAST:event_txtGuardarMouseClicked

    private void txtCancelarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtCancelarMouseClicked
        DStodo();
        Nohabilitar();
        
        ComboPermisos.setEnabled(Boolean.TRUE);
        ComboUsuario.setEnabled(Boolean.TRUE);
    }//GEN-LAST:event_txtCancelarMouseClicked

    private void TablaRolesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaRolesMouseClicked
        try {
            int fila = TablaRoles.getSelectedRow();
            int id = Integer.parseInt(TablaRoles.getValueAt(fila, 0).toString());
            PreparedStatement ps;
            ResultSet rs;
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("Select Agregar, Guardar, Cancelar, Editar, Activo, Inactivo, Reporte, Anular, CrearCompra, Historicos, Buscar, Eliminar, Aprobar\n"
                    + "From PermisosUsuario\n"
                    + "where IdPermiso =? and IdUsuario=?");
            ps.setInt(1, id);
            ps.setInt(2, ComboUsuario.getSelectedIndex());
            rs = ps.executeQuery();

            while (rs.next()) {
                ComboPermisos.setSelectedIndex(id);
                agregari = rs.getInt("Agregar");
                guardari = rs.getInt("Guardar");
                cancelari = rs.getInt("Cancelar");
                editari = rs.getInt("Editar");
                activoi = rs.getInt("Activo");
                inactivoi = rs.getInt("Inactivo");
                reportesi = rs.getInt("Reporte");
                anulari = rs.getInt("Anular");
                crearcomprai = rs.getInt("CrearCompra");
                historicoi = rs.getInt("Historicos");
                buscari = rs.getInt("Buscar");
                eliminari = rs.getInt("Eliminar");
                 aprobari=rs.getInt("Aprobar");
                        
                        
            }
        } catch (SQLException ex) {
            //lo.LogBitacora("Error: No se pudo seleccionar la tabla" + "Excepción: " + ex + ". Origen: " + this.getClass().getSimpleName(), proveedores, tablap);
            JOptionPane.showMessageDialog(null, ex.toString());
        }
        if (agregari == 1) {
            Agregar.setSelected(Boolean.TRUE);
        } else {
            Agregar.setSelected(Boolean.FALSE);
        }
        if (editari == 1) {
            Editar.setSelected(Boolean.TRUE);
        } else {
            Editar.setSelected(Boolean.FALSE);
        }
        if (guardari == 1) {
            Guardar.setSelected(Boolean.TRUE);
        } else {
            Guardar.setSelected(Boolean.FALSE);
        }
        if (cancelari == 1) {
            Cancelar.setSelected(Boolean.TRUE);
        } else {
            Cancelar.setSelected(Boolean.FALSE);
        }
        if (reportesi == 1) {
            Reportes.setSelected(Boolean.TRUE);
        } else {
            Reportes.setSelected(Boolean.FALSE);
        }
        if (buscari == 1) {
            Buscar.setSelected(Boolean.TRUE);
        } else {
            Buscar.setSelected(Boolean.FALSE);
        }
        if (anulari == 1) {
            Anular.setSelected(Boolean.TRUE);
        } else {
            Anular.setSelected(Boolean.FALSE);
        }
        if (activoi == 1) {
            Activo.setSelected(Boolean.TRUE);
        } else {
            Activo.setSelected(Boolean.FALSE);
        }
        if (inactivoi == 1) {
            Inactivo.setSelected(Boolean.TRUE);
        } else {
            Inactivo.setSelected(Boolean.FALSE);
        }
        if (historicoi == 1) {
            Historico.setSelected(Boolean.TRUE);
        } else {
            Historico.setSelected(Boolean.FALSE);
        }
        if (crearcomprai == 1) {
            CrearCompra.setSelected(Boolean.TRUE);
        } else {
            CrearCompra.setSelected(Boolean.FALSE);
        }
        if (eliminari == 1) {
            Eliminar1.setSelected(Boolean.TRUE);
        } else {
            Eliminar1.setSelected(Boolean.FALSE);
        }
        if (aprobari == 1) {
            Aprobar.setSelected(Boolean.TRUE);
        } else {
            Aprobar.setSelected(Boolean.FALSE);
        }
        if (ComboPermisos.getSelectedIndex() == 1) {
            habilitar();
        } else if (ComboPermisos.getSelectedIndex() == 2) {
            hEmpleado();
        } else if (ComboPermisos.getSelectedIndex() == 3) {
            habilitar();
        } else if (ComboPermisos.getSelectedIndex() == 4) {
            habilitar();
        } else if (ComboPermisos.getSelectedIndex() == 5) {
            habilitar();
        } else if (ComboPermisos.getSelectedIndex() == 6) {
            habilitar();
        } else if (ComboPermisos.getSelectedIndex() == 7) {
            hCompras();
        } else if (ComboPermisos.getSelectedIndex() == 8) {
            hventas();
        } else if (ComboPermisos.getSelectedIndex() == 9) {
            hhistorico();
        } else if (ComboPermisos.getSelectedIndex() == 10) {
            hhistorico();
        } else if (ComboPermisos.getSelectedIndex() == 11) {
            habilitar();
        } else if (ComboPermisos.getSelectedIndex() == 12) {
            hventas();
        } else if (ComboPermisos.getSelectedIndex() == 13) {
            habilitar();
        } else if (ComboPermisos.getSelectedIndex() == 14) {
            habilitar();
        } else if (ComboPermisos.getSelectedIndex() == 15) {
            habilitar();
        } else if (ComboPermisos.getSelectedIndex() == 16) {
            habilitar();
        } else if (ComboPermisos.getSelectedIndex() == 17) {
            habilitarfac();
        } else if (ComboPermisos.getSelectedIndex() == 18) {
            habilitar();
        } else if (ComboPermisos.getSelectedIndex() == 19) {
            habilitar();
        } else if (ComboPermisos.getSelectedIndex() == 20) {
            hventas();
        } else if (ComboPermisos.getSelectedIndex() == 21) {
            habilitarg();
        }else if(ComboPermisos.getSelectedIndex() == 22){
            habilitarCom();
        }
        ComboPermisos.setEnabled(Boolean.FALSE);
        ComboUsuario.setEnabled(Boolean.FALSE);
        //habilitar();
    }//GEN-LAST:event_TablaRolesMouseClicked

    private void BActualizarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BActualizarMouseClicked
        if (Agregar.isSelected()) {
            agregari = 1;
        } else {
            agregari = 0;
        }
        if (Editar.isSelected()) {
            editari = 1;
        } else {
            editari = 0;
        }
        if (Guardar.isSelected()) {
            guardari = 1;
        } else {
            guardari = 0;
        }
        if (Cancelar.isSelected()) {
            cancelari = 1;
        } else {
            cancelari = 0;
        }
        if (Reportes.isSelected()) {
            reportesi = 1;
        } else {
            reportesi = 0;
        }
        if (Buscar.isSelected()) {
            buscari = 1;
        } else {
            buscari = 0;
        }
        if (Anular.isSelected()) {
            anulari = 1;
        } else {
            anulari = 0;
        }
        if (Activo.isSelected()) {
            activoi = 1;
        } else {
            activoi = 0;
        }
        if (Inactivo.isSelected()) {
            inactivoi = 1;
        } else {
            inactivoi = 0;
        }
        if (Historico.isSelected()) {
            historicoi = 1;
        } else {
            historicoi = 0;
        }
        if (CrearCompra.isSelected()) {
            crearcomprai = 1;
        } else {
            crearcomprai = 0;
        }
        if (Eliminar1.isSelected()) {
            eliminari = 1;
        } else {
            eliminari = 0;
        }
        if (Aprobar.isSelected()) {
            aprobari = 1;
        } else {
            aprobari= 0;
        }
        if (ComboPermisos.equals("Seleccione Permiso")) {
            JOptionPane.showMessageDialog(null, "Seleccione Permiso");

        } else {

            try {
                Connection con = Conexion.getConexion();
                PreparedStatement ps = con.prepareStatement("Update PermisosUsuario set Agregar=?, Guardar=?, Cancelar=?, Editar=?, Activo=?, Inactivo=?, Reporte=?, Anular=?, CrearCompra=?, Historicos=?, Buscar=?, Eliminar=?, Aprobar=? where IdPermiso=? and IdUsuario=? ");

                ps.setInt(1, agregari);
                ps.setInt(2, guardari);
                ps.setInt(3, cancelari);
                ps.setInt(4, editari);
                ps.setInt(5, activoi);
                ps.setInt(6, inactivoi);
                ps.setInt(7, reportesi);
                ps.setInt(8, anulari);
                ps.setInt(9, crearcomprai);
                ps.setInt(10, historicoi);
                ps.setInt(11, buscari);
                ps.setInt(12, eliminari);
                ps.setInt(13, aprobari);
                ps.setInt(14, ComboPermisos.getSelectedIndex());
                ps.setInt(15, ComboUsuario.getSelectedIndex());
                ps.executeUpdate();

                JOptionPane.showMessageDialog(null, "Registro guardado");
                //Inhabillitar();

                CARGARtp();
                Nohabilitar();
                DStodo();
                ComboPermisos.setEnabled(Boolean.TRUE);
                ComboUsuario.setEnabled(Boolean.TRUE);

            } catch (SQLException ex) {
                //lo.LogBitacora("Error: No se pudo guardar la factura" + "Excepción: " + ex + ". Origen: " + this.getClass().getSimpleName(), Factura, Guardar);

                JOptionPane.showMessageDialog(null, ex.toString());
            }
        }
    }//GEN-LAST:event_BActualizarMouseClicked

    private void BtnSalirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BtnSalirMouseClicked
        PantallaPrincipal l= new PantallaPrincipal();
        {
            l.setVisible(true);
            dispose();

        }
    }//GEN-LAST:event_BtnSalirMouseClicked

    private void ComboUsuarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ComboUsuarioMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboUsuarioMouseClicked

    private void AprobarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AprobarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AprobarActionPerformed

    private void Eliminar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Eliminar1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Eliminar1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Roles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Roles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Roles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Roles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Roles().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox Activo;
    private javax.swing.JCheckBox Agregar;
    private javax.swing.JCheckBox Anular;
    private javax.swing.JCheckBox Aprobar;
    private javax.swing.JLabel BActualizar;
    private javax.swing.JLabel BtnSalir;
    private javax.swing.JCheckBox Buscar;
    private javax.swing.JCheckBox Cancelar;
    private javax.swing.JComboBox<String> ComboPermisos;
    private javax.swing.JComboBox<String> ComboUsuario;
    private javax.swing.JCheckBox CrearCompra;
    private javax.swing.JCheckBox Editar;
    private javax.swing.JCheckBox Eliminar1;
    private javax.swing.JCheckBox Guardar;
    private javax.swing.JCheckBox Historico;
    private javax.swing.JCheckBox Inactivo;
    private javax.swing.JPanel PanelRol;
    private javax.swing.JCheckBox Reportes;
    private javax.swing.JTable TablaRoles;
    private javax.swing.JCheckBox Todos;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel txtCancelar;
    private javax.swing.JLabel txtGuardar;
    private javax.swing.JLabel txtListadoU;
    private javax.swing.JLabel txtListadop;
    private javax.swing.JLabel txtPermiso;
    private javax.swing.JLabel txtRol;
    private javax.swing.JLabel usuario;
    // End of variables declaration//GEN-END:variables
public class CargarUsuarios {

        String cargarC = "Carga Caja";

        public DefaultComboBoxModel getvalues() {

            // int Cj = Integer.parseInt(txtIdS.getText());
            DefaultComboBoxModel modelo = new DefaultComboBoxModel();
            try {

                ResultSet rs;
                Connection con = Conexion.getConexion();
                PreparedStatement ps = con.prepareStatement("Select Nombre from Usuario");
                //ps.setInt(1, Surc);
                rs = ps.executeQuery();
                modelo.addElement("Seleccione Usuario");
                while (rs.next()) {
                    modelo.addElement(rs.getString(1));
                }
                con.close();
                rs.close();
            } catch (Exception e) {
                //lo.LogBitacora("Error: No se pudo cargar caja" + "Excepción: " + e + ". Origen: " + this.getClass().getSimpleName(), Operaciones,cargarC);

                System.out.println(e);
            }
            return modelo;
        }
    }

    public class CargarPermisos {
        //String cargarC="Carga Caja";

        public DefaultComboBoxModel getvalues() {

            // int Cj = Integer.parseInt(txtIdS.getText());
            DefaultComboBoxModel modelo = new DefaultComboBoxModel();
            try {

                ResultSet rs;
                Connection con = Conexion.getConexion();
                PreparedStatement ps = con.prepareStatement("Select Descripcion from Permisos");
                //ps.setInt(1, Surc);
                rs = ps.executeQuery();
                modelo.addElement("Seleccione Permisos");
                while (rs.next()) {
                    modelo.addElement(rs.getString(1));
                }
                con.close();
                rs.close();
            } catch (Exception e) {
                //lo.LogBitacora("Error: No se pudo cargar caja" + "Excepción: " + e + ". Origen: " + this.getClass().getSimpleName(), Operaciones,cargarC);

                System.out.println(e);
            }
            return modelo;
        }
    }

    public void habilitar() {
        Agregar.setEnabled(Boolean.TRUE);
        Guardar.setEnabled(Boolean.TRUE);
        Cancelar.setEnabled(Boolean.TRUE);
        Editar.setEnabled(Boolean.TRUE);
        Activo.setEnabled(Boolean.TRUE);
        Inactivo.setEnabled(Boolean.TRUE);
        Reportes.setEnabled(Boolean.TRUE);
        Todos.setEnabled(Boolean.TRUE);
        Buscar.setEnabled(Boolean.TRUE);
    }
    public void habilitarg() {
        Agregar.setEnabled(Boolean.TRUE);
        Guardar.setEnabled(Boolean.TRUE);
        Cancelar.setEnabled(Boolean.TRUE);
        Editar.setEnabled(Boolean.TRUE);
        Reportes.setEnabled(Boolean.TRUE);
        Todos.setEnabled(Boolean.TRUE);
        Buscar.setEnabled(Boolean.TRUE);
    }
    public void habilitarCom() {
        Agregar.setEnabled(Boolean.TRUE);
        Guardar.setEnabled(Boolean.TRUE);
        Cancelar.setEnabled(Boolean.TRUE);
        Editar.setEnabled(Boolean.TRUE);
        Aprobar.setEnabled(Boolean.TRUE);
        Eliminar1.setEnabled(Boolean.TRUE);
        Todos.setEnabled(Boolean.TRUE);
        Buscar.setEnabled(Boolean.TRUE);
    }
    public void habilitarfac() {
        Agregar.setEnabled(Boolean.TRUE);
        Guardar.setEnabled(Boolean.TRUE);
        Cancelar.setEnabled(Boolean.TRUE);
        Editar.setEnabled(Boolean.TRUE);
        Eliminar1.setEnabled(Boolean.TRUE);
        Todos.setEnabled(Boolean.TRUE);
        Buscar.setEnabled(Boolean.TRUE);
        Reportes.setEnabled(Boolean.TRUE);
        
    }

    public void hEmpleado() {
        Agregar.setEnabled(Boolean.TRUE);
        Guardar.setEnabled(Boolean.TRUE);
        Cancelar.setEnabled(Boolean.TRUE);
        Editar.setEnabled(Boolean.TRUE);
        Activo.setEnabled(Boolean.TRUE);
        Inactivo.setEnabled(Boolean.TRUE);
        Reportes.setEnabled(Boolean.TRUE);
        Todos.setEnabled(Boolean.TRUE);
        Buscar.setEnabled(Boolean.TRUE);
        Historico.setEnabled(Boolean.TRUE);
    }

    public void hCompras() {
        Editar.setEnabled(Boolean.TRUE);
        CrearCompra.setEnabled(Boolean.TRUE);
        Reportes.setEnabled(Boolean.TRUE);
        Todos.setEnabled(Boolean.TRUE);
        Buscar.setEnabled(Boolean.TRUE);
        Anular.setEnabled(Boolean.TRUE);
    }

    public void hventas() {

        Reportes.setEnabled(Boolean.TRUE);
        Todos.setEnabled(Boolean.TRUE);
        Buscar.setEnabled(Boolean.TRUE);
    }

    public void hhistorico() {
        Agregar.setEnabled(Boolean.TRUE);
        Guardar.setEnabled(Boolean.TRUE);
        Cancelar.setEnabled(Boolean.TRUE);
        Editar.setEnabled(Boolean.TRUE);
        //Activo.setEnabled(Boolean.TRUE);
        //Inactivo.setEnabled(Boolean.TRUE);
        Reportes.setEnabled(Boolean.TRUE);
        Todos.setEnabled(Boolean.TRUE);
        Buscar.setEnabled(Boolean.TRUE);
        //Historico.setEnabled(Boolean.TRUE);
    }

    public void Nohabilitar() {
        Agregar.setEnabled(Boolean.FALSE);
        Guardar.setEnabled(Boolean.FALSE);
        Cancelar.setEnabled(Boolean.FALSE);
        Editar.setEnabled(Boolean.FALSE);
        Activo.setEnabled(Boolean.FALSE);
        Inactivo.setEnabled(Boolean.FALSE);
        Reportes.setEnabled(Boolean.FALSE);
        Todos.setEnabled(Boolean.FALSE);
        Buscar.setEnabled(Boolean.FALSE);
        Historico.setEnabled(Boolean.FALSE);
        CrearCompra.setEnabled(Boolean.FALSE);
        Anular.setEnabled(Boolean.FALSE);
        Aprobar.setEnabled(Boolean.FALSE);
        Eliminar1.setEnabled(Boolean.FALSE);
    }

    public void DStodo() {
        Historico.setSelected(Boolean.FALSE);
        Agregar.setSelected(Boolean.FALSE);
        Guardar.setSelected(Boolean.FALSE);
        Cancelar.setSelected(Boolean.FALSE);
        Editar.setSelected(Boolean.FALSE);
        Activo.setSelected(Boolean.FALSE);
        Inactivo.setSelected(Boolean.FALSE);
        Reportes.setSelected(Boolean.FALSE);
        Anular.setSelected(Boolean.FALSE);
        Buscar.setSelected(Boolean.FALSE);
        CrearCompra.setSelected(Boolean.FALSE);
        Eliminar1.setSelected(Boolean.FALSE);
        Aprobar.setSelected(Boolean.FALSE);
        Todos.setSelected(Boolean.FALSE);
    }

    public void Stodo() {
        if (Agregar.isEnabled()) {
            Agregar.setSelected(Boolean.TRUE);
        }
        if (Guardar.isEnabled()) {
            Guardar.setSelected(Boolean.TRUE);
        }
        if (Cancelar.isEnabled()) {
            Cancelar.setSelected(Boolean.TRUE);
        }
        if (Editar.isEnabled()) {
            Editar.setSelected(Boolean.TRUE);
        }
        if (Activo.isEnabled()) {
            Activo.setSelected(Boolean.TRUE);
        }
        if (Inactivo.isEnabled()) {
            Inactivo.setSelected(Boolean.TRUE);
        }
        if (Reportes.isEnabled()) {
            Reportes.setSelected(Boolean.TRUE);
        }
        if (Anular.isEnabled()) {
            Anular.setSelected(Boolean.TRUE);
        }
        if (Buscar.isEnabled()) {
            Buscar.setSelected(Boolean.TRUE);
        }
        if (Historico.isEnabled()) {
            Historico.setSelected(Boolean.TRUE);
        }
        if (CrearCompra.isEnabled()) {
            CrearCompra.setSelected(Boolean.TRUE);
        }
        if (Eliminar1.isEnabled()) {
            Eliminar1.setSelected(Boolean.TRUE);
        }
        if (Aprobar.isEnabled()) {
            Aprobar.setSelected(Boolean.TRUE);
        }

    }

    public void CARGARtp() {
        DefaultTableModel modeloTabla = (DefaultTableModel) TablaRoles.getModel();
        modeloTabla.setRowCount(0);
        PreparedStatement ps;
        ResultSet rs;
        ResultSetMetaData rsmd;
        int columnas;
        //int id = Integer.parseInt(idFactura.getText());
        String cargartp = "CargarTP";
        try {
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("Select PU.IdPermiso, U.Nombre, P.Descripcion\n"
                    + "From PermisosUsuario as PU \n"
                    + "Inner Join Usuario as U on Pu.IdUsuario=U.Id_Usuario\n"
                    + "Inner Join Permisos as P ON PU.IdPermiso=P.IdPermiso\n"
                    + "Where U.Id_Usuario=?");
            ps.setInt(1, ComboUsuario.getSelectedIndex());
            rs = ps.executeQuery();
            rsmd = rs.getMetaData();
            columnas = rsmd.getColumnCount();

            while (rs.next()) {
                Object[] fila = new Object[columnas];
                for (int indice = 0; indice < columnas; indice++) {
                    fila[indice] = rs.getObject(indice + 1);
                }
                modeloTabla.addRow(fila);
            }

        } catch (SQLException ex) {
            //lo.LogBitacora("Error: No se pudo cargar " + "Excepción: " + ex + ". Origen: " + this.getClass().getSimpleName(), factura, cargartp);

            JOptionPane.showMessageDialog(null, ex.toString());
        }
    }

    public void ObtenerRol() {
        // String Nombre = ComboCajaO.getSelectedItem().toString();
        try {
            ResultSet rs;
            Connection con = Conexion.getConexion();
            PreparedStatement ps = con.prepareStatement("Select R.Descripcion\n"
                    + "From Usuario as U\n"
                    + "Inner Join Roles as R on U.Rol=R.IdRol\n"
                    + "Where U.Id_Usuario=?");
            ps.setInt(1, ComboUsuario.getSelectedIndex());
            rs = ps.executeQuery();

            while (rs.next()) {
                txtRol.setText(rs.getString("Descripcion"));
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        }
    }
}
