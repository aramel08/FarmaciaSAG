/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Formularios_SAG;

import Conexion.Conexion;
import java.awt.Image;
import java.awt.Toolkit;
import static java.lang.Integer.getInteger;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Allisson Castro
 */
public class Operaciones2 extends javax.swing.JFrame {

    /**
     * public static String Id_Agencia = "0";
    public static String Id_Empleado = "0";
    public static String caja = "0";

     */
    public static String Id_Agencia = "0";
    public static String Id_Empleado = "0";
    public static String caja = "0";

    public Operaciones2() {
        initComponents();
        Date max = new Date();
        txtFecha.setDate(max);
        txtFecha.setSelectableDateRange(max, max);
        String timeStamp = new SimpleDateFormat("HH:mm:ss").format(Calendar.getInstance().getTime());
        txtHoraI.setText(timeStamp);
        
        CargarSucursal cs = new Operaciones2.CargarSucursal();
        ComboS.setModel(cs.getvalues());
    }

    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("componentes/LOGOSAG(2).png"));
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtHoraF = new javax.swing.JFormattedTextField();
        BotonGuardarO = new javax.swing.JLabel();
        BotonCancelarO = new javax.swing.JLabel();
        BotonEditarO = new javax.swing.JLabel();
        BotonRegresarO = new javax.swing.JLabel();
        txtIdE = new javax.swing.JLabel();
        txtIdC = new javax.swing.JLabel();
        txtIdS = new javax.swing.JLabel();
        txtHoraI = new javax.swing.JTextField();
        txtFecha = new com.toedter.calendar.JDateChooser();
        ComboE = new javax.swing.JComboBox<>();
        ComboS = new javax.swing.JComboBox<>();
        ComboCajaO = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(getIconImage());
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtHoraF.setBorder(null);
        try {
            txtHoraF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtHoraF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtHoraFMouseClicked(evt);
            }
        });
        txtHoraF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtHoraFKeyTyped(evt);
            }
        });
        getContentPane().add(txtHoraF, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 500, 190, 30));

        BotonGuardarO.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonGuardarOMouseClicked(evt);
            }
        });
        getContentPane().add(BotonGuardarO, new org.netbeans.lib.awtextra.AbsoluteConstraints(501, 136, 120, 40));
        getContentPane().add(BotonCancelarO, new org.netbeans.lib.awtextra.AbsoluteConstraints(661, 140, 120, 30));
        getContentPane().add(BotonEditarO, new org.netbeans.lib.awtextra.AbsoluteConstraints(341, 136, 120, 40));

        BotonRegresarO.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonRegresarOMouseClicked(evt);
            }
        });
        getContentPane().add(BotonRegresarO, new org.netbeans.lib.awtextra.AbsoluteConstraints(31, 46, 120, 30));
        getContentPane().add(txtIdE, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 210, 30, 20));
        getContentPane().add(txtIdC, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 210, 40, 20));
        getContentPane().add(txtIdS, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 210, 40, 20));

        txtHoraI.setText("jTextField1");
        txtHoraI.setBorder(null);
        getContentPane().add(txtHoraI, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 450, 190, 30));
        getContentPane().add(txtFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 400, 190, 30));

        ComboE.setBorder(null);
        getContentPane().add(ComboE, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 350, 190, 30));

        ComboS.setBorder(null);
        ComboS.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboSItemStateChanged(evt);
            }
        });
        getContentPane().add(ComboS, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 250, 190, 30));

        ComboCajaO.setBorder(null);
        getContentPane().add(ComboCajaO, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 300, 190, 30));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/componentes/Pantalla Operaciones 2(1).png"))); // NOI18N
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel1MouseClicked

    private void BotonGuardarOMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonGuardarOMouseClicked

        ObtenerIdS();
        ObtenerIdE();
        ObtenerIdC();
        if (ComboS.equals("Seleccione Sucursal...") || ComboCajaO.equals("Seleccione Caja...") || ComboE.equals("Seleccione Empleado...")) {
            JOptionPane.showMessageDialog(null, "No se puede Guardar datos vacios");
        } else {
            int Sucursal = Integer.parseInt(txtIdS.getText());
            int Caja = Integer.parseInt(txtIdC.getText());
            int Empleado = Integer.parseInt(txtIdE.getText());
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String Fecha = sdf.format(txtFecha.getDate());

            try {
                Connection con = Conexion.getConexion();
                PreparedStatement ps = con.prepareStatement("Insert into Operaciones (Id_Sucursal, Id_Caja,Id_Empleado,Fecha,Hora_Inicio,Hora_Finalizacion) VALUES(?,?,?,?,?,?)");
                ps.setInt(1, Sucursal);
                ps.setInt(2, Caja);
                ps.setInt(3, Empleado);
                ps.setString(4, Fecha);
                ps.setString(5, txtHoraI.getText());
                ps.setString(6, txtHoraF.getText());
                ps.executeUpdate();

                JOptionPane.showMessageDialog(null, "Operaciones Inicializadas");
                Id_Agencia = txtIdS.getText();
                Id_Empleado = ComboE.getSelectedItem().toString();
                caja = ComboCajaO.getSelectedItem().toString();
                Factura F = new Factura();
                {
                    F.setVisible(true);
                    dispose();

                }

               // Inhabillitar();

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex.toString());
            }
        }

    }//GEN-LAST:event_BotonGuardarOMouseClicked

    private void txtHoraFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtHoraFMouseClicked
        if (Validar_CampoHora(txtHoraF.getText()) == true) {
        } else {
            JOptionPane.showMessageDialog(null, "la hora es incorrecta", "Error", JOptionPane.ERROR_MESSAGE);
            //evt.consume();

        }


    }//GEN-LAST:event_txtHoraFMouseClicked

    private void BotonRegresarOMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonRegresarOMouseClicked
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuPrincipal().setVisible(true);
            }
        });
        this.dispose();
    }//GEN-LAST:event_BotonRegresarOMouseClicked

    private void txtHoraFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHoraFKeyTyped
        validarNumeros(evt);
        if (txtHoraF.getText().length() > 7) {
            evt.consume();
        }

    }//GEN-LAST:event_txtHoraFKeyTyped

    private void ComboSItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboSItemStateChanged
ObtenerIdS();
        CargarE ce = new Operaciones2.CargarE();
        ComboE.setModel(ce.getvalues());
        CargarCaja cc = new Operaciones2.CargarCaja();
        ComboCajaO.setModel(cc.getvalues());
    }//GEN-LAST:event_ComboSItemStateChanged
    public void validarNumeros(java.awt.event.KeyEvent e) {
        if (e.getKeyChar() >= 33 && e.getKeyChar() <= 47
                || e.getKeyChar() >= 58 && e.getKeyChar() <= 238) {
            e.consume();
            JOptionPane.showMessageDialog(null, "Este campo solo admite números", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Operaciones2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Operaciones2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Operaciones2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Operaciones2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Operaciones2().setVisible(true);
            }
        });
    }

    public Boolean Validar_CampoHora(String Hora) {
        boolean b;
        char[] a = Hora.toString().toCharArray();
        String[] c = Hora.split(":");
        if ((a[0] == ' ') || (a[1] == ' ') || (a[2] == ' ') || (a[3] == ' ') || (a[4] == ' ') || (getInteger(c[0]) > 24) || (getInteger(c[1]) > 59)) {
            b = false;
        } else {
            b = true;
        }
        return b;

    }

    public int getInteger(String valor) {
        int integer = Integer.parseInt(valor);
        return integer;
    }

    private void Limpiar() {
        ComboS.setSelectedIndex(0);
        ComboE.setSelectedIndex(0);
        ComboCajaO.setSelectedIndex(0);
    }



    public class CargarE {

        public DefaultComboBoxModel getvalues() {
            DefaultComboBoxModel modelo = new DefaultComboBoxModel();
            try {
                
            int Surc = Integer.parseInt(txtIdS.getText());
                ResultSet rs;
                Connection con = Conexion.getConexion();
                PreparedStatement ps = con.prepareStatement("select NombreE from Empleados where Id_Sucursal=?");
                ps.setInt(1, Surc);
                rs = ps.executeQuery();
                modelo.addElement("Seleccione Empleado...");
                while (rs.next()) {
                    modelo.addElement(rs.getString(1));
                }
                con.close();
                rs.close();
            } catch (Exception e) {
                System.out.println(e);
            }
            return modelo;
        }
    }

    public class CargarSucursal {

        public DefaultComboBoxModel getvalues() {

            DefaultComboBoxModel modelo = new DefaultComboBoxModel();
            try {
                Connection con = Conexion.getConexion();
                String sql = "select Nombre from Sucursal";
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery(sql);
                modelo.addElement("Seleccione Sucursal...");
                while (rs.next()) {
                    modelo.addElement(rs.getString(1));
                }
                con.close();
                rs.close();
            } catch (Exception e) {
                System.out.println(e);
            }
            return modelo;
        }

    }

    public class CargarCaja {

        public DefaultComboBoxModel getvalues() {
            
            // int Cj = Integer.parseInt(txtIdS.getText());
            DefaultComboBoxModel modelo = new DefaultComboBoxModel();
            try {
               int Surc = Integer.parseInt(txtIdS.getText()); 
                ResultSet rs;
                Connection con = Conexion.getConexion();
                PreparedStatement ps = con.prepareStatement("Select Num_Caja from Caja where Id_Sucursal=?");
                ps.setInt(1, Surc);
                rs = ps.executeQuery();
                modelo.addElement("Seleccione Caja");
                while (rs.next()) {
                    modelo.addElement(rs.getString(1));
                }
                con.close();
                rs.close();
            } catch (Exception e) {
                System.out.println(e);
            }
            return modelo;
        }
    }

    public void ObtenerIdE() {
        String Nombre = ComboE.getSelectedItem().toString();
        try {
            ResultSet rs;
            Connection con = Conexion.getConexion();
            PreparedStatement ps = con.prepareStatement("Select Id_Empleado From Empleados Where NombreE=?");
            ps.setString(1, Nombre);
            rs = ps.executeQuery();

            while (rs.next()) {
                txtIdE.setText(rs.getString("Id_Empleado"));
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        }
    }

    public void ObtenerIdC() {
        String Nombre = ComboCajaO.getSelectedItem().toString();
        try {
            ResultSet rs;
            Connection con = Conexion.getConexion();
            PreparedStatement ps = con.prepareStatement("Select Id_Caja From Caja Where Num_Caja=?");
            ps.setString(1, Nombre);
            rs = ps.executeQuery();

            while (rs.next()) {
                txtIdC.setText(rs.getString("Id_Caja"));
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        }
    }

    public void ObtenerIdS() {
        String Nombre = ComboS.getSelectedItem().toString();
        try {
            ResultSet rs;
            Connection con = Conexion.getConexion();
            PreparedStatement ps = con.prepareStatement("Select Id_Sucursal From Sucursal Where Nombre=?");
            ps.setString(1, Nombre);
            rs = ps.executeQuery();

            while (rs.next()) {
                txtIdS.setText(rs.getString("Id_Sucursal"));
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BotonCancelarO;
    private javax.swing.JLabel BotonEditarO;
    private javax.swing.JLabel BotonGuardarO;
    private javax.swing.JLabel BotonRegresarO;
    private javax.swing.JComboBox<String> ComboCajaO;
    private javax.swing.JComboBox<String> ComboE;
    private javax.swing.JComboBox<String> ComboS;
    private javax.swing.JLabel jLabel1;
    private com.toedter.calendar.JDateChooser txtFecha;
    private javax.swing.JFormattedTextField txtHoraF;
    private javax.swing.JTextField txtHoraI;
    private javax.swing.JLabel txtIdC;
    private javax.swing.JLabel txtIdE;
    private javax.swing.JLabel txtIdS;
    // End of variables declaration//GEN-END:variables
}
