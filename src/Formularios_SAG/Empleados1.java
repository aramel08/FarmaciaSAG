/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Formularios_SAG;

import Conexion.Conexion;
import Logs.log;
import Reportes.ReportView;
import encriptacion.Encode;
import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author Allisson Castro
 */
public class Empleados1 extends javax.swing.JFrame {

    log lo = new log();
    String empleados = "Empleados";

    /**
     * Creates new form Empleados
     */
    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("componentes/LOGOSAG(2).png"));
        return retValue;

    }

    public static String Id_emp = "0";

    public Empleados1() {
        initComponents();
        txtIdS.setVisible(Boolean.FALSE);
        txtIdE.setVisible(Boolean.FALSE);
        //txt.setVisible(Boolean.FALSE);
        BotonActivoE.setVisible(Boolean.FALSE);
        BotonInactivoE.setVisible(Boolean.FALSE);
        Cargarg ch = new Empleados1.Cargarg();
        ComboGeneroE.setModel(ch.getvalues());
        CargarSucursal cs = new Empleados1.CargarSucursal();
        ComboSucursalE.setModel(cs.getvalues());
        CargarTDocumento ct = new Empleados1.CargarTDocumento();
        ComboDocumento.setModel(ct.getvalues());
        CargarCargo cc = new Empleados1.CargarCargo();
        ComboCargoE.setModel(cc.getvalues());
        cargartabla();
        //errorNombre.setVisible(false);
        //errorNumDocumento.setVisible(false);
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.YEAR, -95);
        Calendar cale = Calendar.getInstance();
        cale.add(Calendar.YEAR, -18);
        Date min = cal.getTime();
        Date max = cale.getTime();
        txtFechaNac.setSelectableDateRange(min, max);
        txtFechaNac.setDateFormatString("dd/MM/yyyy");
        txtFechaNac.setDate(max);
        anchoColumnas();
        AutoCompleteDecorator.decorate(ComboDocumento);
        AutoCompleteDecorator.decorate(ComboGeneroE);
        AutoCompleteDecorator.decorate(ComboSucursalE);
         usuario.setText(Login.txtUsuario.getText());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoBotonesEmpleados = new javax.swing.ButtonGroup();
        lbfechacompra = new javax.swing.JLabel();
        ComboSucursalE = new javax.swing.JComboBox<>();
        ComboDocumento = new javax.swing.JComboBox<>();
        BotonCargoHistoricoE = new javax.swing.JLabel();
        BotonSueldoHistoricoE = new javax.swing.JLabel();
        BotonEditarE = new javax.swing.JLabel();
        BotonAgregarE = new javax.swing.JLabel();
        txtBuscarE = new javax.swing.JTextField();
        BotonActivoE = new javax.swing.JRadioButton();
        BotonInactivoE = new javax.swing.JRadioButton();
        BotonCancelarE = new javax.swing.JLabel();
        BotonGuardarE = new javax.swing.JLabel();
        ComboGeneroE = new javax.swing.JComboBox<>();
        txtDocumentoE = new javax.swing.JTextField();
        txtNombreE = new javax.swing.JTextField();
        botonRegresarE = new javax.swing.JLabel();
        txtIdE = new javax.swing.JLabel();
        txtSueldoE = new javax.swing.JTextField();
        txtCotrasenaE = new javax.swing.JPasswordField();
        txtUsuarioE = new javax.swing.JTextField();
        txtFechaNac = new com.toedter.calendar.JDateChooser();
        reporte = new javax.swing.JLabel();
        txtIdS = new javax.swing.JLabel();
        ComboCargoE = new javax.swing.JComboBox<>();
        txtEmail = new javax.swing.JTextField();
        lbfechacompra1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        usuario = new javax.swing.JLabel();
        barraEmpleado = new javax.swing.JScrollPane();
        TablaEmpleado = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(getIconImage());
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbfechacompra.setBackground(new java.awt.Color(255, 255, 255));
        lbfechacompra.setFont(new java.awt.Font("Georgia", 0, 10)); // NOI18N
        lbfechacompra.setForeground(new java.awt.Color(153, 153, 153));
        lbfechacompra.setText("Contrase√±a");
        lbfechacompra.setToolTipText("");
        lbfechacompra.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lbfechacompra.setVerifyInputWhenFocusTarget(false);
        getContentPane().add(lbfechacompra, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 325, 170, -1));

        ComboSucursalE.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        ComboSucursalE.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tegucigalpa", "San Pedro Sula" }));
        ComboSucursalE.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ComboSucursalE.setEnabled(false);
        ComboSucursalE.setOpaque(false);
        ComboSucursalE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ComboSucursalEMousePressed(evt);
            }
        });
        ComboSucursalE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboSucursalEActionPerformed(evt);
            }
        });
        getContentPane().add(ComboSucursalE, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 375, 190, 30));
        ComboSucursalE.getAccessibleContext().setAccessibleDescription("");

        ComboDocumento.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        ComboDocumento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "DNI", "Pasaporte", "Licencia" }));
        ComboDocumento.setBorder(null);
        ComboDocumento.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ComboDocumento.setEnabled(false);
        ComboDocumento.setOpaque(false);
        ComboDocumento.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ComboDocumentoMousePressed(evt);
            }
        });
        ComboDocumento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboDocumentoActionPerformed(evt);
            }
        });
        getContentPane().add(ComboDocumento, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 326, 180, 30));

        BotonCargoHistoricoE.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BotonCargoHistoricoE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonCargoHistoricoEMouseClicked(evt);
            }
        });
        getContentPane().add(BotonCargoHistoricoE, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 210, 130, 40));

        BotonSueldoHistoricoE.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BotonSueldoHistoricoE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonSueldoHistoricoEMouseClicked(evt);
            }
        });
        getContentPane().add(BotonSueldoHistoricoE, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 210, 120, 30));

        BotonEditarE.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BotonEditarE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonEditarEMouseClicked(evt);
            }
        });
        getContentPane().add(BotonEditarE, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 140, 120, 40));

        BotonAgregarE.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BotonAgregarE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonAgregarEMouseClicked(evt);
            }
        });
        getContentPane().add(BotonAgregarE, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 140, 140, 50));

        txtBuscarE.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        txtBuscarE.setForeground(new java.awt.Color(153, 153, 153));
        txtBuscarE.setText("Buscar por ID o por Nombre");
        txtBuscarE.setBorder(null);
        txtBuscarE.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        txtBuscarE.setOpaque(false);
        txtBuscarE.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtBuscarEFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBuscarEFocusLost(evt);
            }
        });
        txtBuscarE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscarEActionPerformed(evt);
            }
        });
        txtBuscarE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBuscarEKeyTyped(evt);
            }
        });
        getContentPane().add(txtBuscarE, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 450, 225, 30));
        txtBuscarE.getAccessibleContext().setAccessibleDescription("");

        grupoBotonesEmpleados.add(BotonActivoE);
        BotonActivoE.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        BotonActivoE.setForeground(new java.awt.Color(255, 255, 255));
        BotonActivoE.setText("Activo");
        BotonActivoE.setOpaque(false);
        BotonActivoE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonActivoEMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                BotonActivoEMousePressed(evt);
            }
        });
        BotonActivoE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonActivoEActionPerformed(evt);
            }
        });
        getContentPane().add(BotonActivoE, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 460, -1, -1));

        grupoBotonesEmpleados.add(BotonInactivoE);
        BotonInactivoE.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        BotonInactivoE.setForeground(new java.awt.Color(255, 255, 255));
        BotonInactivoE.setText("Inactivo");
        BotonInactivoE.setOpaque(false);
        BotonInactivoE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonInactivoEActionPerformed(evt);
            }
        });
        getContentPane().add(BotonInactivoE, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 460, -1, -1));

        BotonCancelarE.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BotonCancelarE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonCancelarEMouseClicked(evt);
            }
        });
        getContentPane().add(BotonCancelarE, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 140, 130, 50));

        BotonGuardarE.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BotonGuardarE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonGuardarEMouseClicked(evt);
            }
        });
        getContentPane().add(BotonGuardarE, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 140, 120, 40));

        ComboGeneroE.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        ComboGeneroE.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Masculino", "Femenino" }));
        ComboGeneroE.setBorder(null);
        ComboGeneroE.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ComboGeneroE.setEnabled(false);
        ComboGeneroE.setOpaque(false);
        ComboGeneroE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboGeneroEActionPerformed(evt);
            }
        });
        getContentPane().add(ComboGeneroE, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 325, 180, 30));

        txtDocumentoE.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        txtDocumentoE.setForeground(new java.awt.Color(153, 153, 153));
        txtDocumentoE.setText("Ingrese N√∫mero de Documento");
        txtDocumentoE.setBorder(null);
        txtDocumentoE.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        txtDocumentoE.setEnabled(false);
        txtDocumentoE.setOpaque(false);
        txtDocumentoE.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDocumentoEFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDocumentoEFocusLost(evt);
            }
        });
        txtDocumentoE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtDocumentoEMousePressed(evt);
            }
        });
        txtDocumentoE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDocumentoEActionPerformed(evt);
            }
        });
        txtDocumentoE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDocumentoEKeyTyped(evt);
            }
        });
        getContentPane().add(txtDocumentoE, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 380, 200, 30));

        txtNombreE.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        txtNombreE.setForeground(new java.awt.Color(153, 153, 153));
        txtNombreE.setText("Ingrese Nombre y Apellido");
        txtNombreE.setBorder(null);
        txtNombreE.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        txtNombreE.setEnabled(false);
        txtNombreE.setOpaque(false);
        txtNombreE.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNombreEFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNombreEFocusLost(evt);
            }
        });
        txtNombreE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtNombreEMousePressed(evt);
            }
        });
        txtNombreE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreEActionPerformed(evt);
            }
        });
        txtNombreE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreEKeyTyped(evt);
            }
        });
        getContentPane().add(txtNombreE, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 275, 180, 30));
        txtNombreE.getAccessibleContext().setAccessibleName("");

        botonRegresarE.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonRegresarE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonRegresarEMouseClicked(evt);
            }
        });
        getContentPane().add(botonRegresarE, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 130, 40));

        txtIdE.setEnabled(false);
        getContentPane().add(txtIdE, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 250, 20, 20));

        txtSueldoE.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        txtSueldoE.setForeground(new java.awt.Color(153, 153, 153));
        txtSueldoE.setText("Sueldo");
        txtSueldoE.setBorder(null);
        txtSueldoE.setOpaque(false);
        txtSueldoE.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSueldoEFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSueldoEFocusLost(evt);
            }
        });
        txtSueldoE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtSueldoEMousePressed(evt);
            }
        });
        txtSueldoE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSueldoEKeyTyped(evt);
            }
        });
        getContentPane().add(txtSueldoE, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 325, 190, 30));

        txtCotrasenaE.setToolTipText("");
        txtCotrasenaE.setEnabled(false);
        txtCotrasenaE.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCotrasenaEFocusGained(evt);
            }
        });
        getContentPane().add(txtCotrasenaE, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 335, 180, 20));

        txtUsuarioE.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        txtUsuarioE.setText("Usuario");
        txtUsuarioE.setBorder(null);
        txtUsuarioE.setEnabled(false);
        txtUsuarioE.setOpaque(false);
        txtUsuarioE.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtUsuarioEFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtUsuarioEFocusLost(evt);
            }
        });
        txtUsuarioE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUsuarioEActionPerformed(evt);
            }
        });
        getContentPane().add(txtUsuarioE, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 272, 180, 30));

        txtFechaNac.setToolTipText("");
        txtFechaNac.setDateFormatString("Seleccione fecha de nacimiento");
        txtFechaNac.setEnabled(false);
        txtFechaNac.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtFechaNacMousePressed(evt);
            }
        });
        getContentPane().add(txtFechaNac, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 283, 180, 20));

        reporte.setBackground(new java.awt.Color(204, 204, 204));
        reporte.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        reporte.setForeground(new java.awt.Color(255, 255, 255));
        reporte.setIcon(new javax.swing.ImageIcon(getClass().getResource("/componentes/analitica.png"))); // NOI18N
        reporte.setText("REPORTE");
        reporte.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reporteMouseClicked(evt);
            }
        });
        getContentPane().add(reporte, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 50, 120, 40));
        getContentPane().add(txtIdS, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 210, 50, 20));

        ComboCargoE.setEnabled(false);
        ComboCargoE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboCargoEActionPerformed(evt);
            }
        });
        getContentPane().add(ComboCargoE, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 380, 180, 30));

        txtEmail.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        txtEmail.setText("Email");
        txtEmail.setEnabled(false);
        txtEmail.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtEmailFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEmailFocusLost(evt);
            }
        });
        txtEmail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtEmailMousePressed(evt);
            }
        });
        getContentPane().add(txtEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 273, 180, 30));

        lbfechacompra1.setBackground(new java.awt.Color(255, 255, 255));
        lbfechacompra1.setFont(new java.awt.Font("Georgia", 0, 10)); // NOI18N
        lbfechacompra1.setForeground(new java.awt.Color(153, 153, 153));
        lbfechacompra1.setText("Fecha Nacimiento");
        lbfechacompra1.setToolTipText("");
        lbfechacompra1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lbfechacompra1.setVerifyInputWhenFocusTarget(false);
        getContentPane().add(lbfechacompra1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 273, 170, 10));

        jLabel2.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Usuario");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 70, -1));

        usuario.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        usuario.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(usuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 100, 230, 20));

        TablaEmpleado.setFont(new java.awt.Font("Georgia", 0, 18)); // NOI18N
        TablaEmpleado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Nombre Completo", "Tipo de Documento", "Documento", "G√©nero", "Fecha Nacimiento", "Cargo", "E-mail", "Sueldo", "Sucursal", "estado", "Usuario", "contrase√±a"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TablaEmpleado.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        TablaEmpleado.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        TablaEmpleado.setRowHeight(30);
        TablaEmpleado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaEmpleadoMouseClicked(evt);
            }
        });
        barraEmpleado.setViewportView(TablaEmpleado);

        getContentPane().add(barraEmpleado, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 500, 900, 160));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/componentes/Pantalla Empleados(6).png"))); // NOI18N
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 680));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    void anchoColumnas() {
        TableColumnModel anchoColumnas = TablaEmpleado.getColumnModel();
        anchoColumnas.getColumn(0).setPreferredWidth(50);
        anchoColumnas.getColumn(1).setPreferredWidth(150);
        anchoColumnas.getColumn(2).setPreferredWidth(150);
        anchoColumnas.getColumn(3).setPreferredWidth(150);
        anchoColumnas.getColumn(4).setPreferredWidth(150);
        anchoColumnas.getColumn(5).setPreferredWidth(150);
        anchoColumnas.getColumn(6).setPreferredWidth(150);
        anchoColumnas.getColumn(7).setPreferredWidth(150);
        anchoColumnas.getColumn(8).setPreferredWidth(150);
    }

    public boolean verificarDatosExistentes(String campo, String columna, String tabla, String mensaje) {
        String verificar = "Verificar";
        Conexion cc = new Conexion();
        Connection cn = cc.getConexion();
        boolean resultado = true;
        String sql = " " + columna + " FROM " + tabla + " WHERE " + columna + " = '" + campo + "'";

        try {
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);

            if (rs.next()) {
                if (rs.getString(columna).equals(campo)) {
                    JOptionPane.showMessageDialog(null, mensaje, "Error", JOptionPane.ERROR_MESSAGE);
                    resultado = false;
                }
            }
        } catch (Exception e) {
            lo.LogBitacora("Error: No se pudo verificar datos existentes" + "Excepci√≥n: " + e + ". Origen: " + this.getClass().getSimpleName(), empleados, verificar);
            JOptionPane.showMessageDialog(null, "No se pudo verificar\n" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        return resultado;
    }


    private void txtDocumentoEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDocumentoEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDocumentoEActionPerformed

    private void ComboDocumentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboDocumentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboDocumentoActionPerformed

    private void txtBuscarEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscarEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBuscarEActionPerformed

    private void txtNombreEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreEActionPerformed

    private void ComboSucursalEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboSucursalEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboSucursalEActionPerformed

    private void botonRegresarEMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonRegresarEMouseClicked
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuPrincipal().setVisible(true);
            }
        });
        this.dispose();

    }//GEN-LAST:event_botonRegresarEMouseClicked

    Encode encode = new Encode();
    String secretKey = "farmaciaSAG";
    private void BotonGuardarEMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonGuardarEMouseClicked
        String Guardar = "BtnGuardar";
        ObtenerIdS();
        if (txtNombreE.getText().equals("Ingrese Nombre y Apellido")) {
            JOptionPane.showMessageDialog(null, "NIngrese Nombre y Apellido");
        } else if (ComboDocumento.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Seleccione Tipo de Documento");
        } else if (txtDocumentoE.getText().equals("Ingrese N√∫mero de Documento")) {
            JOptionPane.showMessageDialog(null, "Ingrese Documento");
        } else if (ComboGeneroE.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Seleccione Genero");
        } else if (ComboCargoE.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Seleccione Cargo");
        } else if (txtEmail.getText().equals("Email")) {
            JOptionPane.showMessageDialog(null, "Ingrese Email");
        } else if (txtSueldoE.getText().equals("Sueldo")) {
            JOptionPane.showMessageDialog(null, "Ingrese Sueldo");
        } else if (txtUsuarioE.getText().equals("Usuario")) {
            JOptionPane.showMessageDialog(null, "Ingrese Usuario");
        } else if (ComboSucursalE.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Seleccione Sucursal");
        } else if (txtCotrasenaE.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Ingrese Contrase√±a");
        } else {
            String Nombre = txtNombreE.getText();
            int tpDoc = ComboDocumento.getSelectedIndex();
            String Documento = txtDocumentoE.getText();
            int Genero = ComboGeneroE.getSelectedIndex();
            int Sucursal = Integer.parseInt(txtIdS.getText());
            int cargo = ComboCargoE.getSelectedIndex();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String FechaF = sdf.format(txtFechaNac.getDate());
            String sueldo = txtSueldoE.getText();
            String contrase√±a = txtCotrasenaE.getText();
            String usuario = txtUsuarioE.getText();
            String email = txtEmail.getText();

            try {
                Connection con = Conexion.getConexion();
                PreparedStatement ps = con.prepareStatement("Insert into Empleados NombreE, Id_Tipo_Documento, Documento, Id_Genero, FechaNac, [E-mail], Id_Cargo, Id_Sucursal, Sueldo, Id_Estado, Contrasena, Usuario,Intentos) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)");
                ps.setString(1, Nombre);
                ps.setInt(2, tpDoc);
                ps.setString(3, Documento);
                ps.setInt(4, Genero);
                ps.setString(5, FechaF);
                ps.setString(6, email);
                ps.setInt(7, cargo);
                ps.setInt(8, Sucursal);
                ps.setString(9, sueldo);
                ps.setInt(10, 1);
                ps.setString(11, encode.ecnode(secretKey, contrase√±a));
                ps.setString(12, usuario);
                ps.setInt(13, 3);
                ps.executeUpdate();

                JOptionPane.showMessageDialog(null, "Registro guardado");
                cargartabla();
                Limpiar();
                Inhabillitar();

            } catch (SQLException ex) {
                lo.LogBitacora("Error: No se pudo guardar datos" + "Excepci√≥n: " + ex + ". Origen: " + this.getClass().getSimpleName(), empleados, Guardar);

                JOptionPane.showMessageDialog(null, ex.toString());
            }

        }
    }//GEN-LAST:event_BotonGuardarEMouseClicked

    private void BotonEditarEMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonEditarEMouseClicked
        String Editar = "BtnEditar";
        ObtenerIdS();
        if (txtNombreE.getText().equals("Ingrese Nombre y Apellido") || txtDocumentoE.getText().equals("Ingrese N√∫mero de Documento") || ComboSucursalE.equals("Seleccione Sucursal...") || ComboDocumento.equals("Seleccione Tipo Documento...") || ComboGeneroE.equals("Seleccione Genero...")) {
            JOptionPane.showMessageDialog(null, "No se puede Guardar datos vacios");
        } else {
            String Nombre = txtNombreE.getText();
            int tpDoc = ComboDocumento.getSelectedIndex();
            String Documento = txtDocumentoE.getText();
            int Genero = ComboGeneroE.getSelectedIndex();
            int Sucursal = Integer.parseInt(txtIdS.getText());
            int cargo = ComboCargoE.getSelectedIndex();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String FechaF = sdf.format(txtFechaNac.getDate());
            String sueldo = txtSueldoE.getText();
            String contrase√±a = txtCotrasenaE.getText();
            String usuario = txtUsuarioE.getText();
            String email = txtEmail.getText();

            try {
                Connection con = Conexion.getConexion();
                PreparedStatement ps = con.prepareStatement("Update Empleados set NombreE=?, Id_Genero=?,Documento=?,Id_Sucursal=?,Id_Tipo_Documento=?, Id_Cargo=?, Sueldo=?,FechaNac=?, Intentos=?,Contrasena=?,Usuario=?,[E-mail]=?  Where  Id_Empleado=?");
                ps.setString(1, Nombre);
                ps.setInt(2, Genero);
                ps.setString(3, Documento);
                ps.setInt(4, Sucursal);
                ps.setInt(5, tpDoc);
                ps.setInt(6, cargo);
                ps.setString(7, sueldo);
                ps.setString(8, FechaF);
                ps.setString(10, encode.ecnode(secretKey, contrase√±a));
                ps.setString(11, usuario);
                ps.setInt(9, 3);
                ps.setString(12, email);
                ps.setInt(13, Integer.parseInt(txtIdE.getText()));
                ps.executeUpdate();
                JOptionPane.showMessageDialog(null, "Registro Actualizado");
                cargartabla();
                BotonActivoE.setVisible(Boolean.FALSE);
                BotonInactivoE.setVisible(Boolean.FALSE);
                Limpiar();
                Inhabillitar();

            } catch (SQLException ex) {
              lo.LogBitacora("Error: No se pudo editar datos " + "Excepci√≥n: " + ex + ". Origen: " + this.getClass().getSimpleName(),empleados,Editar);

                JOptionPane.showMessageDialog(null, ex.toString());
            }

        }
    }//GEN-LAST:event_BotonEditarEMouseClicked

    private void txtNombreEFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNombreEFocusLost
        if (txtNombreE.getText().equals("")) {
            txtNombreE.setText("Ingrese Nombre y Apellido");
            txtNombreE.setForeground(new Color(153, 153, 153));
        } else if (!txtNombreE.getText().isEmpty()) {
            if (!txtNombreE.getText().matches("^[A-Z-√Å√â√ç√ì√ö√ë]{1}[a-z-√°√©√≠√≥√∫√±]+$")) {
                JOptionPane.showMessageDialog(null, "Debes escribir un nombre comenzando en may√∫scula.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_txtNombreEFocusLost

    private void txtNombreEKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreEKeyTyped
        if (txtNombreE.getText().length() > 20) {
            JOptionPane.showMessageDialog(null, " El m√°ximo es de 20 caracteres para este campo", "Advertencia", JOptionPane.WARNING_MESSAGE);
            evt.consume();
        } else if (txtNombreE.getText().length() > 0) {
            if (!txtNombreE.getText().matches("^(?!.*([A-Za-z√±√ë√°√©√≠√≥√∫√Å√â√ç√ì√ö\\s])\\1{2})[A-Za-z√±√ë√°√©√≠√≥√∫√Å√â√ç√ì√ö\\s]+$")) {
                JOptionPane.showMessageDialog(null, "No repitas caracteres de forma incorrecta", "Error", JOptionPane.ERROR_MESSAGE);
                evt.consume();
            }
        }
    }//GEN-LAST:event_txtNombreEKeyTyped

    public void validarNumerosLetras(java.awt.event.KeyEvent e) {
        if (e.getKeyChar() >= 33 && e.getKeyChar() <= 47
                || e.getKeyChar() >= 58 && e.getKeyChar() <= 64
                || e.getKeyChar() >= 91 && e.getKeyChar() <= 96
                || e.getKeyChar() >= 123 && e.getKeyChar() <= 129
                || e.getKeyChar() >= 145 && e.getKeyChar() <= 159
                || e.getKeyChar() >= 164 && e.getKeyChar() <= 238) {

            e.consume();
            JOptionPane.showMessageDialog(null, "Este campo no acepta caracteres especiales", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void txtBuscarEKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarEKeyTyped
        buscarData(txtBuscarE.getText());
        validarNumerosLetras(evt);
        if (txtBuscarE.getText().length() > 15) {
            JOptionPane.showMessageDialog(null, "   El m√°ximo es de 15 caracteres para este campo", "Advertencia", JOptionPane.WARNING_MESSAGE);
            evt.consume();
        } else if (txtBuscarE.getText().length() > 0) {
            if (!txtBuscarE.getText().matches("^(?!.*([A-Za-z√±√ë√°√©√≠√≥√∫√Å√â√ç√ì√ö\\s])\\1{2})[A-Za-z√±√ë√°√©√≠√≥√∫√Å√â√ç√ì√ö\\s0-9]+$")) {
                JOptionPane.showMessageDialog(null, "No repitas caracteres de forma incorrecta", "Error", JOptionPane.ERROR_MESSAGE);
                evt.consume();
            }
        }
    }//GEN-LAST:event_txtBuscarEKeyTyped

    private void txtDocumentoEKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDocumentoEKeyTyped
        if (ComboDocumento.getSelectedIndex() == 1) {
            validarNumerosLetras(evt);
            char validar = evt.getKeyChar();
            if (Character.isLetter(validar)) {
                getToolkit().beep();
                evt.consume();
                JOptionPane.showMessageDialog(null, "Este tipo de documento solo contiene n√∫meros", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (txtDocumentoE.getText().length() > 12) {
                evt.consume();
            }
        }
        if (ComboDocumento.getSelectedIndex() == 3) {
            if (txtDocumentoE.getText().length() > 6) {
                evt.consume();
            }
        }
        if (ComboDocumento.getSelectedIndex() == 2) {
            validarNumerosLetras(evt);
            char validar = evt.getKeyChar();
            if (Character.isLetter(validar)) {
                getToolkit().beep();
                evt.consume();
                JOptionPane.showMessageDialog(null, "Este tipo de documento solo contiene n√∫meros", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (txtDocumentoE.getText().length() > 13) {
                evt.consume();
                JOptionPane.showMessageDialog(null, "El n√∫mero de RTN debe tener 14 caracteres", "Advertencia", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_txtDocumentoEKeyTyped

    void buscarData(String valor) {
        String Buscar="BuscarDatos";
        String[] titulos = {"ID", "Nombre Completo", "Tipo Documento", "Documento", "Genero", "Fecha Nacimiento", "Correo", "Cargo", "Sucursal", "Sueldo", "Estado", "Contrase√±a", "Usuario", "Intentos"};
        String[] registros = new String[14];
        String sql = "Select E.Id_Empleado, E.NombreE, TD.TDocumento, E.Documento , G.Genero, E.FechaNac,C.Cargo, E.[E-mail],E.Sueldo,  S.Nombre,  ES.Estado, E.Usuario, E.Contrasena \n"
                + "From Empleados as E\n"
                + "INNER JOIN Tipo_Documento AS TD ON E.Id_Tipo_Documento = TD.Id_Documento\n"
                + "INNER JOIN Genero AS G ON E.Id_Genero = G.Id_Genero\n"
                + "INNER JOIN Sucursal AS S ON E.Id_Sucursal = S.Id_Sucursal\n"
                + "INNER JOIN Cargo AS C ON E.Id_Cargo = C.Id_Cargo\n"
                + "INNER JOIN Estado AS ES ON E.Id_Estado = ES.Id_Estado\n"
                + "WHERE CONCAT (E.Id_Empleado, ' ', E.NombreE, ' ', E.Documento) LIKE '% " + valor + " %'\n"
                + "ORDER BY E.Id_Empleado";

        DefaultTableModel model = new DefaultTableModel(null, titulos);
        Connection con = Conexion.getConexion();

        try {

            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);

            while (rs.next()) {
                registros[0] = rs.getString("Id_Empleado");
                registros[1] = rs.getString("NombreE");
                registros[2] = rs.getString("TDocumento");
                registros[3] = rs.getString("Documento");
                registros[4] = rs.getString("Genero");
                registros[5] = rs.getString("FechaNac");
                registros[7] = rs.getString("[E-mail]");
                registros[6] = rs.getString("Cargo");
                registros[9] = rs.getString("Nombre");
                registros[8] = rs.getString("Sueldo");
                registros[10] = rs.getString("Estado");
                registros[11] = rs.getString("Contrasena");
                registros[12] = rs.getString("Usuario");
                //registros[13] = rs.getString("Intentos");
                model.addRow(registros);
            }

            TablaEmpleado.setModel(model);
            // anchoColumnas();
        } catch (SQLException ex) {
           lo.LogBitacora("Error: No se pudo buscar el registro " + "Excepci√≥n: " + ex + ". Origen: " + this.getClass().getSimpleName(), empleados,Buscar);

            Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
        }
    }


    private void TablaEmpleadoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaEmpleadoMouseClicked
        String Tabla="Tabla Empleados";
        try {
            int fila = TablaEmpleado.getSelectedRow();
            int id = Integer.parseInt(TablaEmpleado.getValueAt(fila, 0).toString());
            PreparedStatement ps;
            ResultSet rs;
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("Select E.NombreE, TD.TDocumento,E.Documento,E.FechaNac,G.Genero, S.Nombre,C.Cargo,E.Sueldo, ES.Estado\n"
                    + "From Empleados as E\n"
                    + "INNER JOIN Tipo_Documento AS TD ON E.Id_Tipo_Documento = TD.Id_Documento\n"
                    + "INNER JOIN Genero AS G ON E.Id_Genero = G.Id_Genero\n"
                    + "INNER JOIN Sucursal AS S ON E.Id_Sucursal = S.Id_Sucursal\n"
                    + "INNER JOIN Estado AS ES ON E.Id_Estado = ES.Id_Estado\n"
                    + "INNER JOIN Cargo AS C ON E.Id_Cargo = C.Id_Cargo\n"
                    + "where E.Id_Empleado=?\n"
                    + "Order By E.Id_Empleado");
            ps.setInt(1, id);
            rs = ps.executeQuery();

            while (rs.next()) {
                txtIdE.setText(String.valueOf(id));
                txtNombreE.setText(rs.getString("NombreE"));
                ComboDocumento.setSelectedItem(rs.getString("TDocumento"));
                txtDocumentoE.setText(rs.getString("Documento"));
                ComboGeneroE.setSelectedItem(rs.getString("Genero"));
                ComboSucursalE.setSelectedItem(rs.getString("Nombre"));
                ComboCargoE.setSelectedItem(rs.getString("Cargo"));
                txtSueldoE.setText(rs.getString("Sueldo"));
                txtFechaNac.setDate(rs.getDate("FechaNac"));

                if (rs.getString("Estado").equals("Activo")) {
                    BotonActivoE.setSelected(true);
                } else if (rs.getString("Estado").equals("Inactivo")) {
                    BotonInactivoE.setSelected(true);
                }
            }

            BotonActivoE.setVisible(Boolean.TRUE);
            BotonInactivoE.setVisible(Boolean.TRUE);
            Id_emp = txtIdE.getText();
            Habillitar();
        } catch (SQLException ex) {
            lo.LogBitacora("Error: No se pudo cargar tabla " + "Excepci√≥n: " + ex + ". Origen: " + this.getClass().getSimpleName(), empleados,Tabla);

            JOptionPane.showMessageDialog(null, ex.toString());
        }

    }//GEN-LAST:event_TablaEmpleadoMouseClicked

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel1MouseClicked

    private void BotonAgregarEMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonAgregarEMouseClicked
        // TODO add your handling code here:
        Habillitar();
    }//GEN-LAST:event_BotonAgregarEMouseClicked

    private void BotonCancelarEMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonCancelarEMouseClicked
        Limpiar();
        Inhabillitar();
    }//GEN-LAST:event_BotonCancelarEMouseClicked

    private void txtNombreEFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNombreEFocusGained
        if (txtNombreE.getText().equals("Ingrese Nombre y Apellido")) {
            txtNombreE.setText("");
            txtNombreE.setForeground(new Color(0, 0, 0));
        }

    }//GEN-LAST:event_txtNombreEFocusGained

    private void txtDocumentoEFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDocumentoEFocusGained
        if (txtDocumentoE.getText().equals("Ingrese N√∫mero de Documento")) {
            txtDocumentoE.setText("");
            txtDocumentoE.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtDocumentoEFocusGained

    private void txtDocumentoEFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDocumentoEFocusLost
        if (txtDocumentoE.getText().equals("")) {
            txtDocumentoE.setText("Ingrese N√∫mero de Documento");
            txtDocumentoE.setForeground(new Color(153, 153, 153));
        }
        if (!txtDocumentoE.getText().matches("(^[0]{1}[0-9]{13}$)|(^[1]{1}[0-9]{13}$)")) {
            JOptionPane.showMessageDialog(null, "El n√∫mero de RTN debe comenzar en 0 o en 1", "Advertencia", JOptionPane.WARNING_MESSAGE);
            txtDocumentoE.setText("");
            if (txtDocumentoE.getText().equals("")) {
                txtDocumentoE.setText("Ingrese N√∫mero de Documento");
                txtDocumentoE.setForeground(new Color(153, 153, 153));
            }

        }
    }//GEN-LAST:event_txtDocumentoEFocusLost

    private void txtBuscarEFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBuscarEFocusGained
        if (txtBuscarE.getText().equals("Buscar por ID o por Nombre")) {
            txtBuscarE.setText("");
            txtBuscarE.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtBuscarEFocusGained

    private void txtBuscarEFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBuscarEFocusLost
        if (txtBuscarE.getText().equals("")) {
            txtBuscarE.setText("Buscar por ID o por Nombre");
            txtBuscarE.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtBuscarEFocusLost

    private void BotonCargoHistoricoEMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonCargoHistoricoEMouseClicked
        CargoHistorico CH = new CargoHistorico();
        {
            CH.setVisible(true);
            dispose();
        }
    }//GEN-LAST:event_BotonCargoHistoricoEMouseClicked

    private void BotonSueldoHistoricoEMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonSueldoHistoricoEMouseClicked
        SueldoHistorico SH = new SueldoHistorico();
        {
            SH.setVisible(true);
            dispose();
        }

    }//GEN-LAST:event_BotonSueldoHistoricoEMouseClicked

    private void BotonInactivoEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonInactivoEActionPerformed
        String Inactivo ="Inactivo";
        int IdEmpleado = Integer.parseInt(txtIdE.getText());

        try {
            Connection con = Conexion.getConexion();
            PreparedStatement ps = con.prepareStatement("Update Empleados set Id_Estado=? Where Id_Empleado=?");
            ps.setInt(1, 2);
            ps.setInt(2, IdEmpleado);
            ps.executeUpdate();
            JOptionPane.showMessageDialog(null, "Registro Inhabilitado");
            cargartabla();
            BotonActivoE.setVisible(Boolean.FALSE);
            BotonInactivoE.setVisible(Boolean.FALSE);
            Limpiar();
            Inhabillitar();

        } catch (SQLException ex) {
           lo.LogBitacora("Error: No se pudo actualizar el estado " + "Excepci√≥n: " + ex + ". Origen: " + this.getClass().getSimpleName(), empleados,Inactivo);

            JOptionPane.showMessageDialog(null, ex.toString());
        }

    }//GEN-LAST:event_BotonInactivoEActionPerformed

    private void BotonActivoEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonActivoEActionPerformed
        String activo="Activo";
        int IdEmpleado = Integer.parseInt(txtIdE.getText());
        String Estado = "Activo";
        try {
            Connection con = Conexion.getConexion();
            PreparedStatement ps = con.prepareStatement("Update Empleados set Id_Estado=? Where Id_Empleado=?");
            ps.setInt(1, 1);
            ps.setInt(2, IdEmpleado);
            ps.executeUpdate();
            JOptionPane.showMessageDialog(null, "Registro Habilitado");
            cargartabla();
            BotonActivoE.setVisible(Boolean.FALSE);
            BotonInactivoE.setVisible(Boolean.FALSE);
            Limpiar();
            Inhabillitar();

        } catch (SQLException ex) {
        lo.LogBitacora("Error: No se pudo actualizar el estado " + "Excepci√≥n: " + ex + ". Origen: " + this.getClass().getSimpleName(), empleados,activo);

            JOptionPane.showMessageDialog(null, ex.toString());
        }
    }//GEN-LAST:event_BotonActivoEActionPerformed

    private void ComboGeneroEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboGeneroEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboGeneroEActionPerformed

    private void txtSueldoEFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSueldoEFocusGained
        if (txtSueldoE.getText().equals("Sueldo")) {
            txtSueldoE.setText("");
            txtSueldoE.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtSueldoEFocusGained

    private void txtSueldoEFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSueldoEFocusLost
        if (txtSueldoE.getText().equals("")) {
            txtSueldoE.setText("Sueldo");
            txtSueldoE.setForeground(new Color(153, 153, 153));
        } else if (txtSueldoE.getText().length() > 8) {
            JOptionPane.showMessageDialog(null, " El m√°ximo es de 8 caracteres para este campo", "Advertencia", JOptionPane.WARNING_MESSAGE);
        } else if (txtSueldoE.getText().length() < 4) {
            JOptionPane.showMessageDialog(null, " El minimo es de 4 caracteres para este campo", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_txtSueldoEFocusLost

    private void BotonActivoEMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonActivoEMouseClicked
        String BActivo= "btnActivo";
        int IdEmpleado = Integer.parseInt(txtIdE.getText());
        try {
            Connection con = Conexion.getConexion();
            PreparedStatement ps = con.prepareStatement("Update Empleados set Id_Estado=? Where Id_Empleado=?");
            ps.setInt(1, 1);
            ps.setInt(2, IdEmpleado);
            ps.executeUpdate();
            JOptionPane.showMessageDialog(null, "Registro Habilitado");
            cargartabla();
            BotonActivoE.setVisible(Boolean.FALSE);
            BotonInactivoE.setVisible(Boolean.FALSE);
            Limpiar();
            Inhabillitar();

        } catch (SQLException ex) {
          lo.LogBitacora("Error: No se pudo actualizar el estado " + "Excepci√≥n: " + ex + ". Origen: " + this.getClass().getSimpleName(), empleados,BActivo);

            JOptionPane.showMessageDialog(null, ex.toString());
        }
    }//GEN-LAST:event_BotonActivoEMouseClicked

    private void BotonActivoEMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonActivoEMousePressed
        String Activo ="BtnActivo";
        int IdEmpleado = Integer.parseInt(txtIdE.getText());
        try {
            Connection con = Conexion.getConexion();
            PreparedStatement ps = con.prepareStatement("Update Empleados set Id_Estado=? Where Id_Empleado=?");
            ps.setInt(1, 1);
            ps.setInt(2, IdEmpleado);
            ps.executeUpdate();
            JOptionPane.showMessageDialog(null, "Registro Habilitado");
            cargartabla();
            BotonActivoE.setVisible(Boolean.FALSE);
            BotonInactivoE.setVisible(Boolean.FALSE);
            Limpiar();
            Inhabillitar();

        } catch (SQLException ex) {
       lo.LogBitacora("Error: No se pudo actualizar el estado " + "Excepci√≥n: " + ex + ". Origen: " + this.getClass().getSimpleName(), empleados,Activo);

            JOptionPane.showMessageDialog(null, ex.toString());
        }
    }//GEN-LAST:event_BotonActivoEMousePressed

    private void txtNombreEMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtNombreEMousePressed
        if (txtNombreE.isEnabled() == false) {

            JOptionPane.showMessageDialog(null, "Dar Click en Agregar o Editar para utilizar el campo", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_txtNombreEMousePressed

    private void txtDocumentoEMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtDocumentoEMousePressed
        if (txtDocumentoE.isEnabled() == false) {

            JOptionPane.showMessageDialog(null, "Dar Click en Agregar o Editar para utilizar el campo", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_txtDocumentoEMousePressed

    private void txtSueldoEMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtSueldoEMousePressed
        if (txtSueldoE.isEnabled() == false) {

            JOptionPane.showMessageDialog(null, "Dar Click en Agregar o Editar para utilizar el campo", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_txtSueldoEMousePressed

    private void txtFechaNacMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtFechaNacMousePressed
        if (txtFechaNac.isEnabled() == false) {

            JOptionPane.showMessageDialog(null, "Dar Click en Agregar o Editar para utilizar el campo", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_txtFechaNacMousePressed

    private void ComboDocumentoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ComboDocumentoMousePressed
        if (ComboDocumento.isEnabled() == false) {

            JOptionPane.showMessageDialog(null, "Dar Click en Agregar o Editar para utilizar el campo", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_ComboDocumentoMousePressed

    private void ComboSucursalEMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ComboSucursalEMousePressed
        if (ComboSucursalE.isEnabled() == false) {

            JOptionPane.showMessageDialog(null, "Dar Click en Agregar o Editar para utilizar el campo", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_ComboSucursalEMousePressed

    private void validarNumeros(KeyEvent e) {
        if (e.getKeyChar() >= 33 && e.getKeyChar() <= 47
                || e.getKeyChar() >= 58 && e.getKeyChar() <= 238) {
            e.consume();
            JOptionPane.showMessageDialog(null, "Este campo solo admite n√∫meros", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void txtSueldoEKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSueldoEKeyTyped
        validarNumeros(evt);
        if (txtSueldoE.getText().length() > 7) {
            evt.consume();

        }


    }//GEN-LAST:event_txtSueldoEKeyTyped

    private void ComboCargoEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboCargoEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboCargoEActionPerformed

    private void txtUsuarioEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUsuarioEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUsuarioEActionPerformed

    private void txtEmailFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEmailFocusGained
        if (txtEmail.getText().equals("Email")) {
            txtEmail.setText("");
            txtEmail.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtEmailFocusGained

    private void txtEmailFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEmailFocusLost
        if (txtEmail.getText().equals("")) {
            txtEmail.setText("Email");
            txtEmail.setForeground(new Color(153, 153, 153));
        } else if (!txtEmail.getText().matches("^(.+[@]{1}[a-z]+[.]{1}[a-z]+)$|^(.+[@]{1}[a-z]+[.]{1}[a-z]+[.]{1}[a-z]+)$")) {
            JOptionPane.showMessageDialog(null, "Debe escribir un correo v√°lido ¬¥\nEjemplo: farmaciasag@gmail.com", "Advertencia", JOptionPane.WARNING_MESSAGE);
        } else {

            verificarDatosExistentes(txtEmail.getText(), "E-mail", "Empleados", "No puedes utilizar el E-mail de otro Empleado");
        }

    }//GEN-LAST:event_txtEmailFocusLost

    private void txtEmailMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtEmailMousePressed
        if (txtEmail.isEnabled() == false) {

            JOptionPane.showMessageDialog(null, "Dar Click en Agregar o Editar para utilizar el campo", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_txtEmailMousePressed

    private void txtUsuarioEFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUsuarioEFocusGained
        if (txtUsuarioE.getText().equals("Usuario")) {
            txtUsuarioE.setText("");
            txtUsuarioE.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtUsuarioEFocusGained

    private void txtUsuarioEFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUsuarioEFocusLost
        if (txtUsuarioE.getText().equals("")) {
            txtUsuarioE.setText("Usuario");
            txtUsuarioE.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtUsuarioEFocusLost

    private void txtCotrasenaEFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCotrasenaEFocusGained
        if (txtCotrasenaE.getText().equals("")) {
            txtCotrasenaE.setText("Usuario");
            txtCotrasenaE.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtCotrasenaEFocusGained

    private void reporteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reporteMouseClicked
        JasperReport reporte;
        HashMap hm = new HashMap();
        hm.put("Usuario", usuario.getText());
        try {
            Connection con = Conexion.getConexion();
            reporte = JasperCompileManager.compileReport("src/Reportes/ReporteEmpleado.jrxml");
            JasperPrint jp = JasperFillManager.fillReport(reporte, hm, con);
            JasperViewer.viewReport(jp, true);
            ReportView view = new ReportView(jp, false);
            view.setVisible(true);
        } catch (JRException ex) {
            Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_reporteMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Empleados1.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Empleados1.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Empleados1.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Empleados1.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Empleados1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton BotonActivoE;
    private javax.swing.JLabel BotonAgregarE;
    private javax.swing.JLabel BotonCancelarE;
    private javax.swing.JLabel BotonCargoHistoricoE;
    private javax.swing.JLabel BotonEditarE;
    private javax.swing.JLabel BotonGuardarE;
    private javax.swing.JRadioButton BotonInactivoE;
    private javax.swing.JLabel BotonSueldoHistoricoE;
    private javax.swing.JComboBox<String> ComboCargoE;
    private javax.swing.JComboBox<String> ComboDocumento;
    private javax.swing.JComboBox<String> ComboGeneroE;
    private javax.swing.JComboBox<String> ComboSucursalE;
    private javax.swing.JTable TablaEmpleado;
    private javax.swing.JScrollPane barraEmpleado;
    private javax.swing.JLabel botonRegresarE;
    private javax.swing.ButtonGroup grupoBotonesEmpleados;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lbfechacompra;
    private javax.swing.JLabel lbfechacompra1;
    private javax.swing.JLabel reporte;
    private javax.swing.JTextField txtBuscarE;
    private javax.swing.JPasswordField txtCotrasenaE;
    private javax.swing.JTextField txtDocumentoE;
    private javax.swing.JTextField txtEmail;
    private com.toedter.calendar.JDateChooser txtFechaNac;
    private javax.swing.JLabel txtIdE;
    private javax.swing.JLabel txtIdS;
    private javax.swing.JTextField txtNombreE;
    private javax.swing.JTextField txtSueldoE;
    private javax.swing.JTextField txtUsuarioE;
    private javax.swing.JLabel usuario;
    // End of variables declaration//GEN-END:variables

    private void cargartabla() {
        String Cargar="Cargar Tabla";
        DefaultTableModel modeloTabla = (DefaultTableModel) TablaEmpleado.getModel();
        modeloTabla.setRowCount(0);

        PreparedStatement ps;
        ResultSet rs;
        ResultSetMetaData rsmd;
        int columnas;

        try {
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("Select E.Id_Empleado, E.NombreE, TD.TDocumento, E.Documento , G.Genero, E.FechaNac,C.Cargo, E.[E-mail],E.Sueldo,  S.Nombre,  ES.Estado, E.Usuario, E.Contrasena \n"
                    + "From Empleados as E\n"
                    + "INNER JOIN Tipo_Documento AS TD ON E.Id_Tipo_Documento = TD.Id_Documento\n"
                    + "INNER JOIN Genero AS G ON E.Id_Genero = G.Id_Genero\n"
                    + "INNER JOIN Sucursal AS S ON E.Id_Sucursal = S.Id_Sucursal\n"
                    + "INNER JOIN Cargo AS C ON E.Id_Cargo = C.Id_Cargo\n"
                    + 
                    "INNER JOIN Estado AS ES ON E.Id_Estado = ES.Id_Estado\n"
                    + "ORDER BY E.Id_Empleado");
            rs = ps.executeQuery();
            rsmd = rs.getMetaData();
            columnas = rsmd.getColumnCount();

            while (rs.next()) {
                Object[] fila = new Object[columnas];
                for (int indice = 0; indice < columnas; indice++) {
                    fila[indice] = rs.getObject(indice + 1);
                }
                modeloTabla.addRow(fila);
            }

        } catch (SQLException ex) {
            lo.LogBitacora("Error: No se pudo cargar la tabla " + "Excepci√≥n: " + ex + ". Origen: " + this.getClass().getSimpleName(), empleados,Cargar);

            JOptionPane.showMessageDialog(null, ex.toString());
        }
    }

    private void Habillitar() {

        txtDocumentoE.enable(Boolean.TRUE);
        txtNombreE.enable(Boolean.TRUE);
        ComboDocumento.enable(Boolean.TRUE);
        ComboGeneroE.enable(Boolean.TRUE);
        ComboSucursalE.enable(Boolean.TRUE);
        ComboCargoE.enable(Boolean.TRUE);
        txtSueldoE.enable(Boolean.TRUE);
        txtFechaNac.setEnabled(Boolean.TRUE);
        txtUsuarioE.enable(Boolean.TRUE);
        txtEmail.enable(Boolean.TRUE);
        txtCotrasenaE.enable(Boolean.TRUE);
    }

    private void Inhabillitar() {

        txtDocumentoE.enable(Boolean.FALSE);
        txtNombreE.enable(Boolean.FALSE);
        ComboDocumento.enable(Boolean.FALSE);
        ComboGeneroE.enable(Boolean.FALSE);
        ComboSucursalE.enable(Boolean.FALSE);
        ComboCargoE.enable(Boolean.FALSE);
        txtSueldoE.enable(Boolean.FALSE);
        txtFechaNac.enable(Boolean.FALSE);
        txtUsuarioE.enable(Boolean.FALSE);
        txtEmail.enable(Boolean.FALSE);
        txtCotrasenaE.enable(Boolean.FALSE);
    }

    private void Limpiar() {
        txtCotrasenaE.setText("");
        txtDocumentoE.setText("");
        if (txtDocumentoE.getText().equals("")) {
            txtDocumentoE.setText("Ingrese N√∫mero de Documento");
            txtDocumentoE.setForeground(new Color(153, 153, 153));
        }
        txtNombreE.setText("");
        if (txtNombreE.getText().equals("")) {
            txtNombreE.setText("Ingrese Nombre y Apellido");
            txtNombreE.setForeground(new Color(153, 153, 153));
        }
        txtSueldoE.setText("");
        if (txtSueldoE.getText().equals("")) {
            txtSueldoE.setText("Sueldo");
            txtSueldoE.setForeground(new Color(153, 153, 153));
        }
        txtEmail.setText("");
        if (txtEmail.getText().equals("")) {
            txtEmail.setText("Email");
            txtEmail.setForeground(new Color(153, 153, 153));
        }
        txtUsuarioE.setText("");
        if (txtUsuarioE.getText().equals("")) {
            txtUsuarioE.setText("Usuario");
            txtUsuarioE.setForeground(new Color(153, 153, 153));
        }
        ComboGeneroE.setSelectedIndex(0);
        ComboDocumento.setSelectedIndex(0);
        ComboSucursalE.setSelectedIndex(0);
        ComboCargoE.setSelectedIndex(0);
        BotonActivoE.setVisible(Boolean.FALSE);
        BotonInactivoE.setVisible(Boolean.FALSE);

    }

    public class Cargarg {

        public DefaultComboBoxModel getvalues() {
        String Cargarg="Cargar Genero";
            DefaultComboBoxModel modelo = new DefaultComboBoxModel();
            try {
                Connection con = Conexion.getConexion();
                String sql = "select Genero from Genero";
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery(sql);
                modelo.addElement("Seleccione Genero...");
                while (rs.next()) {
                    modelo.addElement(rs.getString(1));
                }
                con.close();
                rs.close();
            } catch (Exception e) {
             lo.LogBitacora("Error: No se pudo cargar " + "Excepci√≥n: " + e + ". Origen: " + this.getClass().getSimpleName(),empleados,Cargarg);

                System.out.println(e);
            }
            return modelo;
        }
    }

    public class CargarSucursal {

        public DefaultComboBoxModel getvalues() {
             String CargarS="Cargar Sucursal";
            DefaultComboBoxModel modelo = new DefaultComboBoxModel();
            try {
                Connection con = Conexion.getConexion();
                String sql = "select Nombre from sucursal";
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery(sql);
                modelo.addElement("Seleccione Sucursal...");
                while (rs.next()) {
                    modelo.addElement(rs.getString(1));
                }
                con.close();
                rs.close();
            } catch (Exception e) {
           lo.LogBitacora("Error: No se pudo cargar sucursal " + "Excepci√≥n: " + e + ". Origen: " + this.getClass().getSimpleName(),empleados,CargarS);

                System.out.println(e);
            }
            return modelo;
        }
    }

    public class CargarCargo {

        public DefaultComboBoxModel getvalues() {
          String CargarC="Cargar Cargo";
            DefaultComboBoxModel modelo = new DefaultComboBoxModel();
            try {
                Connection con = Conexion.getConexion();
                String sql = "select Cargo from Cargo";
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery(sql);
                modelo.addElement("Seleccione Cargo...");
                while (rs.next()) {
                    modelo.addElement(rs.getString(1));
                }
                con.close();
                rs.close();
            } catch (Exception e) {
               lo.LogBitacora("Error: No se pudo cargar el cargo  " + "Excepci√≥n: " + e + ". Origen: " + this.getClass().getSimpleName(), empleados,CargarC);

                System.out.println(e);
            }
            return modelo;
        }
    }

    public class CargarTDocumento {

        public DefaultComboBoxModel getvalues() {
        String CargarD="CargarID";
            DefaultComboBoxModel modelo = new DefaultComboBoxModel();
            try {
                Connection con = Conexion.getConexion();
                String sql = "select Documento from Tipo_Documento";
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery(sql);
                modelo.addElement("Seleccione Tipo Documento...");
                while (rs.next()) {
                    modelo.addElement(rs.getString(1));
                }
                con.close();
                rs.close();
            } catch (Exception e) {
             lo.LogBitacora("Error: No se pudo cargar documento " + "Excepci√≥n: " + e + ". Origen: " + this.getClass().getSimpleName(), empleados,CargarD);

                System.out.println(e);
            }
            return modelo;
        }
    }

    public void ObtenerIdS() {
        String ObtenerID="OBTENER";
        String Nombre = ComboSucursalE.getSelectedItem().toString();
        try {
            ResultSet rs;
            Connection con = Conexion.getConexion();
            PreparedStatement ps = con.prepareStatement("Select Id_Sucursal From Sucursal Where Nombre=?");
            ps.setString(1, Nombre);
            rs = ps.executeQuery();

            while (rs.next()) {
                txtIdS.setText(rs.getString("Id_Sucursal"));
            }

        } catch (SQLException ex) {
            lo.LogBitacora("Error: No se pudo obtener ID " + "Excepci√≥n: " + ex + ". Origen: " + this.getClass().getSimpleName(), empleados,ObtenerID);

            JOptionPane.showMessageDialog(null, ex.toString());
        }
    }
}
