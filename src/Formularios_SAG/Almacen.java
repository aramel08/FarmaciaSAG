package Formularios_SAG;

import Conexion.Conexion;
import static Formularios_SAG.Proveedores.Id_Proveedor;
import Logs.log;
import Reportes.ReportView;
import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;
import org.bouncycastle.jcajce.provider.digest.GOST3411;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author carba
 */
public class Almacen extends javax.swing.JFrame {

    log lo = new log();
    String almacen = "Almacen";

    public static String Id_Almacen = "0";
    int agregari;
    int guardari;
    int editari;
    int cancelari;
    int reportesi;
    int activoi;
    int inactivoi;
    int anulari;
    int buscari;
    int crearcomprai;
    int historicoi;
    String userName;

    /**
     * Creates new form Almace
     */
    public Almacen() {
        initComponents();
        cargartabla();
        Inhabillitar();
        usuario.setText(Login.txtUsuario.getText());
        habilitarroles();
        
        userName = usuario.getText();
        
        txtIdAlmacen.setVisible(Boolean.FALSE);

    }

    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("componentes/LOGOSAG(2).png"));
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupAlmacen = new javax.swing.ButtonGroup();
        BotonActivoAl = new javax.swing.JRadioButton();
        BotonInactivoAl = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaAlmacen = new javax.swing.JTable();
        txtIdAlmacen = new javax.swing.JLabel();
        botonRegresarAL = new javax.swing.JLabel();
        botonAgregarAL = new javax.swing.JLabel();
        botonEditarAL = new javax.swing.JLabel();
        botonGuardarAL = new javax.swing.JLabel();
        botonCancelarAL = new javax.swing.JLabel();
        txtUbicacion = new javax.swing.JTextField();
        txtCapMaxima = new javax.swing.JTextField();
        txtCapMin = new javax.swing.JTextField();
        txtCapOpt = new javax.swing.JTextField();
        txtCapActual = new javax.swing.JTextField();
        reporte = new javax.swing.JLabel();
        txtEstante = new javax.swing.JTextField();
        botonDetalleAlmacen = new javax.swing.JLabel();
        usuario = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtBuscarAl = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(getIconImage());
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        buttonGroupAlmacen.add(BotonActivoAl);
        BotonActivoAl.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        BotonActivoAl.setForeground(new java.awt.Color(255, 255, 255));
        BotonActivoAl.setText("Activo");
        BotonActivoAl.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BotonActivoAl.setOpaque(false);
        BotonActivoAl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonActivoAlActionPerformed(evt);
            }
        });
        getContentPane().add(BotonActivoAl, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 290, -1, -1));

        buttonGroupAlmacen.add(BotonInactivoAl);
        BotonInactivoAl.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        BotonInactivoAl.setForeground(new java.awt.Color(255, 255, 255));
        BotonInactivoAl.setText("Inactivo");
        BotonInactivoAl.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BotonInactivoAl.setOpaque(false);
        BotonInactivoAl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonInactivoAlActionPerformed(evt);
            }
        });
        getContentPane().add(BotonInactivoAl, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 290, -1, -1));

        TablaAlmacen.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        TablaAlmacen.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Ubicación", "Cap.Máxima", "Cap.Míinima", "Cap.Optima", "Cap.Actual", "Estante", "Estado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TablaAlmacen.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        TablaAlmacen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaAlmacenMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TablaAlmacen);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 340, 670, 260));
        getContentPane().add(txtIdAlmacen, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 210, 50, 20));

        botonRegresarAL.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonRegresarAL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonRegresarALMouseClicked(evt);
            }
        });
        getContentPane().add(botonRegresarAL, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 130, 40));

        botonAgregarAL.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonAgregarAL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonAgregarALMouseClicked(evt);
            }
        });
        getContentPane().add(botonAgregarAL, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 150, 130, 40));

        botonEditarAL.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonEditarAL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonEditarALMouseClicked(evt);
            }
        });
        getContentPane().add(botonEditarAL, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 150, 130, 40));

        botonGuardarAL.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonGuardarAL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonGuardarALMouseClicked(evt);
            }
        });
        getContentPane().add(botonGuardarAL, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 150, 120, 30));

        botonCancelarAL.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonCancelarAL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonCancelarALMouseClicked(evt);
            }
        });
        getContentPane().add(botonCancelarAL, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 150, 130, 40));

        txtUbicacion.setBackground(new java.awt.Color(240, 240, 240));
        txtUbicacion.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        txtUbicacion.setForeground(new java.awt.Color(153, 153, 153));
        txtUbicacion.setText("Ingrese Ubicación");
        txtUbicacion.setBorder(null);
        txtUbicacion.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        txtUbicacion.setOpaque(false);
        txtUbicacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtUbicacionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtUbicacionFocusLost(evt);
            }
        });
        txtUbicacion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtUbicacionMousePressed(evt);
            }
        });
        txtUbicacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUbicacionActionPerformed(evt);
            }
        });
        txtUbicacion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUbicacionKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtUbicacionKeyTyped(evt);
            }
        });
        getContentPane().add(txtUbicacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 330, 170, 28));

        txtCapMaxima.setBackground(new java.awt.Color(240, 240, 240));
        txtCapMaxima.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        txtCapMaxima.setForeground(new java.awt.Color(153, 153, 153));
        txtCapMaxima.setText("Ingrese Capacidad Máxima");
        txtCapMaxima.setBorder(null);
        txtCapMaxima.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        txtCapMaxima.setOpaque(false);
        txtCapMaxima.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCapMaximaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCapMaximaFocusLost(evt);
            }
        });
        txtCapMaxima.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtCapMaximaMousePressed(evt);
            }
        });
        txtCapMaxima.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCapMaximaActionPerformed(evt);
            }
        });
        txtCapMaxima.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCapMaximaKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCapMaximaKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCapMaximaKeyTyped(evt);
            }
        });
        getContentPane().add(txtCapMaxima, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 375, 170, 26));

        txtCapMin.setBackground(new java.awt.Color(240, 240, 240));
        txtCapMin.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        txtCapMin.setForeground(new java.awt.Color(153, 153, 153));
        txtCapMin.setText("Ingrese Capacidad Mínima");
        txtCapMin.setBorder(null);
        txtCapMin.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        txtCapMin.setOpaque(false);
        txtCapMin.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCapMinFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCapMinFocusLost(evt);
            }
        });
        txtCapMin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtCapMinMousePressed(evt);
            }
        });
        txtCapMin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCapMinKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCapMinKeyTyped(evt);
            }
        });
        getContentPane().add(txtCapMin, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 420, 170, 26));

        txtCapOpt.setBackground(new java.awt.Color(240, 240, 240));
        txtCapOpt.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        txtCapOpt.setForeground(new java.awt.Color(153, 153, 153));
        txtCapOpt.setText("Ingrese Capacidad Optima");
        txtCapOpt.setBorder(null);
        txtCapOpt.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        txtCapOpt.setOpaque(false);
        txtCapOpt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCapOptFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCapOptFocusLost(evt);
            }
        });
        txtCapOpt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtCapOptMousePressed(evt);
            }
        });
        txtCapOpt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCapOptKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCapOptKeyTyped(evt);
            }
        });
        getContentPane().add(txtCapOpt, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 470, 170, 26));

        txtCapActual.setBackground(new java.awt.Color(240, 240, 240));
        txtCapActual.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        txtCapActual.setForeground(new java.awt.Color(153, 153, 153));
        txtCapActual.setText("Ingrese Capacidad Actual");
        txtCapActual.setBorder(null);
        txtCapActual.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        txtCapActual.setOpaque(false);
        txtCapActual.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCapActualFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCapActualFocusLost(evt);
            }
        });
        txtCapActual.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtCapActualMousePressed(evt);
            }
        });
        txtCapActual.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCapActualKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCapActualKeyTyped(evt);
            }
        });
        getContentPane().add(txtCapActual, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 520, 170, 26));

        reporte.setBackground(new java.awt.Color(204, 204, 204));
        reporte.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        reporte.setForeground(new java.awt.Color(255, 255, 255));
        reporte.setIcon(new javax.swing.ImageIcon(getClass().getResource("/componentes/analitica.png"))); // NOI18N
        reporte.setText("REPORTE");
        reporte.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reporteMouseClicked(evt);
            }
        });
        getContentPane().add(reporte, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 50, 120, 40));

        txtEstante.setBackground(new java.awt.Color(240, 240, 240));
        txtEstante.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        txtEstante.setForeground(new java.awt.Color(153, 153, 153));
        txtEstante.setText("Ingrese Número Estante");
        txtEstante.setBorder(null);
        txtEstante.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        txtEstante.setOpaque(false);
        txtEstante.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtEstanteFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEstanteFocusLost(evt);
            }
        });
        txtEstante.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtEstanteMousePressed(evt);
            }
        });
        txtEstante.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtEstanteKeyTyped(evt);
            }
        });
        getContentPane().add(txtEstante, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 570, 170, 28));

        botonDetalleAlmacen.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonDetalleAlmacen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonDetalleAlmacenMouseClicked(evt);
            }
        });
        getContentPane().add(botonDetalleAlmacen, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 230, 140, 40));

        usuario.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        usuario.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(usuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 680, 230, 20));

        jLabel2.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Usuario");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 700, 70, -1));

        txtBuscarAl.setBackground(new java.awt.Color(240, 240, 240));
        txtBuscarAl.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        txtBuscarAl.setForeground(new java.awt.Color(153, 153, 153));
        txtBuscarAl.setText("Buscar ID y Ubicación");
        txtBuscarAl.setBorder(null);
        txtBuscarAl.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        txtBuscarAl.setOpaque(false);
        txtBuscarAl.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtBuscarAlFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBuscarAlFocusLost(evt);
            }
        });
        txtBuscarAl.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBuscarAlKeyTyped(evt);
            }
        });
        getContentPane().add(txtBuscarAl, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 240, 230, 20));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/componentes/Pantalla Almacen_1.png"))); // NOI18N
        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 980, 720));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void BotonActivoAlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonActivoAlActionPerformed
        String IdAlmacen = txtIdAlmacen.getText();
        String activo = "BtnActivo";

        try {
            Connection con = Conexion.getConexion();
            PreparedStatement ps = con.prepareStatement("Update Almacen set Id_Estado=? Where Id_Almacen=?");
            ps.setInt(1, 1);
            ps.setString(2, IdAlmacen);
            ps.executeUpdate();
            JOptionPane.showMessageDialog(null, "Registro Habilitado");
            cargartabla();
            BotonActivoAl.setVisible(Boolean.FALSE);
            BotonInactivoAl.setVisible(Boolean.FALSE);
            Limpiar();
            Inhabillitar();

        } catch (SQLException ex) {
            lo.LogBitacora("Error: No se pudo actualizar el estado " + "Excepción: " + ex + ". Origen: " + this.getClass().getSimpleName(), almacen, activo);
            JOptionPane.showMessageDialog(null, ex.toString());

        }
    }//GEN-LAST:event_BotonActivoAlActionPerformed

    private void BotonInactivoAlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonInactivoAlActionPerformed
        String IdAlmacen = txtIdAlmacen.getText();
        String Inactivo = "BtnInactivo";
        try {
            Connection con = Conexion.getConexion();
            PreparedStatement ps = con.prepareStatement("Update Almacen set Id_Estado=? Where Id_Almacen=");
            ps.setInt(1, 2);
            ps.setString(2, IdAlmacen);
            ps.executeUpdate();
            JOptionPane.showMessageDialog(null, "Registro Inhabilitado");
            cargartabla();
            BotonActivoAl.setVisible(Boolean.FALSE);
            BotonInactivoAl.setVisible(Boolean.FALSE);
            Limpiar();
            Inhabillitar();

        } catch (SQLException ex) {
            lo.LogBitacora("Error: No se pudo actualizar el estado " + "Excepción: " + ex + ". Origen: " + this.getClass().getSimpleName(), almacen, Inactivo);
            JOptionPane.showMessageDialog(null, ex.toString());
        }
    }//GEN-LAST:event_BotonInactivoAlActionPerformed

    private void txtUbicacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUbicacionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUbicacionActionPerformed

    private void botonAgregarALMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonAgregarALMouseClicked
       
        if (botonAgregarAL.isEnabled()) {
            Habilitar();
            if (guardari == 1) {
                botonGuardarAL.isEnabled();
                //BotonCancelarPro.isEnabled();   
            }
            if (cancelari == 1) {
                //BotonGuardarPro.isEnabled();
                botonCancelarAL.isEnabled();
            }
        } else {            
            JOptionPane.showMessageDialog(null, "Esta acción no se encuentra disponible para tu usuario", "ERROR", JOptionPane.ERROR_MESSAGE); 
            lo.LogUsuarios(almacen, "Boton Agregar", userName);
        }
    }//GEN-LAST:event_botonAgregarALMouseClicked

    private void botonEditarALMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonEditarALMouseClicked
        if (botonEditarAL.isEnabled()){          
            String editar = "BtnEditar";
            if (txtUbicacion.getText().equals("Ingrese Ubicación") || txtCapMaxima.getText().equals("Ingrese Capacidad Maxima ") || txtCapMin.getText().equals("Ingrese Capacidad Minima") || txtCapOpt.getText().equals("Ingrese Capacidad Optima") || txtCapOpt.getText().equals("Ingrese Capacidad Actual")
                    || txtEstante.getText().equals("Ingrese Número Estante")) {
                JOptionPane.showMessageDialog(null, "No se puede Guardar datos vacios");

            } else {
                int IdAlmacen = Integer.parseInt(txtIdAlmacen.getText());
                String Ubicacion = txtUbicacion.getText();
                String CapacidadM = txtCapMaxima.getText();
                String CapacidadMin = txtCapMin.getText();
                String CapacidadOp = txtCapOpt.getText();
                String CapacidadAc = txtCapActual.getText();
                String Estante = txtEstante.getText();

                try {
                    Connection con = Conexion.getConexion();
                    PreparedStatement ps = con.prepareStatement("Update Almacen set Ubicacion=, Capacidad_Minima=?,Capacidad_Maxima=?,Capacidad_Optima=?,Capacidad_Actual=?,Num_Estante=? Where Id_Almacen=?");
                    ps.setString(1, Ubicacion);
                    ps.setString(2, CapacidadM);
                    ps.setString(3, CapacidadMin);
                    ps.setString(4, CapacidadOp);
                    ps.setString(5, CapacidadAc);
                    ps.setString(6, Estante);
                    ps.setInt(7, IdAlmacen);

                    ps.executeUpdate();
                    JOptionPane.showMessageDialog(null, "Registro Actualizado");

                    cargartabla();
                    Limpiar();
                    Inhabillitar();

                } catch (Exception ex) {
                    lo.LogBitacora("Error: No se pudo actualizar el registro " + "Excepción: " + ex + ". Origen: " + this.getClass().getSimpleName(), almacen, editar);
                    JOptionPane.showMessageDialog(null, ex.toString());
                    JOptionPane.showMessageDialog(null, ex.toString());
                }
            }
        } else {            
            JOptionPane.showMessageDialog(null, "Esta acción no se encuentra disponible para tu usuario", "ERROR", JOptionPane.ERROR_MESSAGE);
            lo.LogUsuarios(almacen, "botonEditar", userName);
        }
    }//GEN-LAST:event_botonEditarALMouseClicked

    private void botonGuardarALMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonGuardarALMouseClicked
        if (botonGuardarAL.isEnabled()) {
            String guardar = "BtnGuardar";
            if (txtUbicacion.getText().equals("Ingrese Ubicación") && txtCapMaxima.getText().equals("Ingrese Capacidad Maxima")
                    && txtCapMin.getText().equals("Ingrese Capacidad Minima") && txtCapOpt.getText().equals("Ingrese Capacidad Optima") && txtCapActual.getText().equals("Ingrese Capacidad Actual") && txtEstante.getText().equals("Ingrese Número Estante")) {
                JOptionPane.showMessageDialog(null, "Debes llenar todos los campos", "Advertencia", JOptionPane.WARNING_MESSAGE);
            } else {
                if (txtUbicacion.getText().equals("Ingrese Ubicación")) {
                    JOptionPane.showMessageDialog(null, "Debe ingresar un nombre de Empresa", "Advertencia", JOptionPane.WARNING_MESSAGE);
                } else if (txtCapMaxima.getText().equals("Ingrese Capacidad Maxima")) {
                    JOptionPane.showMessageDialog(null, "Debe ingresar un RTN", "Advertencia", JOptionPane.WARNING_MESSAGE);
                } else if (txtCapMin.getText().equals("Ingrese Capacidad Minima")) {
                    JOptionPane.showMessageDialog(null, "Debe ingresar una direccion", "Advertencia", JOptionPane.WARNING_MESSAGE);
                } else if (txtCapOpt.getText().equals("Ingrese Capacidad Optima")) {
                    JOptionPane.showMessageDialog(null, "Debe ingresar un telefono", "Advertencia", JOptionPane.WARNING_MESSAGE);
                } else if (txtCapActual.getText().equals("Ingrese Capacidad Actual")) {
                    JOptionPane.showMessageDialog(null, "Debe ingresar un telefono", "Advertencia", JOptionPane.WARNING_MESSAGE);
                } else if (txtEstante.getText().equals("Ingrese Número Estante")) {
                    JOptionPane.showMessageDialog(null, "Debe ingresar un telefono", "Advertencia", JOptionPane.WARNING_MESSAGE);

                } else {

                    String Ubi = txtUbicacion.getText();
                    String Maxima = txtCapMaxima.getText();

                    String Minima = txtCapMin.getText();
                    String Optima = txtCapOpt.getText();
                    String Actual = txtCapActual.getText();
                    String Estante = txtEstante.getText();

                    try {
                        Connection con = Conexion.getConexion();
                        PreparedStatement ps = con.prepareStatement("Insert into Almacen (Ubicacion, Capacidad_Minima,Capacidad_Maxima,Capacidad_Optima,Capacidad_Actual,Num_Estante,Id_Estado ) VALUES(?,?,?,?,?,?,?)");
                        ps.setString(1, Ubi);
                        ps.setString(2, Maxima);
                        ps.setString(3, Minima);
                        ps.setString(4, Optima);
                        ps.setString(5, Actual);
                        ps.setString(6, Estante);
                        ps.setInt(7, 1);
                        ps.executeUpdate();

                        JOptionPane.showMessageDialog(null, "Registro guardado");
                        cargartabla();
                        Limpiar();
                        Inhabillitar();

                    } catch (SQLException ex) {
                        lo.LogBitacora("Error: No se pudo guardar el registro " + "Excepción: " + ex + ". Origen: " + this.getClass().getSimpleName(), almacen, guardar);
                        JOptionPane.showMessageDialog(null, ex.toString());
                     }
            }}
        } else {

            JOptionPane.showMessageDialog(null, "Esta acción no se encuentra disponible para tu usuario", "ERROR", JOptionPane.ERROR_MESSAGE);
            lo.LogUsuarios(almacen, "Boton Guardar", userName);
        }



    }//GEN-LAST:event_botonGuardarALMouseClicked

    private void TablaAlmacenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaAlmacenMouseClicked
        String tablaAl = "TablaAlmacen";

        try {
            int fila = TablaAlmacen.getSelectedRow();
            int id = Integer.parseInt(TablaAlmacen.getValueAt(fila, 0).toString());
            PreparedStatement ps;
            ResultSet rs;
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("Select A.Id_Almacen,A.Ubicacion,A.Capacidad_Maxima,A.Capacidad_Minima,A.Capacidad_Optima,A.Capacidad_Actual,A.Num_Estante,E.Estado\n"
                    + "From Almacen as A\n"
                    + "INNER JOIN Estado AS E ON A.Id_Estado = E.Id_Estado\n"
                    + "where A.Id_Almacen=?\n"
                    + "Order By A.Id_Almacen");

            ps.setInt(1, id);
            rs = ps.executeQuery();

            while (rs.next()) {
                txtIdAlmacen.setText(String.valueOf(id));
                txtUbicacion.setText(rs.getString("Ubicacion"));
                txtCapMaxima.setText(rs.getString("Capacidad_Maxima"));

                txtCapMin.setText(rs.getString("Capacidad_Minima"));
                txtCapOpt.setText(rs.getString("Capacidad_Optima"));
                txtCapActual.setText(rs.getString("Capacidad_Actual"));
                txtEstante.setText(rs.getString("Num_Estante"));

                if (activoi == 1) {
                    BotonActivoAl.setVisible(Boolean.TRUE);
                    if (rs.getString("Id_Estado").equals("1")) {
                        BotonActivoAl.setSelected(true);
                    } 
                } else {
                    BotonActivoAl.setVisible(Boolean.FALSE);
                }
                if (inactivoi == 1) {
                    BotonInactivoAl.setVisible(Boolean.TRUE);
                    if (rs.getString("Id_Estado").equals("2")) {
                        BotonInactivoAl.setSelected(true);
                           }
                } else {
                    BotonInactivoAl.setVisible(Boolean.FALSE);
                }
                
                Id_Almacen = txtIdAlmacen.getText();

                //BotonActivoPro.setVisible(Boolean.TRUE);
                //BotonInactivoPro.setVisible(Boolean.TRUE);
                //id = txtId_Proveedor.getText();
                Habilitar();
            }
                        

                   
        } catch (SQLException ex) {
            lo.LogBitacora("Error: No se pudo seleccionar el registro " + "Excepción: " + ex + ". Origen: " + this.getClass().getSimpleName(), almacen, tablaAl);
            JOptionPane.showMessageDialog(null, ex.toString());
        }
    }//GEN-LAST:event_TablaAlmacenMouseClicked

    private void txtBuscarAlKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarAlKeyTyped
        buscarData(txtBuscarAl.getText());
        // validarNumerosLetras(evt);
        if (txtBuscarAl.getText().length() > 15) {
            JOptionPane.showMessageDialog(null, "Alcanzaste el máximo de caracteres para este campo", "Advertencia", JOptionPane.WARNING_MESSAGE);
            evt.consume();
        } else if (txtBuscarAl.getText().length() > 0) {
            if (!txtBuscarAl.getText().matches("^(?!.*([A-Za-zñÑáéíóúÁÉÍÓÚ\\s])\\1{2})[A-Za-zñÑáéíóúÁÉÍÓÚ\\s0-9]+$")) {
                JOptionPane.showMessageDialog(null, "No repitas caracteres de forma incorrecta", "Advertencia", JOptionPane.WARNING_MESSAGE);
                evt.consume();

            }
        }
    }//GEN-LAST:event_txtBuscarAlKeyTyped

    private void botonCancelarALMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonCancelarALMouseClicked
     if (botonCancelarAL.isEnabled()) {
            // Limpiar();
            //Inhabillitar();
            botonCancelarAL.setEnabled(Boolean.FALSE);
            botonCancelarAL.setEnabled(Boolean.FALSE);
        } else {
            JOptionPane.showMessageDialog(null, "Esta acción no se encuentra disponible para tu usuario", "ERROR", JOptionPane.ERROR_MESSAGE);
            lo.LogUsuarios(almacen, "Boton Cancelar", userName);
        }
        
    }//GEN-LAST:event_botonCancelarALMouseClicked

    private void txtUbicacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUbicacionFocusGained
        if (txtUbicacion.getText().equals("Ingrese Ubicación")) {
            txtUbicacion.setText("");
            txtUbicacion.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtUbicacionFocusGained

    private void botonRegresarALMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonRegresarALMouseClicked
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuPrincipal().setVisible(true);
            }
        });
        this.dispose();
    }//GEN-LAST:event_botonRegresarALMouseClicked

    private void txtCapMinFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCapMinFocusGained
        if (txtCapMin.getText().equals("Ingrese Capacidad Mínima")) {
            txtCapMin.setText("");
            txtCapMin.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtCapMinFocusGained

    private void txtCapMinFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCapMinFocusLost
        if (txtCapMin.getText().equals("")) {
            txtCapMin.setText("Ingrese Capacidad Mínima");
            txtCapMin.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtCapMinFocusLost

    private void txtCapMaximaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCapMaximaFocusGained
        if (txtCapMaxima.getText().equals("Ingrese Capacidad Máxima")) {
            txtCapMaxima.setText("");
            txtCapMaxima.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtCapMaximaFocusGained

    private void txtCapMaximaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCapMaximaFocusLost
        if (txtCapMaxima.getText().equals("")) {
            txtCapMaxima.setText("Ingrese Capacidad Máxima");
            txtCapMaxima.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtCapMaximaFocusLost

    private void txtUbicacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUbicacionFocusLost
        if (txtUbicacion.getText().equals("")) {
            txtUbicacion.setText("Ingrese Ubicación");
            txtUbicacion.setForeground(new Color(153, 153, 153));
        } else if (!txtUbicacion.getText().isEmpty()) {
            if (!txtUbicacion.getText().matches("^[A-Z-ÁÉÍÓÚÑ]{1}[a-z-áéíóúñ]+$")) {
                JOptionPane.showMessageDialog(null, "Debes escribir un nombre comenzando en mayúscula. No utilice espacios", "Error", JOptionPane.ERROR_MESSAGE);
            }

        }
    }//GEN-LAST:event_txtUbicacionFocusLost

    private void botonDetalleAlmacenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonDetalleAlmacenMouseClicked

         if (habilitarroles1(19) == 19) {
            DetalleAlmacen CL = new DetalleAlmacen();
            {
                CL.setVisible(true);
                dispose();

            }
        } else {
            JOptionPane.showMessageDialog(null, "Este usuario No tiene Acceso a esta pantalla", "Advertencia", JOptionPane.WARNING_MESSAGE);
            lo.LogUsuarios(almacen, "Boton Detalle Almacen", userName);
            
        }
       /* java.awt.EventQueue.invokeLater(new Runnable() {
           
            public void run() {
                new DetalleAlmacen().setVisible(true);
            }
        });
        this.dispose();*/
    }//GEN-LAST:event_botonDetalleAlmacenMouseClicked

    private void txtCapOptFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCapOptFocusGained
        if (txtCapOpt.getText().equals("Ingrese Capacidad Optima")) {
            txtCapOpt.setText("");
            txtCapOpt.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtCapOptFocusGained

    private void txtCapOptFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCapOptFocusLost
        if (txtCapOpt.getText().equals("")) {
            txtCapOpt.setText("Ingrese Capacidad Optima");
            txtCapOpt.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtCapOptFocusLost

    private void txtCapActualFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCapActualFocusGained
        if (txtCapActual.getText().equals("Ingrese Capacidad Actual")) {
            txtCapActual.setText("");
            txtCapActual.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtCapActualFocusGained

    private void txtCapActualFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCapActualFocusLost
        if (txtCapActual.getText().equals("")) {
            txtCapActual.setText("Ingrese Capacidad Actual");
            txtCapActual.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtCapActualFocusLost

    private void txtEstanteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEstanteFocusGained
        if (txtEstante.getText().equals("Ingrese Número Estante")) {
            txtEstante.setText("");
            txtEstante.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtEstanteFocusGained

    private void txtEstanteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEstanteFocusLost
        if (txtEstante.getText().equals("")) {
            txtEstante.setText("Ingrese Número Estante");
            txtEstante.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtEstanteFocusLost

    private void txtBuscarAlFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBuscarAlFocusGained
        if (txtBuscarAl.getText().equals("Buscar ID y Ubicación")) {
            txtBuscarAl.setText("");
            txtBuscarAl.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtBuscarAlFocusGained

    private void txtBuscarAlFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBuscarAlFocusLost
        if (txtBuscarAl.getText().equals("")) {
            txtBuscarAl.setText("Buscar ID y Ubicación");
            txtBuscarAl.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtBuscarAlFocusLost

    private void txtUbicacionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUbicacionKeyPressed

    }//GEN-LAST:event_txtUbicacionKeyPressed

    private void txtCapMaximaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtCapMaximaMousePressed
        if (txtCapMaxima.isEnabled() == false) {

            JOptionPane.showMessageDialog(null, "Dar Click en Agregar o Editar para utilizar el campo", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_txtCapMaximaMousePressed

    private void txtCapMaximaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCapMaximaKeyPressed


    }//GEN-LAST:event_txtCapMaximaKeyPressed

    private void txtCapMinMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtCapMinMousePressed
        if (txtCapMin.isEnabled() == false) {

            JOptionPane.showMessageDialog(null, "Dar Click en Agregar o Editar para utilizar el campo", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_txtCapMinMousePressed

    private void txtCapOptMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtCapOptMousePressed
        if (txtCapOpt.isEnabled() == false) {

            JOptionPane.showMessageDialog(null, "Dar Click en Agregar o Editar para utilizar el campo", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }

    }//GEN-LAST:event_txtCapOptMousePressed

    private void txtCapActualMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtCapActualMousePressed
        if (txtCapActual.isEnabled() == false) {

            JOptionPane.showMessageDialog(null, "Dar Click en Agregar o Editar para utilizar el campo", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }

    }//GEN-LAST:event_txtCapActualMousePressed

    private void txtEstanteMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtEstanteMousePressed
        if (txtEstante.isEnabled() == false) {

            JOptionPane.showMessageDialog(null, "Dar Click en Agregar o Editar para utilizar el campo", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_txtEstanteMousePressed

    private void txtUbicacionMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtUbicacionMousePressed
        if (txtUbicacion.isEnabled() == false) {

            JOptionPane.showMessageDialog(null, "Dar Click en Agregar o Editar para utilizar el campo", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_txtUbicacionMousePressed

    private void txtCapMaximaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCapMaximaKeyTyped
        validarNumeros(evt);
        if (txtCapMaxima.getText().length() > 3) {
            evt.consume();
        }
    }//GEN-LAST:event_txtCapMaximaKeyTyped

    private void txtCapMinKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCapMinKeyTyped
        validarNumeros(evt);
        if (txtCapMin.getText().length() > 3) {
            evt.consume();
        }
    }//GEN-LAST:event_txtCapMinKeyTyped

    private void txtCapOptKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCapOptKeyTyped
        validarNumeros(evt);
        if (txtCapOpt.getText().length() > 3) {
            evt.consume();
        }
    }//GEN-LAST:event_txtCapOptKeyTyped

    private void txtCapActualKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCapActualKeyTyped
        validarNumeros(evt);
        if (txtCapActual.getText().length() > 3) {
            evt.consume();
        }
    }//GEN-LAST:event_txtCapActualKeyTyped

    private void txtEstanteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEstanteKeyTyped
        validarNumeros(evt);
        if (txtEstante.getText().length() > 3) {
            evt.consume();
        }
    }//GEN-LAST:event_txtEstanteKeyTyped

    private void txtUbicacionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUbicacionKeyTyped
        validarNumerosLetras(evt);

        if (txtUbicacion.getText().length() > 20) {
            JOptionPane.showMessageDialog(null, "El máximo es de 20 caracteres para este campo", "Advertencia", JOptionPane.WARNING_MESSAGE);
            evt.consume();
        } else if (txtUbicacion.getText().length() > 0) {
            if (!txtUbicacion.getText().matches("^(?!.*([A-Za-zñÑáéíóúÁÉÍÓÚ\\s])\\1{2})[A-Za-zñÑáéíóúÁÉÍÓÚ\\s]+$")) {
                JOptionPane.showMessageDialog(null, "No repitas caracteres de forma incorrecta", "Error", JOptionPane.ERROR_MESSAGE);
                evt.consume();
            }
        }


    }//GEN-LAST:event_txtUbicacionKeyTyped

    private void txtCapMaximaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCapMaximaKeyReleased

        if (Integer.parseInt(txtCapMaxima.getText()) < 100) {
            JOptionPane.showMessageDialog(null, "La capacidad máxima no puede ser menor a 100", "Advertencia", JOptionPane.WARNING_MESSAGE);

        } else if (Integer.parseInt(txtCapMaxima.getText()) > 10000) {
            JOptionPane.showMessageDialog(null, "La capacidad  máxima no puede ser mayor a 10,000", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_txtCapMaximaKeyReleased

    private void txtCapMinKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCapMinKeyReleased

        if (txtCapMaxima.getText().equals("Ingrese Capacidad Máxima")) {
            JOptionPane.showMessageDialog(null, "Debe Ingresar Capacidad Maxima para ingresar la mínima", "Advertencia", JOptionPane.WARNING_MESSAGE);
        } else if (Integer.parseInt(txtCapMin.getText()) > Integer.parseInt(txtCapMaxima.getText())) {
            JOptionPane.showMessageDialog(null, "La capacidad  minima no puede ser mayor a la capacidad  Maxima", "Advertencia", JOptionPane.WARNING_MESSAGE);

        } else if (Integer.parseInt(txtCapMin.getText()) < 10) {
            JOptionPane.showMessageDialog(null, "La capacidad  minima no puede ser menor a 10", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_txtCapMinKeyReleased

    private void txtCapActualKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCapActualKeyReleased
        if (Integer.parseInt(txtCapActual.getText()) > Integer.parseInt(txtCapMaxima.getText())) {
            JOptionPane.showMessageDialog(null, "La capacidad actual no puede ser mayor a la capacidad  Máxima", "Advertencia", JOptionPane.WARNING_MESSAGE);

        } else if (Integer.parseInt(txtCapActual.getText()) < Integer.parseInt(txtCapMin.getText())) {
            JOptionPane.showMessageDialog(null, "La capacidad actual no puede ser menor a la capacidad mínima", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_txtCapActualKeyReleased

    private void txtCapOptKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCapOptKeyReleased
        if (Integer.parseInt(txtCapOpt.getText()) > Integer.parseInt(txtCapMaxima.getText())) {
            JOptionPane.showMessageDialog(null, "La capacidad optima no puede ser mayor a la capacidad  Máxima", "Advertencia", JOptionPane.WARNING_MESSAGE);

        } else if (Integer.parseInt(txtCapOpt.getText()) < Integer.parseInt(txtCapMin.getText())) {
            JOptionPane.showMessageDialog(null, "La capacidad optima no puede ser menor a la capacidad mínima", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_txtCapOptKeyReleased

    private void reporteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reporteMouseClicked
        JasperReport reporte;
        HashMap hm = new HashMap();
        hm.put("Usuario", usuario.getText());
        try {
            Connection con = Conexion.getConexion();
            reporte = JasperCompileManager.compileReport("src/Reportes/ReporteAlmacen.jrxml");
            JasperPrint jp = JasperFillManager.fillReport(reporte, hm, con);
            JasperViewer.viewReport(jp, true);
            ReportView view = new ReportView(jp, false);

            view.setVisible(true);
        } catch (JRException ex) {
            Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_reporteMouseClicked

    private void txtCapMaximaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCapMaximaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCapMaximaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Almacen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Almacen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Almacen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Almacen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Almacen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton BotonActivoAl;
    private javax.swing.JRadioButton BotonInactivoAl;
    private javax.swing.JTable TablaAlmacen;
    private javax.swing.JLabel botonAgregarAL;
    private javax.swing.JLabel botonCancelarAL;
    private javax.swing.JLabel botonDetalleAlmacen;
    private javax.swing.JLabel botonEditarAL;
    private javax.swing.JLabel botonGuardarAL;
    private javax.swing.JLabel botonRegresarAL;
    private javax.swing.ButtonGroup buttonGroupAlmacen;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel reporte;
    private javax.swing.JTextField txtBuscarAl;
    private javax.swing.JTextField txtCapActual;
    private javax.swing.JTextField txtCapMaxima;
    private javax.swing.JTextField txtCapMin;
    private javax.swing.JTextField txtCapOpt;
    private javax.swing.JTextField txtEstante;
    private javax.swing.JLabel txtIdAlmacen;
    private javax.swing.JTextField txtUbicacion;
    private javax.swing.JLabel usuario;
    // End of variables declaration//GEN-END:variables

    private void Habilitar() {
        txtUbicacion.enable(Boolean.TRUE);
        txtCapMaxima.enable(Boolean.TRUE);
        txtCapMin.enable(Boolean.TRUE);
        txtCapOpt.enable(Boolean.TRUE);
        txtCapActual.enable(Boolean.TRUE);
        txtEstante.enable(Boolean.TRUE);
    }

    private void cargartabla() {
        String cargarT = "BtnCargar";
        DefaultTableModel modeloTabla = (DefaultTableModel) TablaAlmacen.getModel();
        modeloTabla.setRowCount(0);

        PreparedStatement ps;
        ResultSet rs;
        ResultSetMetaData rsmd;
        int columnas;

        try {
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("Select A.Id_Almacen,A.Ubicacion,A.Capacidad_Maxima,A.Capacidad_Minima,A.Capacidad_Optima,A.Capacidad_Actual,A.Num_Estante,E.Estado\n"
                    + "From Almacen as A\n"
                    + "INNER JOIN Estado AS E ON A.Id_Estado = E.Id_Estado\n"
                    + "Order By A.Id_Almacen");
            rs = ps.executeQuery();
            rsmd = rs.getMetaData();
            columnas = rsmd.getColumnCount();

            while (rs.next()) {
                Object[] fila = new Object[columnas];
                for (int indice = 0; indice < columnas; indice++) {
                    fila[indice] = rs.getObject(indice + 1);
                }
                modeloTabla.addRow(fila);
            }

        } catch (SQLException ex) {
            lo.LogBitacora("Error: No se pudo actualizar la tabla " + "Excepción: " + ex + ". Origen: " + this.getClass().getSimpleName(), almacen, cargarT);
            JOptionPane.showMessageDialog(null, ex.toString());
        }

    }

    private void Limpiar() {
        txtUbicacion.setText("");
        if (txtUbicacion.getText().equals("")) {
            txtUbicacion.setText("Ingrese Ubicación");
            txtUbicacion.setForeground(new Color(153, 153, 153));
        }
        txtCapMaxima.setText("");
        if (txtCapMaxima.getText().equals("")) {
            txtCapMaxima.setText("Ingrese Capacidad Máxima");
            txtCapMaxima.setForeground(new Color(153, 153, 153));
        }
        txtCapMin.setText("");
        if (txtCapMin.getText().equals("")) {
            txtCapMin.setText("Ingrese Capacidad Mínima");
            txtCapMin.setForeground(new Color(153, 153, 153));

        }
        txtCapOpt.setText("");
        if (txtCapOpt.getText().equals("")) {
            txtCapOpt.setText("Ingrese Capacidad Optima");
            txtCapOpt.setForeground(new Color(153, 153, 153));
        }
        txtCapActual.setText("");
        if (txtCapActual.getText().equals("")) {
            txtCapActual.setText("Ingrese Capacidad Actual");
            txtCapActual.setForeground(new Color(153, 153, 153));
        }
        txtEstante.setText("");
        if (txtEstante.getText().equals("")) {
            txtEstante.setText("Ingrese Número Estante");
            txtEstante.setForeground(new Color(153, 153, 153));
        }
    }

    private void Inhabillitar() {
        txtUbicacion.enable(Boolean.FALSE);
        txtCapMaxima.enable(Boolean.FALSE);
        txtCapMin.enable(Boolean.FALSE);
        txtCapOpt.enable(Boolean.FALSE);
        txtCapActual.enable(Boolean.FALSE);
        txtEstante.enable(Boolean.FALSE);

    }

    private void buscarData(String valor) {
        String buscarD = "BtnBuscar";
        String[] titulos = {"ID", "Ubicacion", "Cap.Maxima", "Cap.Minima", "Cap.Optima", "Cap.Actual", "Estante", "Estado"};
        String[] registros = new String[13];
        String sql = "Select A.Id_Almacen,A.Ubicacion,A.Capacidad_Maxima,A.Capacidad_Minima,A.Capacidad_Optima,A.Capacidad_Actual,A.Num_Estante,E.Estado\n"
                + "From Almacen as A\n"
                + "INNER JOIN Estado AS E ON A.Id_Estado = E.Id_Estado\n"
                + "WHERE CONCAT (A.Id_Almacen, ' ', A.Ubicacion) LIKE '%" + valor + "%'\n"
                + "Order By A.Id_Almacen";

        DefaultTableModel model = new DefaultTableModel(null, titulos);
        Connection con = Conexion.getConexion();

        try {

            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);

            while (rs.next()) {
                registros[0] = rs.getString("Id_Almacen");
                registros[1] = rs.getString("Ubicacion");
                registros[2] = rs.getString("Capacidad_Maxima");
                registros[3] = rs.getString("Capacidad_Minima");
                registros[4] = rs.getString("Capacidad_Optima");
                registros[5] = rs.getString("Capacidad_Actual");
                registros[6] = rs.getString("Num_Estante");
                registros[7] = rs.getString("Estado");
                model.addRow(registros);
            }

            TablaAlmacen.setModel(model);
            // anchoColumnas();
        } catch (SQLException ex) {
            Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
            lo.LogBitacora("Error: No se pudo buscar el registro " + "Excepción: " + ex + ". Origen: " + this.getClass().getSimpleName(), almacen, buscarD);
            lo.LogUsuarios(almacen, "Buscar", userName);
        }
    }

    private void validarNumeros(KeyEvent e) {
        if (e.getKeyChar() >= 33 && e.getKeyChar() <= 47
                || e.getKeyChar() >= 58 && e.getKeyChar() <= 238) {
            e.consume();
            JOptionPane.showMessageDialog(null, "Este campo solo admite números", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }

    public void validarNumerosLetras(java.awt.event.KeyEvent e) {
        if (e.getKeyChar() >= 33 && e.getKeyChar() <= 47
                || e.getKeyChar() >= 58 && e.getKeyChar() <= 64
                || e.getKeyChar() >= 91 && e.getKeyChar() <= 96
                || e.getKeyChar() >= 123 && e.getKeyChar() <= 129
                || e.getKeyChar() >= 145 && e.getKeyChar() <= 159
                || e.getKeyChar() >= 164 && e.getKeyChar() <= 238) {

            e.consume();
            JOptionPane.showMessageDialog(null, "Este campo no acepta caracteres especiales, no puede ser solo númerico", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }

    public void habilitarroles() {
        try {

            PreparedStatement ps;
            ResultSet rs;
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("Select PU.Agregar, PU.Guardar, PU.Cancelar, PU.Editar, PU.Activo, PU.Inactivo, PU.Reporte, PU.Anular, PU.CrearCompra, PU.Historicos, PU.Buscar\n"
                    + "From PermisosUsuario AS PU\n"
                    + "Inner Join Usuario as U on PU.IdUsuario=U.Id_Usuario\n"
                    + "where PU.IdPermiso=? and U.Nombre=?");
            ps.setInt(1,6);
            ps.setString(2, usuario.getText());
            rs = ps.executeQuery();
            System.out.println(usuario.getText());

            while (rs.next()) {
                agregari = rs.getInt("Agregar");
                guardari = rs.getInt("Guardar");
                cancelari = rs.getInt("Cancelar");
                editari = rs.getInt("Editar");
                activoi = rs.getInt("Activo");
                inactivoi = rs.getInt("Inactivo");
                reportesi = rs.getInt("Reporte");
                anulari = rs.getInt("Anular");
                crearcomprai = rs.getInt("CrearCompra");
                historicoi = rs.getInt("Historicos");
                buscari = rs.getInt("Buscar");
                System.out.print(agregari + " " + guardari + " " + cancelari);

            }
        } catch (SQLException ex) {
            //lo.LogBitacora("Error: No se pudo seleccionar la tabla" + "Excepción: " + ex + ". Origen: " + this.getClass().getSimpleName(), proveedores, tablap);
            JOptionPane.showMessageDialog(null, ex.toString());
        }
        if (agregari == 1) {
            botonAgregarAL.setEnabled(Boolean.TRUE);
        } else if (agregari == 0) {
            botonAgregarAL.setEnabled(Boolean.FALSE);
            botonAgregarAL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/componentes/obstruido (1).png")));
        }

        if (guardari == 1) {
            botonGuardarAL.setEnabled(Boolean.TRUE);
        } else if (guardari == 0) {
            botonGuardarAL.setEnabled(Boolean.FALSE);
            botonGuardarAL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/componentes/obstruido (1).png")));

        }
        if (editari == 1) {
            botonEditarAL.setEnabled(Boolean.TRUE);
        } else {
            botonEditarAL.setEnabled(Boolean.FALSE);
            botonEditarAL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/componentes/obstruido (1).png")));
        }

        if (cancelari == 1) {
            botonCancelarAL.setEnabled(Boolean.TRUE);

        } else {
            botonCancelarAL.setEnabled(Boolean.FALSE);
            botonCancelarAL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/componentes/obstruido (1).png")));
        }
        if (reportesi == 1) {
            reporte.setVisible(Boolean.TRUE);

        } else {
            reporte.setVisible(Boolean.FALSE);
            //jLabel2.setEnabled(Boolean.TRUE);
        }
        if (buscari == 1) {
            txtBuscarAl.setEnabled(Boolean.TRUE);
        } else {
            txtBuscarAl.setEnabled(Boolean.FALSE);
            txtBuscarAl.setText("NO DISPONIBLE");
        }
        /* if (anulari == 1) {
            Anular.setSelected(Boolean.TRUE);
        } else {
            Anular.setSelected(Boolean.FALSE);
        }*/
        if (activoi == 1) {
            //BotonActivoPro.setVisible(Boolean.TRUE);
        } else {
            BotonActivoAl.setVisible(Boolean.FALSE);
        }
        if (inactivoi == 1) {
            //BotonInactivoPro.setVisible(Boolean.TRUE);
        } else {
            BotonInactivoAl.setVisible(Boolean.FALSE);
        }
        /*if (historicoi == 1) {
            Historico.setSelected(Boolean.TRUE);
        } else {
            Historico.setSelected(Boolean.FALSE);
        }
        if (crearcomprai == 1) {
            CrearCompra.setSelected(Boolean.TRUE);
        } else {
            CrearCompra.setSelected(Boolean.FALSE);
        }*/
    }
    public int habilitarroles1(int numeroPermiso) {
        int npermiso = 0;
        try {

            PreparedStatement ps;
            ResultSet rs;
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("Select PU.IdPermiso\n"
                    + "From PermisosUsuario AS PU\n"
                    + "Inner Join Usuario as U on PU.IdUsuario=U.Id_Usuario\n"
                    + "where PU.IdPermiso=? and U.Nombre=?");
            ps.setInt(1, numeroPermiso);
            ps.setString(2, usuario.getText());
            rs = ps.executeQuery();
            System.out.println(usuario.getText());

            while (rs.next()) {
                npermiso = rs.getInt("IdPermiso");

            }
        } catch (SQLException ex) {
            //lo.LogBitacora("Error: No se pudo seleccionar la tabla" + "Excepción: " + ex + ". Origen: " + this.getClass().getSimpleName(), proveedores, tablap);
            JOptionPane.showMessageDialog(null, ex.toString());
        }
        return npermiso;

    }

}
