/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Formularios_SAG;

import Conexion.Conexion;
import Logs.log;
import Reportes.ReportView;
import com.sun.corba.se.impl.orbutil.CorbaResourceUtil;
import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Allisson Castro
 */
public class Sucursales extends javax.swing.JFrame {

    /**
     * Creates new form Sucursales
     */
    log lo = new log();
    String sucursales = "Sucursales";

    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("componentes/LOGOSAG(2).png"));
        return retValue;
    }

    public Sucursales() {
        initComponents();
        usuario.setText(Login.txtUsuario.getText());
        cargartabla();
        txtIdS.setVisible(Boolean.FALSE);
        BotonActivoS.setVisible(Boolean.FALSE);
        BotonInactivoS.setVisible(Boolean.FALSE);
    }

    boolean verificarDatosExistentes(String campo, String columna, String tabla, String mensaje) {
        Conexion cc = new Conexion();
        Connection cn = cc.getConexion();
        boolean resultado = true;
        String verificar = "Verificar";
        String sql = "SELECT " + columna + " FROM " + tabla + " WHERE " + columna + " = '" + campo + "'";

        try {
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);

            if (rs.next()) {
                if (rs.getString(columna).equals(campo)) {
                    JOptionPane.showMessageDialog(null, mensaje, "Error", JOptionPane.ERROR_MESSAGE);
                    resultado = false;
                }
            }
        } catch (Exception e) {
            lo.LogBitacora("Error: No se pudo verificar el dato " + "Excepci√≥n: " + e + ". Origen: " + this.getClass().getSimpleName(), sucursales, verificar);
            JOptionPane.showMessageDialog(null, "No se pudo verificar\n" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        return resultado;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoBotonSucursal = new javax.swing.ButtonGroup();
        BotonInactivoS = new javax.swing.JRadioButton();
        BotonActivoS = new javax.swing.JRadioButton();
        botonBuscarS = new javax.swing.JLabel();
        botonAgregarS = new javax.swing.JLabel();
        botonEditarS = new javax.swing.JLabel();
        botonGerenciaS = new javax.swing.JLabel();
        txtBuscarS = new javax.swing.JTextField();
        botonGuardarS = new javax.swing.JLabel();
        botonCancelarS = new javax.swing.JLabel();
        txtNombreS = new javax.swing.JTextField();
        txtDireccionS = new javax.swing.JTextField();
        botonCiudadS = new javax.swing.JComboBox<>();
        txtTelefonoS = new javax.swing.JTextField();
        reporte = new javax.swing.JLabel();
        botonSalirS = new javax.swing.JLabel();
        txtIdS = new javax.swing.JLabel();
        usuario = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        botonRegresarS = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablasucursal = new javax.swing.JTable();
        BotonCajaS = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(getIconImage());
        setMinimumSize(new java.awt.Dimension(1000, 720));
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(1000, 720));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        grupoBotonSucursal.add(BotonInactivoS);
        BotonInactivoS.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        BotonInactivoS.setText("Inactivo");
        BotonInactivoS.setOpaque(false);
        BotonInactivoS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonInactivoSActionPerformed(evt);
            }
        });
        getContentPane().add(BotonInactivoS, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 250, -1, -1));

        grupoBotonSucursal.add(BotonActivoS);
        BotonActivoS.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        BotonActivoS.setText("Activo");
        BotonActivoS.setOpaque(false);
        BotonActivoS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonActivoSActionPerformed(evt);
            }
        });
        getContentPane().add(BotonActivoS, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 250, -1, -1));
        getContentPane().add(botonBuscarS, new org.netbeans.lib.awtextra.AbsoluteConstraints(1270, 280, 40, 40));

        botonAgregarS.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonAgregarS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonAgregarSMouseClicked(evt);
            }
        });
        getContentPane().add(botonAgregarS, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 140, 130, 50));

        botonEditarS.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonEditarS.setEnabled(false);
        botonEditarS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonEditarSMouseClicked(evt);
            }
        });
        getContentPane().add(botonEditarS, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 140, 140, 50));

        botonGerenciaS.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonGerenciaS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonGerenciaSMouseClicked(evt);
            }
        });
        getContentPane().add(botonGerenciaS, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 140, 140, 50));

        txtBuscarS.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        txtBuscarS.setForeground(new java.awt.Color(153, 153, 153));
        txtBuscarS.setText("Buscar por ID o Nombre");
        txtBuscarS.setBorder(null);
        txtBuscarS.setOpaque(false);
        txtBuscarS.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtBuscarSFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBuscarSFocusLost(evt);
            }
        });
        txtBuscarS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscarSActionPerformed(evt);
            }
        });
        txtBuscarS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBuscarSKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBuscarSKeyTyped(evt);
            }
        });
        getContentPane().add(txtBuscarS, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 235, 250, 29));

        botonGuardarS.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonGuardarS.setEnabled(false);
        botonGuardarS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonGuardarSMouseClicked(evt);
            }
        });
        getContentPane().add(botonGuardarS, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 630, 90, 30));

        botonCancelarS.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonCancelarS.setEnabled(false);
        botonCancelarS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonCancelarSMouseClicked(evt);
            }
        });
        getContentPane().add(botonCancelarS, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 650, 100, 40));

        txtNombreS.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        txtNombreS.setForeground(new java.awt.Color(153, 153, 153));
        txtNombreS.setText("Ingrese Nombre Sucursal");
        txtNombreS.setBorder(null);
        txtNombreS.setEnabled(false);
        txtNombreS.setOpaque(false);
        txtNombreS.setVerifyInputWhenFocusTarget(false);
        txtNombreS.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNombreSFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNombreSFocusLost(evt);
            }
        });
        txtNombreS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtNombreSMousePressed(evt);
            }
        });
        txtNombreS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreSActionPerformed(evt);
            }
        });
        txtNombreS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNombreSKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreSKeyTyped(evt);
            }
        });
        getContentPane().add(txtNombreS, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 357, 200, 30));

        txtDireccionS.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        txtDireccionS.setForeground(new java.awt.Color(153, 153, 153));
        txtDireccionS.setText("Ingrese Direcci√≥n");
        txtDireccionS.setBorder(null);
        txtDireccionS.setEnabled(false);
        txtDireccionS.setOpaque(false);
        txtDireccionS.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDireccionSFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDireccionSFocusLost(evt);
            }
        });
        txtDireccionS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtDireccionSMousePressed(evt);
            }
        });
        txtDireccionS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDireccionSActionPerformed(evt);
            }
        });
        txtDireccionS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDireccionSKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDireccionSKeyTyped(evt);
            }
        });
        getContentPane().add(txtDireccionS, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 490, 200, 30));

        botonCiudadS.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        botonCiudadS.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ciudad", "Tegucigalpa", "San Pedro Sula" }));
        botonCiudadS.setBorder(null);
        botonCiudadS.setEnabled(false);
        botonCiudadS.setOpaque(false);
        botonCiudadS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                botonCiudadSMousePressed(evt);
            }
        });
        botonCiudadS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCiudadSActionPerformed(evt);
            }
        });
        getContentPane().add(botonCiudadS, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 422, 200, 31));
        botonCiudadS.getAccessibleContext().setAccessibleName("");

        txtTelefonoS.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        txtTelefonoS.setForeground(new java.awt.Color(153, 153, 153));
        txtTelefonoS.setText("Ingrese Tel√©fono");
        txtTelefonoS.setBorder(null);
        txtTelefonoS.setEnabled(false);
        txtTelefonoS.setOpaque(false);
        txtTelefonoS.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtTelefonoSFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtTelefonoSFocusLost(evt);
            }
        });
        txtTelefonoS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtTelefonoSMousePressed(evt);
            }
        });
        txtTelefonoS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTelefonoSActionPerformed(evt);
            }
        });
        txtTelefonoS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTelefonoSKeyTyped(evt);
            }
        });
        getContentPane().add(txtTelefonoS, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 556, 200, 30));

        reporte.setBackground(new java.awt.Color(204, 204, 204));
        reporte.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        reporte.setForeground(new java.awt.Color(255, 255, 255));
        reporte.setIcon(new javax.swing.ImageIcon(getClass().getResource("/componentes/analitica.png"))); // NOI18N
        reporte.setText("REPORTE");
        reporte.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reporteMouseClicked(evt);
            }
        });
        getContentPane().add(reporte, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 50, 120, 40));
        getContentPane().add(botonSalirS, new org.netbeans.lib.awtextra.AbsoluteConstraints(1290, 530, 90, 40));

        txtIdS.setEnabled(false);
        getContentPane().add(txtIdS, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 310, 90, 20));

        usuario.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        usuario.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(usuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 680, 230, 20));

        jLabel3.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Usuario");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 700, 70, -1));

        botonRegresarS.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonRegresarS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonRegresarSMouseClicked(evt);
            }
        });
        getContentPane().add(botonRegresarS, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 130, 30));

        tablasucursal.setFont(new java.awt.Font("Georgia", 0, 18)); // NOI18N
        tablasucursal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nombre", "Ciudad", "Direcci√≥n", "Tel√©fono", "Estado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablasucursal.setRowHeight(30);
        tablasucursal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablasucursalMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablasucursal);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 300, 700, 370));

        BotonCajaS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonCajaSMouseClicked(evt);
            }
        });
        getContentPane().add(BotonCajaS, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 140, 140, 50));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/componentes/Pantalla Sucursales(4).png"))); // NOI18N
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 990, 720));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public boolean aprobado = false;

    private void txtBuscarSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscarSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBuscarSActionPerformed

    private void txtDireccionSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDireccionSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDireccionSActionPerformed

    private void txtNombreSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreSActionPerformed

    private void txtTelefonoSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTelefonoSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTelefonoSActionPerformed

    private void botonRegresarSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonRegresarSMouseClicked
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuPrincipal().setVisible(true);
            }
        });
        this.dispose();


    }//GEN-LAST:event_botonRegresarSMouseClicked

    private void botonAgregarSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonAgregarSMouseClicked
        Habillitar();
        botonGuardarS.isEnabled();
        botonCancelarS.isEnabled();

    }//GEN-LAST:event_botonAgregarSMouseClicked

    private void botonEditarSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonEditarSMouseClicked
        String editar = "BtnEditar";
        if (txtNombreS.getText().equals("Ingrese Nombre Sucursal") || txtTelefonoS.getText().equals("Ingrese Tel√©fono") || txtDireccionS.getText().equals("Ingrese Direcci√≥n")) {
            JOptionPane.showMessageDialog(null, "No se puede Actualizar datos vacios");
        } else {
            int Id = Integer.parseInt(txtIdS.getText());
            String Nombre = txtNombreS.getText();
            String Ciudad = botonCiudadS.getSelectedItem().toString();
            String Direccion = txtDireccionS.getText();
            String Telefono = txtTelefonoS.getText();
            String Estado = "";

            /*if (BotonActivoS.isSelected() == true) {
                Estado = "Activo";
            } else if (BotonInactivoS.isSelected() == true) {
                Estado = "Inactivo";
            }*/
            try {
                Connection con = Conexion.getConexion();
                PreparedStatement ps = con.prepareStatement("Update Sucursal set Nombre=?, Ciudad=?, Direccion=?, Telefono=? where Id_Sucursal =?");
                ps.setString(1, Nombre);
                ps.setString(2, Ciudad);
                ps.setString(3, Direccion);
                ps.setInt(4, Integer.valueOf(Telefono));
                ps.setInt(5, Id);
                ps.executeUpdate();
                JOptionPane.showMessageDialog(null, "Registro Actualizado");
                cargartabla();
                Limpiar();
                Inhabillitar();

            } catch (SQLException ex) {
                lo.LogBitacora("Error: No se pudo editar el dato " + "Excepci√≥n: " + ex + ". Origen: " + this.getClass().getSimpleName(), sucursales, editar);
                JOptionPane.showMessageDialog(null, ex.toString());
            }
        }
    }//GEN-LAST:event_botonEditarSMouseClicked

    private void botonGerenciaSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonGerenciaSMouseClicked
        GerenciaSucursal GS = new GerenciaSucursal();
        {
            GS.setVisible(true);
            dispose();
        }


    }//GEN-LAST:event_botonGerenciaSMouseClicked

    private void BotonActivoSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonActivoSActionPerformed
        String activo = "BtnActivo";
        String Id = txtIdS.getText();
        try {
            Connection con = Conexion.getConexion();
            PreparedStatement ps = con.prepareStatement("Update  Sucursal set Id_Estado=? where Id_Sucursal=?");
            ps.setInt(1, 1);
            ps.setString(2, Id);
            ps.executeUpdate();
            JOptionPane.showMessageDialog(null, "Registro Habilitado");
            cargartabla();
            Limpiar();
            Inhabillitar();

        } catch (SQLException ex) {
            lo.LogBitacora("Error: No se pudo actualizar el dato " + "Excepci√≥n: " + ex + ". Origen: " + this.getClass().getSimpleName(), sucursales, activo);
            JOptionPane.showMessageDialog(null, ex.toString());
        }
    }//GEN-LAST:event_BotonActivoSActionPerformed

    private void BotonInactivoSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonInactivoSActionPerformed
        String inactivo = "BtnInactivo";
        String Id = txtIdS.getText();
        try {
            Connection con = Conexion.getConexion();
            PreparedStatement ps = con.prepareStatement("Update  Sucursal set Id_Estado=? where Id_Sucursal=?");
            ps.setInt(1, 2);
            ps.setString(2, Id);
            ps.executeUpdate();
            JOptionPane.showMessageDialog(null, "Registro inhabilitao");
            cargartabla();
            Limpiar();
            Inhabillitar();

        } catch (SQLException ex) {
            lo.LogBitacora("Error: No se pudo actualizar el dato " + "Excepci√≥n: " + ex + ". Origen: " + this.getClass().getSimpleName(), sucursales, inactivo);
            JOptionPane.showMessageDialog(null, ex.toString());
        }
    }//GEN-LAST:event_BotonInactivoSActionPerformed

    private void botonGuardarSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonGuardarSMouseClicked
        // TODO add your handling code here:
        String guardar = "BtnGuardar";
        String Nombre = txtNombreS.getText();
        String Ciudad = botonCiudadS.getSelectedItem().toString();
        String Direccion = txtDireccionS.getText();
        String Telefono = txtTelefonoS.getText();
        if (txtNombreS.getText().equals("Ingrese Nombre Sucursal")) {
            JOptionPane.showMessageDialog(null, "Debe Ingresar Nombre Sucursal");
        } else if (botonCiudadS.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Debe Ingresar Ciudad");
        } else if (txtDireccionS.getText().equals("Ingrese Direcci√≥n")) {
            JOptionPane.showMessageDialog(null, "Debe Ingresar Direcci√≥n");
        } else if (txtTelefonoS.getText().equals("Ingrese Tel√©fono")) {
            JOptionPane.showMessageDialog(null, "Debe Ingresar Tel√©fono");
        } else {
            try {
                Connection con = Conexion.getConexion();
                PreparedStatement ps = con.prepareStatement("Insert into Sucursal (Nombre, Ciudad, Direccion, Telefono, Id_Estado) VALUES(?,?,?,?,?)");
                ps.setString(1, Nombre);
                ps.setString(2, Ciudad);
                ps.setString(3, Direccion);
                ps.setInt(4, Integer.valueOf(Telefono));
                ps.setInt(5, 1);
                ps.executeUpdate();
                JOptionPane.showMessageDialog(null, "Registro guardado");
                cargartabla();
                Limpiar();
                Inhabillitar();
                botonGuardarS.setEnabled(Boolean.FALSE);
                botonCancelarS.setEnabled(Boolean.FALSE);
            } catch (SQLException ex) {
                lo.LogBitacora("Error: No se pudo guardar el dato " + "Excepci√≥n: " + ex + ". Origen: " + this.getClass().getSimpleName(), sucursales, guardar);
                JOptionPane.showMessageDialog(null, ex.toString());
            }

        }


    }//GEN-LAST:event_botonGuardarSMouseClicked

    private void tablasucursalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablasucursalMouseClicked
        // TODO add your handling code here:
        String tablas = "TablaSucursales";
        try {
            int fila = tablasucursal.getSelectedRow();
            int id = Integer.parseInt(tablasucursal.getValueAt(fila, 0).toString());
            PreparedStatement ps;
            ResultSet rs;
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("SELECT  Nombre, Ciudad, Direccion, Telefono, Id_Estado FROM Sucursal WHERE Id_Sucursal=?");
            ps.setInt(1, id);
            rs = ps.executeQuery();

            while (rs.next()) {
                txtIdS.setText(String.valueOf(id));
                txtNombreS.setText(rs.getString("Nombre"));
                botonCiudadS.setSelectedItem(rs.getString("Ciudad"));
                txtDireccionS.setText(rs.getString("Direccion"));
                txtTelefonoS.setText(rs.getString("Telefono"));
                if (rs.getString("Id_Estado").equals("1")) {
                    BotonActivoS.setSelected(true);
                } else if (rs.getString("Id_Estado").equals("2")) {
                    BotonInactivoS.setSelected(true);
                }
            }

            BotonActivoS.setVisible(Boolean.TRUE);
            BotonInactivoS.setVisible(Boolean.TRUE);
            botonEditarS.isEnabled();
            botonCancelarS.isEnabled();
            botonGuardarS.enable(Boolean.FALSE);
            Habillitar();
        } catch (SQLException ex) {
            lo.LogBitacora("Error: No se pudo seleccionar la tabla " + "Excepci√≥n: " + ex + ". Origen: " + this.getClass().getSimpleName(), sucursales, tablas);
            JOptionPane.showMessageDialog(null, ex.toString());
        }

    }//GEN-LAST:event_tablasucursalMouseClicked

    private void botonCancelarSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonCancelarSMouseClicked

        Limpiar();
        Inhabillitar();
        botonEditarS.setEnabled(Boolean.FALSE);
        botonGuardarS.setEnabled(Boolean.FALSE);


    }//GEN-LAST:event_botonCancelarSMouseClicked

    private void txtNombreSMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtNombreSMousePressed
        if (txtNombreS.isEnabled() == false) {

            JOptionPane.showMessageDialog(null, "Dar Click en Agregar o Editar para utilizar el campo", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_txtNombreSMousePressed

    private void botonCiudadSMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonCiudadSMousePressed
        if (botonCiudadS.isEnabled() == false) {

            JOptionPane.showMessageDialog(null, "Dar Click en Agregar o Editar para utilizar el campo", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_botonCiudadSMousePressed

    private void txtDireccionSMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtDireccionSMousePressed
        if (txtDireccionS.isEnabled() == false) {

            JOptionPane.showMessageDialog(null, "Dar Click en Agregar o Editar para utilizar el campo", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_txtDireccionSMousePressed

    private void txtTelefonoSMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtTelefonoSMousePressed
        if (txtTelefonoS.isEnabled() == false) {

            JOptionPane.showMessageDialog(null, "Dar Click en Agregar o Editar para utilizar el campo", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_txtTelefonoSMousePressed

    private void txtBuscarSKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarSKeyPressed


    }//GEN-LAST:event_txtBuscarSKeyPressed

    public void validarNumerosLetras(java.awt.event.KeyEvent e) {
        if (e.getKeyChar() >= 33 && e.getKeyChar() <= 47
                || e.getKeyChar() >= 58 && e.getKeyChar() <= 64
                || e.getKeyChar() >= 91 && e.getKeyChar() <= 96
                || e.getKeyChar() >= 123 && e.getKeyChar() <= 129
                || e.getKeyChar() >= 145 && e.getKeyChar() <= 159
                || e.getKeyChar() >= 164 && e.getKeyChar() <= 238) {

            e.consume();
            JOptionPane.showMessageDialog(null, "Este campo no acepta caracteres especiales", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void txtBuscarSKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarSKeyTyped
        buscarData(txtBuscarS.getText());
        validarNumerosLetras(evt);
        if (txtBuscarS.getText().length() > 15) {
            JOptionPane.showMessageDialog(null, "El m√°ximo es de 15 caracteres para este campo", "Advertencia", JOptionPane.WARNING_MESSAGE);
            evt.consume();
        } else if (txtBuscarS.getText().length() > 0) {
            if (!txtBuscarS.getText().matches("^(?!.*([A-Za-z√±√ë√°√©√≠√≥√∫√Å√â√ç√ì√ö\\s])\\1{2})[A-Za-z√±√ë√°√©√≠√≥√∫√Å√â√ç√ì√ö\\s0-9]+$")) {
                evt.consume();
            }
        }
    }//GEN-LAST:event_txtBuscarSKeyTyped

    private void txtNombreSFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNombreSFocusGained
        if (txtNombreS.getText().equals("Ingrese Nombre Sucursal")) {
            txtNombreS.setText("");
            txtNombreS.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtNombreSFocusGained

    private void txtNombreSFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNombreSFocusLost
        if (txtNombreS.getText().equals("")) {
            txtNombreS.setText("Ingrese Nombre Sucursal");
            txtNombreS.setForeground(new Color(153, 153, 153));
        } else if (txtNombreS.getText().length() < 20) {
            JOptionPane.showMessageDialog(null, "El nombre debe tener al menos 20 caracteres", "Advertencia", JOptionPane.WARNING_MESSAGE);
        } else {
            verificarDatosExistentes(txtNombreS.getText(), "Nombre", "Sucursal", "Esta Sucursal ya existe en la base de datos");
        }
    }//GEN-LAST:event_txtNombreSFocusLost

    private void txtDireccionSFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDireccionSFocusGained
        if (txtDireccionS.getText().equals("Ingrese Direcci√≥n")) {
            txtDireccionS.setText("");
            txtDireccionS.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtDireccionSFocusGained

    private void txtDireccionSFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDireccionSFocusLost
        if (txtDireccionS.getText().equals("")) {
            txtDireccionS.setText("Ingrese Direcci√≥n");
            txtDireccionS.setForeground(new Color(153, 153, 153));
        } else if (txtDireccionS.getText().length() < 10) {
            JOptionPane.showMessageDialog(null, "La direcci√≥n debe contener al menos 10 caracteres", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_txtDireccionSFocusLost

    private void txtTelefonoSFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTelefonoSFocusGained
        if (txtTelefonoS.getText().equals("Ingrese Tel√©fono")) {
            txtTelefonoS.setText("");
            txtTelefonoS.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtTelefonoSFocusGained

    private void txtTelefonoSFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTelefonoSFocusLost
        if (txtTelefonoS.getText().equals("")) {
            txtTelefonoS.setText("Ingrese Tel√©fono");
            txtTelefonoS.setForeground(new Color(153, 153, 153));
        } else if (txtTelefonoS.getText().length() < 8) {
            JOptionPane.showMessageDialog(null, "El n√∫mero de tel√©fono debe contener 8 d√≠gitos", "Advertencia", JOptionPane.WARNING_MESSAGE);
        } else if (!txtTelefonoS.getText().matches("(^[9]{1}[0-9]{7}$)|(^[3]{1}[0-9]{7}$)|(^[7]{1}[0-9]{7}$)|(^[8]{1}[0-9]{7}$)")) {
            JOptionPane.showMessageDialog(null, "El n√∫mero de celular debe comenzar en 9, 3, 7 o 8", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            verificarDatosExistentes(txtTelefonoS.getText(), "Telefono", "Sucursal", "El  n√∫mero de telefono ya existe");

        }
    }//GEN-LAST:event_txtTelefonoSFocusLost

    private void txtBuscarSFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBuscarSFocusGained
        if (txtBuscarS.getText().equals("Buscar por ID o Nombre")) {
            txtBuscarS.setText("");
            txtBuscarS.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtBuscarSFocusGained

    private void txtBuscarSFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBuscarSFocusLost
        if (txtBuscarS.getText().equals("")) {
            txtBuscarS.setText("Buscar por ID o Nombre");
            txtBuscarS.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtBuscarSFocusLost

    public void validarNumeros(java.awt.event.KeyEvent e) {
        if (e.getKeyChar() >= 33 && e.getKeyChar() <= 47
                || e.getKeyChar() >= 58 && e.getKeyChar() <= 238) {
            e.consume();
            JOptionPane.showMessageDialog(null, "Este campo solo admite n√∫meros", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public boolean validarNumCelular(String cadena) {
        String patron = "^[23789]\\d{7}$";
        Pattern patt = Pattern.compile(patron);
        Matcher comparador = patt.matcher(cadena);
        if (comparador.matches()) {
            return true;
        } else {
            return false;
        }
    }

    private void txtTelefonoSKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTelefonoSKeyTyped
        validarNumeros(evt);
        if (txtTelefonoS.getText().length() > 7) {
            evt.consume();
        }
    }//GEN-LAST:event_txtTelefonoSKeyTyped

    public void verificarCaracteresRepetidos(String cadena) {
        String patron = "^(\\d|(([A-Za-z√±√ë√°√©√≠√≥√∫√Å√â√ç√ì√ö\\s])\\3?(?!\\3)))+$";
        Pattern patt = Pattern.compile(patron);
        Matcher comparador = patt.matcher(cadena);
        if (!comparador.matches()) {
            JOptionPane.showMessageDialog(null, "Tienes caracteres repetidos de forma incorrecta", "Advertencia", JOptionPane.WARNING_MESSAGE);
            aprobado = false;
        } else {
            aprobado = true;
        }
    }

    private void txtNombreSKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreSKeyTyped

        if (txtNombreS.getText().length() > 25) {
            JOptionPane.showMessageDialog(null, "El m√°ximo es de 25 caracteres para este campo", "Advertencia", JOptionPane.WARNING_MESSAGE);
            evt.consume();
        } else if (txtNombreS.getText().length() > 0) {
            if (!txtNombreS.getText().matches("^(?!.*([A-Za-z√±√ë√°√©√≠√≥√∫√Å√â√ç√ì√ö\\s])\\1{2})[A-Za-z√±√ë√°√©√≠√≥√∫√Å√â√ç√ì√ö\\s]+$")) {
                JOptionPane.showMessageDialog(null, "No repitas caracteres de forma incorrecta", "Error", JOptionPane.ERROR_MESSAGE);

                evt.consume();
                txtNombreS.setText("");
                if (txtNombreS.getText().equals("")) {
                    txtNombreS.setText("Ingrese Nombre Sucursal");
                    txtNombreS.setForeground(new Color(153, 153, 153));
                }

            }
            /**
             * if (nuevo.isEmpty()) { JOptionPane.showMessageDialog(null, "NO
             * ESPACIOS EN BLANCO", "Advertencia", JOptionPane.WARNING_MESSAGE);
             * evt.consume();
             */

        }
    }//GEN-LAST:event_txtNombreSKeyTyped

    private void txtNombreSKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreSKeyReleased

    }//GEN-LAST:event_txtNombreSKeyReleased

    private void txtDireccionSKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDireccionSKeyTyped
        if (txtDireccionS.getText().length() > 20) {
            JOptionPane.showMessageDialog(null, "El m√°ximo es de 20 caracteres para este campo", "Advertencia", JOptionPane.WARNING_MESSAGE);
            evt.consume();
        } else if (txtDireccionS.getText().length() > 0) {
            if (!txtDireccionS.getText().matches("^(?!.*([A-Za-z√±√ë√°√©√≠√≥√∫√Å√â√ç√ì√ö\\s])\\1{2})[A-Za-z√±√ë√°√©√≠√≥√∫√Å√â√ç√ì√ö\\s0-9]+$")) {
                JOptionPane.showMessageDialog(null, "No repitas caracteres de forma incorrecta", "Error", JOptionPane.ERROR_MESSAGE);
                evt.consume();
            }
        }
    }//GEN-LAST:event_txtDireccionSKeyTyped

    private void txtDireccionSKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDireccionSKeyReleased

    }//GEN-LAST:event_txtDireccionSKeyReleased

    private void botonCiudadSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCiudadSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botonCiudadSActionPerformed

    private void BotonCajaSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonCajaSMouseClicked
        Caja GS = new Caja();
        {
            GS.setVisible(true);
            dispose();
        }
    }//GEN-LAST:event_BotonCajaSMouseClicked

    private void reporteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reporteMouseClicked
        JasperReport reporte;
        HashMap hm = new HashMap();
        hm.put("Usuario", usuario.getText());
        
        try {
            Connection con = Conexion.getConexion();
            reporte = JasperCompileManager.compileReport("src/Reportes/ReporteSucursal.jrxml");
            JasperPrint jp = JasperFillManager.fillReport(reporte, hm, con);
            JasperViewer.viewReport(jp, true);
            ReportView view = new ReportView(jp, false);
            view.setVisible(true);
        } catch (JRException ex) {
            Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_reporteMouseClicked

    private void cargartabla() {
        DefaultTableModel modeloTabla = (DefaultTableModel) tablasucursal.getModel();
        modeloTabla.setRowCount(0);

        PreparedStatement ps;
        ResultSet rs;
        ResultSetMetaData rsmd;
        int columnas;
        String cargart = "CargarTabla";

        try {
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("SELECT S.Id_Sucursal, S.Nombre, S.Ciudad, S.Direccion, S.Telefono, E.Estado\n"
                    + "FROM Sucursal AS S\n"
                    + "INNER JOIN Estado AS E ON S.Id_Estado = E.Id_Estado\n"
                    + "ORDER BY S.Id_Sucursal");
            rs = ps.executeQuery();
            rsmd = rs.getMetaData();
            columnas = rsmd.getColumnCount();

            while (rs.next()) {
                Object[] fila = new Object[columnas];
                for (int indice = 0; indice < columnas; indice++) {
                    fila[indice] = rs.getObject(indice + 1);
                }
                modeloTabla.addRow(fila);
            }

            // JOptionPane.showMessageDialog(null, "Registro guardado");
        } catch (SQLException ex) {
            lo.LogBitacora("Error: No se pudo cargar la tabla " + "Excepci√≥n: " + ex + ". Origen: " + this.getClass().getSimpleName(), sucursales,cargart);
            JOptionPane.showMessageDialog(null, ex.toString());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Sucursales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Sucursales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Sucursales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Sucursales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Sucursales().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton BotonActivoS;
    private javax.swing.JLabel BotonCajaS;
    private javax.swing.JRadioButton BotonInactivoS;
    private javax.swing.JLabel botonAgregarS;
    private javax.swing.JLabel botonBuscarS;
    private javax.swing.JLabel botonCancelarS;
    private javax.swing.JComboBox<String> botonCiudadS;
    private javax.swing.JLabel botonEditarS;
    private javax.swing.JLabel botonGerenciaS;
    private javax.swing.JLabel botonGuardarS;
    private javax.swing.JLabel botonRegresarS;
    private javax.swing.JLabel botonSalirS;
    private javax.swing.ButtonGroup grupoBotonSucursal;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel reporte;
    private javax.swing.JTable tablasucursal;
    private javax.swing.JTextField txtBuscarS;
    private javax.swing.JTextField txtDireccionS;
    private javax.swing.JLabel txtIdS;
    private javax.swing.JTextField txtNombreS;
    private javax.swing.JTextField txtTelefonoS;
    private javax.swing.JLabel usuario;
    // End of variables declaration//GEN-END:variables

    private void Limpiar() {
        //row new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        txtIdS.setText("");

        txtNombreS.setText("");
        if (txtNombreS.getText().equals("")) {
            txtNombreS.setText("Ingrese Nombre Sucursal");
            txtNombreS.setForeground(new Color(153, 153, 153));
        }
        botonCiudadS.setSelectedIndex(0);

        txtDireccionS.setText("");
        if (txtDireccionS.getText().equals("")) {
            txtDireccionS.setText("Ingrese Direcci√≥n");
            txtDireccionS.setForeground(new Color(153, 153, 153));
        }

        txtTelefonoS.setText("");
        if (txtTelefonoS.getText().equals("")) {
            txtTelefonoS.setText("Ingrese Tel√©fono");
            txtTelefonoS.setForeground(new Color(153, 153, 153));
        }

        BotonActivoS.setVisible(Boolean.FALSE);
        BotonInactivoS.setVisible(Boolean.FALSE);
    }

    void buscarData(String valor) {
        String buscar ="Buscar";
        String[] titulos = {"ID", "Nombre", "Ciudad", "Direccion", "Telefono", "Estado"};
        String[] registros = new String[13];
        String sql = "SELECT S.Id_Sucursal,S.Nombre,S.Ciudad,S.Direccion, S.Telefono,E.Estado\n"
                + "FROM Sucursal as S\n"
                + "Inner Join   Estado as E on S.Id_Estado=E.Id_Estado \n"
                + "WHERE CONCAT (S.Id_Sucursal, ' ', S.Nombre) LIKE '%" + valor + "%'\n"
                + "ORDER BY S.Id_Sucursal";

        DefaultTableModel model = new DefaultTableModel(null, titulos);
        Connection con = Conexion.getConexion();

        try {

            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);

            while (rs.next()) {
                registros[0] = rs.getString("Id_Sucursal");
                registros[1] = rs.getString("Nombre");
                registros[2] = rs.getString("Ciudad");
                registros[3] = rs.getString("Direccion");
                registros[4] = rs.getString("Telefono");
                registros[5] = rs.getString("Estado");

                model.addRow(registros);
            }

            tablasucursal.setModel(model);
            // anchoColumnas();
        } catch (SQLException ex) {
            lo.LogBitacora("Error: No se pudo buscar el dato " + "Excepci√≥n: " + ex + ". Origen: " + this.getClass().getSimpleName(), sucursales, buscar);
            Logger.getLogger(Sucursales.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void Habillitar() {
        txtNombreS.enable(Boolean.TRUE);
        botonCiudadS.enable(Boolean.TRUE);
        txtDireccionS.enable(Boolean.TRUE);
        txtTelefonoS.enable(Boolean.TRUE);
    }

    private void Inhabillitar() {
        txtNombreS.enable(Boolean.FALSE);
        botonCiudadS.enable(Boolean.FALSE);
        txtDireccionS.enable(Boolean.FALSE);
        txtTelefonoS.enable(Boolean.FALSE);

    }

    private static class nuevo {

        private static boolean isEmpty() {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        public nuevo() {
        }
    }

}
