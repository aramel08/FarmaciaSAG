/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Formularios_SAG;

import Conexion.Conexion;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import sun.security.util.Length;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Allisson Castro
 */
public class Factura extends javax.swing.JFrame {

    String[] titulos = {"ID", "Restricción", "Verificación"};
    String[] registros = new String[13];
    boolean ColumnasEditables[] = {false, false, true};
    Class tipo[] = new Class[]{java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class};
    DefaultTableModel model = new DefaultTableModel() {
        public boolean isCellEditable(int row, int col) {
            return ColumnasEditables[col];
        }

        public Class getColumnClass(int index) {
            return tipo[index];
        }
    };
    String factura;
    int idcai;
    int idcliente = 1;
    Double Impuesto = 0.00;
    Double Subtotal = 0.00;
    Double Descuento = 0.00;
    Double Total = 0.00;
    Double descuentar = 0.00;
    public static String regresar = "";
    boolean agrega=false;
    public Factura() {
        initComponents();
        CargarTP ctp = new Factura.CargarTP();
        ComboTipoPago.setModel(ctp.getvalues());
        CargarProductor cp = new Factura.CargarProductor();
        ComboProducto.setModel(cp.getvalues());
        CargarTipoDescuento ctd = new Factura.CargarTipoDescuento();
        ComboDescuentoF.setModel(ctd.getvalues());
        CargarTipoImpuesto cti = new Factura.CargarTipoImpuesto();
        ComboTipoImpuesto.setModel(cti.getvalues());
        model.setColumnIdentifiers(titulos);
        tablacompra.setModel(model);
        AutoCompleteDecorator.decorate(ComboProducto);
        cargarCAI();
        txtAgregarNombre.setText("Consumidor Final");
        Date min = new Date();
        Fecha.setSelectableDateRange(min, min);
        Fecha.setDate(min);
        Calendar Cal = Calendar.getInstance();
        String fec = Cal.get(Cal.HOUR_OF_DAY) + ":" + Cal.get(Cal.MINUTE) + ":" + Cal.get(Cal.SECOND);
        txtHoraF.setText(fec);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Fecha = new com.toedter.calendar.JDateChooser();
        txtTotalaPagarP = new javax.swing.JTextField();
        txtISVP = new javax.swing.JTextField();
        txtDescP = new javax.swing.JTextField();
        Ncaja = new javax.swing.JLabel();
        txtSubTotalP = new javax.swing.JTextField();
        txtBuscarP = new javax.swing.JTextField();
        txtImpuesto = new javax.swing.JTextField();
        txtDescuentoP = new javax.swing.JTextField();
        ComboDescuento = new javax.swing.JComboBox<>();
        ComboTipoImpuesto = new javax.swing.JComboBox<>();
        ComboProducto = new javax.swing.JComboBox<>();
        txtStockP = new javax.swing.JTextField();
        txtPrecioUnitario = new javax.swing.JTextField();
        txtCantidadP = new javax.swing.JTextField();
        BotonEliminarP = new javax.swing.JLabel();
        BotonEditarP = new javax.swing.JLabel();
        BotonAgregarP = new javax.swing.JLabel();
        buscarC = new javax.swing.JLabel();
        ComboDescuentoF = new javax.swing.JComboBox<>();
        txtNumeroFactura = new javax.swing.JTextField();
        ComboTipoPago = new javax.swing.JComboBox<>();
        txtDescuento = new javax.swing.JTextField();
        idFactura = new javax.swing.JLabel();
        Agregar = new javax.swing.JLabel();
        txtAgregarNombre = new javax.swing.JTextField();
        txtBuscarC = new javax.swing.JTextField();
        txtHoraF = new javax.swing.JTextField();
        txtCaiF = new javax.swing.JTextField();
        btnDescuentoT = new javax.swing.JLabel();
        Usuario = new javax.swing.JLabel();
        BotonEliminarF = new javax.swing.JLabel();
        BotonEditarF = new javax.swing.JLabel();
        BotonRegresar = new javax.swing.JLabel();
        txtIdProducto = new javax.swing.JLabel();
        BotonGuardarF = new javax.swing.JLabel();
        btncalimpuesto = new javax.swing.JLabel();
        btncaldescuento = new javax.swing.JLabel();
        idDescuento = new javax.swing.JLabel();
        aplicardescuento = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabladetalle = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablacompra = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(Fecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 200, 190, 30));

        txtTotalaPagarP.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        txtTotalaPagarP.setForeground(new java.awt.Color(153, 153, 153));
        txtTotalaPagarP.setText("Ingrese Total a Pagar");
        txtTotalaPagarP.setBorder(null);
        txtTotalaPagarP.setOpaque(false);
        txtTotalaPagarP.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtTotalaPagarPFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtTotalaPagarPFocusLost(evt);
            }
        });
        txtTotalaPagarP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtTotalaPagarPMousePressed(evt);
            }
        });
        getContentPane().add(txtTotalaPagarP, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 665, 140, 30));

        txtISVP.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        txtISVP.setForeground(new java.awt.Color(153, 153, 153));
        txtISVP.setText("Ingrese  ISV");
        txtISVP.setBorder(null);
        txtISVP.setOpaque(false);
        txtISVP.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtISVPFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtISVPFocusLost(evt);
            }
        });
        txtISVP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtISVPMousePressed(evt);
            }
        });
        getContentPane().add(txtISVP, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 624, 140, 30));

        txtDescP.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        txtDescP.setForeground(new java.awt.Color(153, 153, 153));
        txtDescP.setText("Ingrese Descuento");
        txtDescP.setBorder(null);
        txtDescP.setOpaque(false);
        txtDescP.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDescPFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDescPFocusLost(evt);
            }
        });
        txtDescP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtDescPMousePressed(evt);
            }
        });
        txtDescP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDescPActionPerformed(evt);
            }
        });
        getContentPane().add(txtDescP, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 664, 140, 30));
        getContentPane().add(Ncaja, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 90, 50, 20));

        txtSubTotalP.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        txtSubTotalP.setForeground(new java.awt.Color(153, 153, 153));
        txtSubTotalP.setText("Ingrese SubTotal");
        txtSubTotalP.setBorder(null);
        txtSubTotalP.setOpaque(false);
        txtSubTotalP.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSubTotalPFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSubTotalPFocusLost(evt);
            }
        });
        txtSubTotalP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtSubTotalPMousePressed(evt);
            }
        });
        getContentPane().add(txtSubTotalP, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 624, 140, 30));

        txtBuscarP.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        txtBuscarP.setForeground(new java.awt.Color(153, 153, 153));
        txtBuscarP.setText("Buscar Por Producto,Cantida o Precio Unitario");
        txtBuscarP.setBorder(null);
        txtBuscarP.setOpaque(false);
        txtBuscarP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBuscarPKeyTyped(evt);
            }
        });
        getContentPane().add(txtBuscarP, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 384, 270, 30));

        txtImpuesto.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        txtImpuesto.setForeground(new java.awt.Color(153, 153, 153));
        txtImpuesto.setText("Ingrese ISV");
        txtImpuesto.setBorder(null);
        txtImpuesto.setEnabled(false);
        txtImpuesto.setOpaque(false);
        txtImpuesto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtImpuestoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtImpuestoFocusLost(evt);
            }
        });
        txtImpuesto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtImpuestoMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtImpuestoMousePressed(evt);
            }
        });
        txtImpuesto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtImpuestoActionPerformed(evt);
            }
        });
        txtImpuesto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtImpuestoKeyReleased(evt);
            }
        });
        getContentPane().add(txtImpuesto, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 470, 180, 30));

        txtDescuentoP.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        txtDescuentoP.setForeground(new java.awt.Color(153, 153, 153));
        txtDescuentoP.setText("0.00");
        txtDescuentoP.setBorder(null);
        txtDescuentoP.setEnabled(false);
        txtDescuentoP.setOpaque(false);
        txtDescuentoP.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDescuentoPFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDescuentoPFocusLost(evt);
            }
        });
        txtDescuentoP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtDescuentoPMousePressed(evt);
            }
        });
        getContentPane().add(txtDescuentoP, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 514, 180, 30));

        ComboDescuento.setForeground(new java.awt.Color(153, 153, 153));
        ComboDescuento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Descuento", "Descuento 5%" }));
        ComboDescuento.setBorder(null);
        ComboDescuento.setOpaque(false);
        ComboDescuento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboDescuentoItemStateChanged(evt);
            }
        });
        getContentPane().add(ComboDescuento, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 510, 190, 30));

        ComboTipoImpuesto.setForeground(new java.awt.Color(153, 153, 153));
        ComboTipoImpuesto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Tipo ISV", " ", " " }));
        ComboTipoImpuesto.setBorder(null);
        ComboTipoImpuesto.setOpaque(false);
        ComboTipoImpuesto.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboTipoImpuestoItemStateChanged(evt);
            }
        });
        getContentPane().add(ComboTipoImpuesto, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 470, 190, 30));

        ComboProducto.setForeground(new java.awt.Color(153, 153, 153));
        ComboProducto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Producto" }));
        ComboProducto.setBorder(null);
        ComboProducto.setOpaque(false);
        ComboProducto.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboProductoItemStateChanged(evt);
            }
        });
        ComboProducto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ComboProductoMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ComboProductoMousePressed(evt);
            }
        });
        ComboProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboProductoActionPerformed(evt);
            }
        });
        getContentPane().add(ComboProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 390, 190, -1));

        txtStockP.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        txtStockP.setForeground(new java.awt.Color(153, 153, 153));
        txtStockP.setText("Ingrese Stock");
        txtStockP.setBorder(null);
        txtStockP.setEnabled(false);
        txtStockP.setOpaque(false);
        txtStockP.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtStockPFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtStockPFocusLost(evt);
            }
        });
        txtStockP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtStockPMousePressed(evt);
            }
        });
        txtStockP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtStockPKeyTyped(evt);
            }
        });
        getContentPane().add(txtStockP, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 430, 180, 30));

        txtPrecioUnitario.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        txtPrecioUnitario.setForeground(new java.awt.Color(153, 153, 153));
        txtPrecioUnitario.setText("Ingrese Precio Unitario");
        txtPrecioUnitario.setBorder(null);
        txtPrecioUnitario.setEnabled(false);
        txtPrecioUnitario.setOpaque(false);
        txtPrecioUnitario.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPrecioUnitarioFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPrecioUnitarioFocusLost(evt);
            }
        });
        txtPrecioUnitario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtPrecioUnitarioMousePressed(evt);
            }
        });
        txtPrecioUnitario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPrecioUnitarioKeyTyped(evt);
            }
        });
        getContentPane().add(txtPrecioUnitario, new org.netbeans.lib.awtextra.AbsoluteConstraints(273, 384, 190, 30));

        txtCantidadP.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        txtCantidadP.setForeground(new java.awt.Color(153, 153, 153));
        txtCantidadP.setText("Ingrese Cantidad");
        txtCantidadP.setBorder(null);
        txtCantidadP.setEnabled(false);
        txtCantidadP.setOpaque(false);
        txtCantidadP.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCantidadPFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCantidadPFocusLost(evt);
            }
        });
        txtCantidadP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtCantidadPMousePressed(evt);
            }
        });
        txtCantidadP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCantidadPKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCantidadPKeyTyped(evt);
            }
        });
        getContentPane().add(txtCantidadP, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 430, 180, 30));
        getContentPane().add(BotonEliminarP, new org.netbeans.lib.awtextra.AbsoluteConstraints(501, 326, 130, 40));
        getContentPane().add(BotonEditarP, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 330, 130, 40));

        BotonAgregarP.setEnabled(false);
        BotonAgregarP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonAgregarPMouseClicked(evt);
            }
        });
        getContentPane().add(BotonAgregarP, new org.netbeans.lib.awtextra.AbsoluteConstraints(221, 330, 130, 30));

        buscarC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buscarCMouseClicked(evt);
            }
        });
        getContentPane().add(buscarC, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 150, 30, 30));

        ComboDescuentoF.setForeground(new java.awt.Color(153, 153, 153));
        ComboDescuentoF.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Descuento", " " }));
        ComboDescuentoF.setEnabled(false);
        ComboDescuentoF.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboDescuentoFItemStateChanged(evt);
            }
        });
        getContentPane().add(ComboDescuentoF, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 200, 190, 30));

        txtNumeroFactura.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        txtNumeroFactura.setForeground(new java.awt.Color(153, 153, 153));
        txtNumeroFactura.setText("Ingrese Número Factura");
        txtNumeroFactura.setBorder(null);
        txtNumeroFactura.setEnabled(false);
        txtNumeroFactura.setOpaque(false);
        txtNumeroFactura.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNumeroFacturaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNumeroFacturaFocusLost(evt);
            }
        });
        txtNumeroFactura.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtNumeroFacturaMousePressed(evt);
            }
        });
        txtNumeroFactura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumeroFacturaActionPerformed(evt);
            }
        });
        txtNumeroFactura.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNumeroFacturaKeyPressed(evt);
            }
        });
        getContentPane().add(txtNumeroFactura, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 255, 190, 30));

        ComboTipoPago.setForeground(new java.awt.Color(153, 153, 153));
        ComboTipoPago.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Tipo de Pago" }));
        getContentPane().add(ComboTipoPago, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 255, 190, 30));

        txtDescuento.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        txtDescuento.setForeground(new java.awt.Color(153, 153, 153));
        txtDescuento.setText("Ingrese  Descuento");
        txtDescuento.setBorder(null);
        txtDescuento.setEnabled(false);
        txtDescuento.setOpaque(false);
        txtDescuento.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentRemoved(java.awt.event.ContainerEvent evt) {
                txtDescuentoComponentRemoved(evt);
            }
        });
        txtDescuento.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDescuentoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDescuentoFocusLost(evt);
            }
        });
        txtDescuento.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtDescuentoMousePressed(evt);
            }
        });
        txtDescuento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDescuentoKeyTyped(evt);
            }
        });
        getContentPane().add(txtDescuento, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 200, 190, 30));
        getContentPane().add(idFactura, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 300, 30, 20));

        Agregar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AgregarMouseClicked(evt);
            }
        });
        getContentPane().add(Agregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 150, 30, 20));

        txtAgregarNombre.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        txtAgregarNombre.setForeground(new java.awt.Color(153, 153, 153));
        txtAgregarNombre.setText("Ingrese Nombre");
        txtAgregarNombre.setBorder(null);
        txtAgregarNombre.setOpaque(false);
        txtAgregarNombre.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtAgregarNombreFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAgregarNombreFocusLost(evt);
            }
        });
        txtAgregarNombre.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtAgregarNombreMousePressed(evt);
            }
        });
        txtAgregarNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAgregarNombreActionPerformed(evt);
            }
        });
        getContentPane().add(txtAgregarNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(535, 150, 211, 25));

        txtBuscarC.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        txtBuscarC.setForeground(new java.awt.Color(153, 153, 153));
        txtBuscarC.setText("Buscar Cliente");
        txtBuscarC.setBorder(null);
        txtBuscarC.setOpaque(false);
        txtBuscarC.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtBuscarCFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBuscarCFocusLost(evt);
            }
        });
        txtBuscarC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtBuscarCMousePressed(evt);
            }
        });
        txtBuscarC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscarCActionPerformed(evt);
            }
        });
        txtBuscarC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBuscarCKeyTyped(evt);
            }
        });
        getContentPane().add(txtBuscarC, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 150, 190, 26));

        txtHoraF.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        txtHoraF.setForeground(new java.awt.Color(153, 153, 153));
        txtHoraF.setText("  Ingrese Hora");
        txtHoraF.setBorder(null);
        txtHoraF.setOpaque(false);
        txtHoraF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtHoraFFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtHoraFFocusLost(evt);
            }
        });
        txtHoraF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtHoraFMousePressed(evt);
            }
        });
        txtHoraF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHoraFActionPerformed(evt);
            }
        });
        txtHoraF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtHoraFKeyTyped(evt);
            }
        });
        getContentPane().add(txtHoraF, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 255, 190, 30));

        txtCaiF.setEditable(false);
        txtCaiF.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        txtCaiF.setForeground(new java.awt.Color(153, 153, 153));
        txtCaiF.setText("Ingrese CAI");
        txtCaiF.setBorder(null);
        txtCaiF.setOpaque(false);
        txtCaiF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCaiFFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCaiFFocusLost(evt);
            }
        });
        txtCaiF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCaiFKeyTyped(evt);
            }
        });
        getContentPane().add(txtCaiF, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 150, 190, 30));

        btnDescuentoT.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDescuentoTMouseClicked(evt);
            }
        });
        getContentPane().add(btnDescuentoT, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 200, 20, 30));
        getContentPane().add(Usuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 90, 50, 20));

        BotonEliminarF.setEnabled(false);
        getContentPane().add(BotonEliminarF, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 250, 120, 40));

        BotonEditarF.setEnabled(false);
        getContentPane().add(BotonEditarF, new org.netbeans.lib.awtextra.AbsoluteConstraints(831, 190, 140, 50));

        BotonRegresar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonRegresarMouseClicked(evt);
            }
        });
        getContentPane().add(BotonRegresar, new org.netbeans.lib.awtextra.AbsoluteConstraints(31, 26, 130, 40));
        getContentPane().add(txtIdProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 320, 40, 20));

        BotonGuardarF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonGuardarFMouseClicked(evt);
            }
        });
        getContentPane().add(BotonGuardarF, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 140, 130, 40));

        btncalimpuesto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btncalimpuestoMouseClicked(evt);
            }
        });
        getContentPane().add(btncalimpuesto, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 470, 30, 30));

        btncaldescuento.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btncaldescuentoMouseClicked(evt);
            }
        });
        getContentPane().add(btncaldescuento, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 510, 30, 30));
        getContentPane().add(idDescuento, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 340, 50, 20));

        aplicardescuento.setText("Aplicar");
        aplicardescuento.setEnabled(false);
        aplicardescuento.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                aplicardescuentoMouseClicked(evt);
            }
        });
        getContentPane().add(aplicardescuento, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 210, -1, -1));

        tabladetalle.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Id_Detalle Factura", "Numero Factura", "Producto", "Precio Unitario", "Cantidad", "ISV", "Descuento"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabladetalle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabladetalleMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tabladetalle);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 440, 470, 100));

        tablacompra.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Id Restricción", "Restricción", "Verificación"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablacompra.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablacompraMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablacompra);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 590, 470, 100));

        jLabel1.setForeground(new java.awt.Color(153, 153, 153));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/componentes/Pantalla Factura.png"))); // NOI18N
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel1MousePressed(evt);
            }
        });
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 710));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    void verificarDatosExistentes(String campo, String columna, String tabla, String mensaje) {
        Conexion cc = new Conexion();
        Connection cn = cc.getConexion();
        String sql = "SELECT " + columna + " FROM " + tabla + " WHERE " + columna + " = '" + campo + "'";

        try {
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);

            if (rs.next()) {
                if (rs.getString(columna).equals(campo)) {
                    JOptionPane.showMessageDialog(null, mensaje, "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No se pudo verificar\n" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    private void txtHoraFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHoraFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHoraFActionPerformed

    private void txtAgregarNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAgregarNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAgregarNombreActionPerformed

    private void txtNumeroFacturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumeroFacturaActionPerformed
        //
    }//GEN-LAST:event_txtNumeroFacturaActionPerformed

    private void txtBuscarCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscarCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBuscarCActionPerformed
    private void validarNumeros(KeyEvent e) {
        if (e.getKeyChar() >= 33 && e.getKeyChar() <= 47
                || e.getKeyChar() >= 58 && e.getKeyChar() <= 238) {
            e.consume();
            JOptionPane.showMessageDialog(null, "Este campo solo admite números", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    private void txtCaiFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCaiFFocusGained
        if (txtCaiF.getText().equals("Ingrese CAI")) {
            txtCaiF.setText("");
            txtCaiF.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtCaiFFocusGained

    private void txtCaiFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCaiFFocusLost
        if (txtCaiF.getText().equals("")) {
            txtCaiF.setText("Ingrese CAI");
            txtCaiF.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtCaiFFocusLost

    private void txtHoraFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtHoraFFocusGained
        if (txtHoraF.getText().equals("Ingrese Hora")) {
            txtHoraF.setText("");
            txtHoraF.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtHoraFFocusGained

    private void txtHoraFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtHoraFFocusLost
        if (txtHoraF.getText().equals("")) {
            txtHoraF.setText("Ingrese Hora");
            txtHoraF.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtHoraFFocusLost

    private void txtBuscarCFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBuscarCFocusGained
        if (txtBuscarC.getText().equals("Buscar Cliente")) {
            txtBuscarC.setText("");
            txtBuscarC.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtBuscarCFocusGained

    private void txtBuscarCFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBuscarCFocusLost
        if (txtBuscarC.getText().equals("")) {
            txtBuscarC.setText("Buscar Cliente");
            txtBuscarC.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtBuscarCFocusLost

    private void txtDescuentoComponentRemoved(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_txtDescuentoComponentRemoved
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDescuentoComponentRemoved

    private void txtAgregarNombreFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAgregarNombreFocusGained
        if (txtAgregarNombre.getText().equals("Ingrese Nombre")) {
            txtAgregarNombre.setText("");
            txtAgregarNombre.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtAgregarNombreFocusGained

    private void txtAgregarNombreFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAgregarNombreFocusLost
        if (txtAgregarNombre.getText().equals("")) {
            txtAgregarNombre.setText("Ingrese Nombre");
            txtAgregarNombre.setForeground(new Color(153, 153, 153));
        } else if (!txtAgregarNombre.getText().isEmpty()) {
            if (!txtAgregarNombre.getText().matches("^[A-Z-ÁÉÍÓÚÑ]{1}[a-z-áéíóúñ]+$")) {
                JOptionPane.showMessageDialog(null, "Debes escribir un nombre comenzando en mayúscula. No utilice espacios", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_txtAgregarNombreFocusLost

    private void txtDescuentoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDescuentoFocusGained
        if (txtDescuento.getText().equals("Ingrese Descuento")) {
            txtDescuento.setText("");
            txtDescuento.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtDescuentoFocusGained

    private void txtDescuentoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDescuentoFocusLost
        if (txtDescuento.getText().equals("")) {
            txtDescuento.setText("Ingrese Descuento");
            txtDescuento.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtDescuentoFocusLost

    private void txtNumeroFacturaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNumeroFacturaFocusGained
        if (txtNumeroFactura.getText().equals("Ingrese Nombre Producto")) {
            txtNumeroFactura.setText("");
            txtNumeroFactura.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtNumeroFacturaFocusGained

    private void txtNumeroFacturaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNumeroFacturaFocusLost
        if (txtNumeroFactura.getText().equals("")) {
            txtNumeroFactura.setText("Ingrese Descripción Producto");
            txtNumeroFactura.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtNumeroFacturaFocusLost

    private void txtCantidadPFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCantidadPFocusGained
        if (txtCantidadP.getText().equals("Ingrese Cantidad")) {
            txtCantidadP.setText("");
            txtCantidadP.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtCantidadPFocusGained

    private void txtCantidadPFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCantidadPFocusLost
        if (txtCantidadP.getText().equals("")) {
            txtCantidadP.setText("Ingrese Cantidad");
            txtCantidadP.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtCantidadPFocusLost

    private void txtPrecioUnitarioFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPrecioUnitarioFocusGained
        if (txtPrecioUnitario.getText().equals("Ingrese Precio Unitario")) {
            txtPrecioUnitario.setText("");
            txtPrecioUnitario.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtPrecioUnitarioFocusGained

    private void txtPrecioUnitarioFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPrecioUnitarioFocusLost
        if (txtPrecioUnitario.getText().equals("")) {
            txtPrecioUnitario.setText("Ingrese Precio Unitario");
            txtPrecioUnitario.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtPrecioUnitarioFocusLost

    private void txtStockPFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtStockPFocusGained
        if (txtStockP.getText().equals("Ingrese Stock")) {
            txtStockP.setText("");
            txtStockP.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtStockPFocusGained

    private void txtStockPFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtStockPFocusLost
        if (txtStockP.getText().equals("")) {
            txtStockP.setText("Ingrese Stock");
            txtStockP.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtStockPFocusLost

    private void txtImpuestoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtImpuestoFocusGained
        if (txtImpuesto.getText().equals("Ingrese ISV")) {
            txtImpuesto.setText("");
            txtImpuesto.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtImpuestoFocusGained

    private void txtImpuestoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtImpuestoFocusLost
        if (txtImpuesto.getText().equals("")) {
            txtImpuesto.setText("Ingrese ISV");
            txtImpuesto.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtImpuestoFocusLost

    private void txtDescuentoPFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDescuentoPFocusGained
        if (txtDescuentoP.getText().equals("Ingrese Descuento")) {
            txtDescuentoP.setText("");
            txtDescuentoP.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtDescuentoPFocusGained

    private void txtDescuentoPFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDescuentoPFocusLost
        if (txtDescuentoP.getText().equals("")) {
            txtImpuesto.setText("Ingrese Descuento");
            txtImpuesto.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtDescuentoPFocusLost

    private void txtSubTotalPFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSubTotalPFocusGained
        if (txtDescuentoP.getText().equals("Ingrese SubTotal")) {
            txtDescuentoP.setText("");
            txtDescuentoP.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtSubTotalPFocusGained

    private void txtSubTotalPFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSubTotalPFocusLost
        if (txtDescuentoP.getText().equals("")) {
            txtImpuesto.setText("Ingrese SubTotal");
            txtImpuesto.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtSubTotalPFocusLost

    private void txtDescPFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDescPFocusGained
        if (txtDescuentoP.getText().equals("Ingrese Descuento")) {
            txtDescuentoP.setText("");
            txtDescuentoP.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtDescPFocusGained

    private void txtDescPFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDescPFocusLost
        if (txtDescuentoP.getText().equals("")) {
            txtImpuesto.setText("Ingrese Descuento");
            txtImpuesto.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtDescPFocusLost

    private void txtISVPFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtISVPFocusGained
        if (txtISVP.getText().equals("Ingrese ISV")) {
            txtISVP.setText("");
            txtISVP.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtISVPFocusGained

    private void txtISVPFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtISVPFocusLost
        if (txtISVP.getText().equals("")) {
            txtISVP.setText("Ingrese ISV");
            txtISVP.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtISVPFocusLost

    private void txtTotalaPagarPFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTotalaPagarPFocusGained
        if (txtTotalaPagarP.getText().equals("Ingrese Total a Pagar")) {
            txtTotalaPagarP.setText("");
            txtTotalaPagarP.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtTotalaPagarPFocusGained

    private void txtTotalaPagarPFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTotalaPagarPFocusLost
        if (txtTotalaPagarP.getText().equals("")) {
            txtTotalaPagarP.setText("Ingrese Total a Pagar");
            txtTotalaPagarP.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtTotalaPagarPFocusLost

    private void txtCantidadPMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtCantidadPMousePressed
        if (txtCantidadP.isEnabled() == false) {

            JOptionPane.showMessageDialog(null, "Dar Click En Seleccionar Producto para utilizar el campo", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_txtCantidadPMousePressed

    private void txtPrecioUnitarioMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtPrecioUnitarioMousePressed
        if (txtPrecioUnitario.isEnabled() == false) {

            JOptionPane.showMessageDialog(null, "Dar Click en Agregar o Editar para utilizar el campo", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_txtPrecioUnitarioMousePressed

    private void txtStockPMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtStockPMousePressed
        if (txtStockP.isEnabled() == false) {

            JOptionPane.showMessageDialog(null, "Dar Click en Agregar o Editar para utilizar el campo", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_txtStockPMousePressed

    private void txtImpuestoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtImpuestoMousePressed
        if (txtStockP.isEnabled() == false) {

            JOptionPane.showMessageDialog(null, "Dar Click en Agregar o Editar para utilizar el campo", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_txtImpuestoMousePressed

    private void txtDescuentoPMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtDescuentoPMousePressed
        if (txtDescuentoP.isEnabled() == false) {

            JOptionPane.showMessageDialog(null, "Dar Click en Agregar o Editar para utilizar el campo", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_txtDescuentoPMousePressed

    private void txtSubTotalPMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtSubTotalPMousePressed
        if (txtSubTotalP.isEnabled() == false) {

            JOptionPane.showMessageDialog(null, "Dar Click en Agregar o Editar para utilizar el campo", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_txtSubTotalPMousePressed

    private void jLabel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel1MousePressed

    private void txtDescPMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtDescPMousePressed
        if (txtDescP.isEnabled() == false) {

            JOptionPane.showMessageDialog(null, "Dar Click en Agregar o Editar para utilizar el campo", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_txtDescPMousePressed

    private void txtISVPMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtISVPMousePressed
        if (txtISVP.isEnabled() == false) {

            JOptionPane.showMessageDialog(null, "Dar Click en Agregar o Editar para utilizar el campo", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_txtISVPMousePressed

    private void txtTotalaPagarPMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtTotalaPagarPMousePressed
        if (txtTotalaPagarP.isEnabled() == false) {

            JOptionPane.showMessageDialog(null, "Dar Click en Agregar o Editar para utilizar el campo", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_txtTotalaPagarPMousePressed

    private void txtAgregarNombreMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtAgregarNombreMousePressed
        if (txtAgregarNombre.isEnabled() == false) {

            JOptionPane.showMessageDialog(null, "Dar Click en Agregar o Editar para utilizar el campo", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_txtAgregarNombreMousePressed

    private void txtDescuentoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtDescuentoMousePressed
        if (txtDescuento.isEnabled() == false) {

            JOptionPane.showMessageDialog(null, "Dar Click en Agregar o Editar para utilizar el campo", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_txtDescuentoMousePressed

    private void txtHoraFMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtHoraFMousePressed
        if (txtHoraF.isEnabled() == false) {

            JOptionPane.showMessageDialog(null, "Dar Click en Agregar o Editar para utilizar el campo", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_txtHoraFMousePressed

    private void txtBuscarCMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtBuscarCMousePressed

    }//GEN-LAST:event_txtBuscarCMousePressed

    public void validarNumerosLetras(java.awt.event.KeyEvent e) {
        if (e.getKeyChar() >= 33 && e.getKeyChar() <= 47
                || e.getKeyChar() >= 58 && e.getKeyChar() <= 64
                || e.getKeyChar() >= 91 && e.getKeyChar() <= 96
                || e.getKeyChar() >= 123 && e.getKeyChar() <= 129
                || e.getKeyChar() >= 145 && e.getKeyChar() <= 159
                || e.getKeyChar() >= 164 && e.getKeyChar() <= 238) {

            e.consume();
            JOptionPane.showMessageDialog(null, "Este campo no acepta caracteres especiales", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }
    private void txtBuscarPKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarPKeyTyped
        //buscarData(txtBuscarP.getText());
        validarNumerosLetras(evt);
        if (txtBuscarP.getText().length() > 15) {
            JOptionPane.showMessageDialog(null, "Alcanzaste el máximo de caracteres para este campo", "Advertencia", JOptionPane.WARNING_MESSAGE);
            evt.consume();
        } else if (txtBuscarP.getText().length() > 15) {
            if (!txtBuscarP.getText().matches("^(?!.*([A-Za-zñÑáéíóúÁÉÍÓÚ\\s])\\1{2})[A-Za-zñÑáéíóúÁÉÍÓÚ\\s0-9]+$")) {
                evt.consume();
            }
    }//GEN-LAST:event_txtBuscarPKeyTyped
    }
    private void txtBuscarCKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarCKeyTyped
        //buscarData(txtBuscarP.getText());
        validarNumeros(evt);
        if (txtBuscarC.getText().length() > 14) {
            JOptionPane.showMessageDialog(null, "Alcanzaste el máximo de caracteres para este campo", "Advertencia", JOptionPane.WARNING_MESSAGE);
            evt.consume();
        }
    }//GEN-LAST:event_txtBuscarCKeyTyped

    private void txtCaiFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCaiFKeyTyped
        validarNumeros(evt);
        if (txtCaiF.getText().length() > 7) {
            evt.consume();
        }
    }//GEN-LAST:event_txtCaiFKeyTyped

    private void txtHoraFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHoraFKeyTyped
        validarNumeros(evt);
        if (txtHoraF.getText().length() > 7) {
            evt.consume();
        }
    }//GEN-LAST:event_txtHoraFKeyTyped

    private void txtDescuentoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDescuentoKeyTyped
        validarNumeros(evt);
        if (txtDescuento.getText().length() > 7) {
            evt.consume();
        }
    }//GEN-LAST:event_txtDescuentoKeyTyped

    private void txtCantidadPKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantidadPKeyTyped
        validarNumeros(evt);

        if (txtCantidadP.getText().length() > 5) {
            evt.consume();
        }

    }//GEN-LAST:event_txtCantidadPKeyTyped

    private void txtPrecioUnitarioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecioUnitarioKeyTyped
        validarNumeros(evt);
        if (txtPrecioUnitario.getText().length() > 7) {
            evt.consume();
        }
    }//GEN-LAST:event_txtPrecioUnitarioKeyTyped

    private void txtStockPKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStockPKeyTyped
        validarNumeros(evt);
        if (txtStockP.getText().length() > 7) {
            evt.consume();
        }
    }//GEN-LAST:event_txtStockPKeyTyped

    private void txtImpuestoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtImpuestoKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtImpuestoKeyReleased

    private void tablacompraMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablacompraMouseClicked
        if (tabladetalle.getRowCount() == 0) {
            
               agrega = true;
           
        }else if(tabladetalle.getRowCount() != 0) {
            if (Seleccionados(2)) {
               agrega = true;
            }else{
               agrega = false;
            }
        }
    }//GEN-LAST:event_tablacompraMouseClicked

    private void ComboProductoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ComboProductoMouseClicked

    }//GEN-LAST:event_ComboProductoMouseClicked

    private void ComboProductoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ComboProductoMousePressed

    }//GEN-LAST:event_ComboProductoMousePressed

    private void ComboProductoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboProductoItemStateChanged
        ObtenerIdProd();

        //Connection con = Conexion.getConexion();
        try {
            //int fila = tablacompra.getSelectedRow();
            int codigo = 0;
            String Restriccion = "";
            int id = Integer.parseInt(txtIdProducto.getText());

            PreparedStatement ps;
            ResultSet rs;
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("Select P.Precio, I.Stock\n"
                    + "from Productos as P \n"
                    + "Inner Join Inventario as I on P.Id_Producto =I.Id_Producto\n"
                    + "Where P.Id_Producto=?\n"
                    + "Order by P.Id_Producto");
            ps.setInt(1, id);
            rs = ps.executeQuery();

            while (rs.next()) {

                txtPrecioUnitario.setText(rs.getString("Precio"));
                txtStockP.setText(rs.getString("Stock"));
            }
            txtCantidadP.setEnabled(Boolean.TRUE);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        }
        llenar_tabla();
        if (tabladetalle.getRowCount() == 0) {
            
               agrega = true;
           
        }
    }//GEN-LAST:event_ComboProductoItemStateChanged

    private void buscarCMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buscarCMouseClicked
        if (txtBuscarC.getText().equals("Buscar Cliente") || txtBuscarC.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Debe ingresar el RTN del cliente para realizar la busqueda", "Advertencia", JOptionPane.WARNING_MESSAGE);
        } else {
            buscarIDCliente(txtBuscarC.getText());
        }

    }//GEN-LAST:event_buscarCMouseClicked

    private void BotonRegresarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonRegresarMouseClicked
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuPrincipal().setVisible(true);
            }
        });
        this.dispose();
    }//GEN-LAST:event_BotonRegresarMouseClicked

    private void txtNumeroFacturaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNumeroFacturaKeyPressed


    }//GEN-LAST:event_txtNumeroFacturaKeyPressed

    private void txtNumeroFacturaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtNumeroFacturaMousePressed
        if (txtNumeroFactura.isEnabled() == false) {
            JOptionPane.showMessageDialog(null, "Este campo se cargará al guardar el registro", "N", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_txtNumeroFacturaMousePressed

    private void ComboTipoImpuestoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboTipoImpuestoItemStateChanged

        if (txtCantidadP.getText().equals("Ingrese Cantidad")) {
            JOptionPane.showMessageDialog(null, "Debe ingresar cantidad de producto para calcular impuesto", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_ComboTipoImpuestoItemStateChanged

    private void BotonGuardarFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonGuardarFMouseClicked
        if (ComboTipoPago.equals("Seleccione Tipo de Pago...")) {
            JOptionPane.showMessageDialog(null, "Seleccione tipo de pago");

        } else {
            //int Numerofactura = Integer.parseInt(factura);
            String Hora = txtHoraF.getText();
            String Descuento = txtDescuento.getText();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String FechaCom = sdf.format(Fecha.getDate());
            //ComboTipoPago.getSelectedIndex()
            try {
                Connection con = Conexion.getConexion();
                PreparedStatement ps = con.prepareStatement("Insert into Factura (Id_Cliente,Fecha_Factura,Hora, Num_Factura,Id_Empleado, Id_Tipo_Pago,Id_Parametro) VALUES(?,?,?,?,?,?,?)");
                ps.setInt(1, idcliente);
                ps.setString(2, FechaCom);
                ps.setString(3, Hora);
                ps.setString(4, factura);
                ps.setInt(5, 2);
                ps.setInt(6, ComboTipoPago.getSelectedIndex());
                ps.setInt(7, idcai);
                ps.executeUpdate();

                JOptionPane.showMessageDialog(null, "Registro guardado");
                //Inhabillitar();
                txtNumeroFactura.setText(factura);

                cargarFact();
                ComboProducto.setEnabled(Boolean.TRUE);
                BotonAgregarP.setEnabled(Boolean.TRUE);

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex.toString());
            }
        }
    }//GEN-LAST:event_BotonGuardarFMouseClicked

    private void txtImpuestoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtImpuestoMouseClicked

    }//GEN-LAST:event_txtImpuestoMouseClicked

    private void btncalimpuestoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btncalimpuestoMouseClicked
        Double Cantidad = Double.parseDouble(txtCantidadP.getText());
        Double precio = Double.parseDouble(txtPrecioUnitario.getText());
        Double valor = (Cantidad * precio) * 0.12;
        if (ComboTipoImpuesto.getSelectedIndex() == 1) {
            txtImpuesto.setText(valor.toString());
            Impuesto = Impuesto + valor;
            System.out.println(Impuesto);

        } else {
            JOptionPane.showMessageDialog(null, "Debe ingresar cantidad de producto para calcular impuesto", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btncalimpuestoMouseClicked

    private void btncaldescuentoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btncaldescuentoMouseClicked
        Double Cantidad = Double.parseDouble(txtCantidadP.getText());
        Double precio = Double.parseDouble(txtPrecioUnitario.getText());
        Double valor = (Cantidad * precio) * 0.05;
        Double Valor1 = 0.00;
        if (ComboTipoImpuesto.getSelectedIndex() == 1) {
            txtDescuentoP.setText(new DecimalFormat("####.##").format(valor));
            Descuento = Descuento + valor;

        } else {
            txtDescuentoP.setText(Valor1.toString());
        }
    }//GEN-LAST:event_btncaldescuentoMouseClicked

    private void ComboDescuentoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboDescuentoItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboDescuentoItemStateChanged

    private void tabladetalleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabladetalleMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tabladetalleMouseClicked

    private void txtCantidadPKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantidadPKeyReleased
        int stock = Integer.parseInt(txtStockP.getText());
        int cantidad = Integer.parseInt(txtCantidadP.getText());
        Double precio = Double.parseDouble(txtPrecioUnitario.getText());

        if (txtCantidadP.getText().equals("0")) {
            JOptionPane.showMessageDialog(null, "La cantidad minima permitida es 1", "Advertencia", JOptionPane.WARNING_MESSAGE);

            evt.consume();
        } else if (cantidad > stock) {
            JOptionPane.showMessageDialog(null, "La cantidad Maxima permitida es:" + stock, "Advertencia", JOptionPane.WARNING_MESSAGE);

            evt.consume();
        } else {
            Subtotal = precio * cantidad;
        }
    }//GEN-LAST:event_txtCantidadPKeyReleased

    private void BotonAgregarPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonAgregarPMouseClicked
        cargarFact();
         if (agrega == true) {
          if (ComboProducto.equals("Seleccione Tipo de Pago...")) {
                JOptionPane.showMessageDialog(null, "Seleccione tipo de pago");

            } else {
                //int Numerofactura = Integer.parseInt(factura);
                String Hora = txtHoraF.getText();
                String Descuento = txtDescuentoP.getText();
                String impuesto = txtImpuesto.getText();
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                String FechaCom = sdf.format(Fecha.getDate());
                //ComboTipoPago.getSelectedIndex()
                try {
                    Connection con = Conexion.getConexion();
                    PreparedStatement ps = con.prepareStatement("Insert into DetalleFactura (Id_Factura,Id_Producto,Id_Tipo_Impuesto,Precio_Unitario,Cantidad, Descuento,Impuesto) VALUES(?,?,?,?,?,?,?)");
                    ps.setInt(1, Integer.parseInt(idFactura.getText()));
                    ps.setInt(2, Integer.parseInt(txtIdProducto.getText()));
                    ps.setInt(3, 1);
                    ps.setString(4, txtPrecioUnitario.getText());
                    ps.setDouble(5, Double.parseDouble(txtCantidadP.getText()));
                    ps.setString(6, Descuento);
                    ps.setString(7, impuesto);
                    ps.executeUpdate();

                    JOptionPane.showMessageDialog(null, "Registro guardado");

                    txtNumeroFactura.setText(factura);

                    CARGARtp();
                    ComboDescuentoF.setEnabled(Boolean.TRUE);
                    ObtenerTotales();

                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex.toString());
                }
            }
       }else if(agrega == false) {
             JOptionPane.showMessageDialog(null, "Este producto no está disponible para venta sin receta médica");
         }
    }//GEN-LAST:event_BotonAgregarPMouseClicked

    private void txtImpuestoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtImpuestoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtImpuestoActionPerformed

    private void ComboDescuentoFItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboDescuentoFItemStateChanged
        ObtenerIdDesc();
    }//GEN-LAST:event_ComboDescuentoFItemStateChanged

    private void btnDescuentoTMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDescuentoTMouseClicked
        if (ComboDescuentoF.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "Seleccione un Descuento", "SAG", JOptionPane.INFORMATION_MESSAGE);
        } else {
            if (idDescuento.getText().equals("1")) {
                //boolean canContinue = false;
                int number = 0;

                String userResponse = JOptionPane.showInputDialog(this, "Ingrese Edad: ", 0);

                number = Integer.parseInt(userResponse);
                if (number >= 60) {
                    Double Descuentos = 0.00;
                    Double Obtener = Double.parseDouble(txtSubTotalP.getText());

                    Descuentos = Obtener * descuentar;
                    txtDescuento.setText(new DecimalFormat("####.##").format(Descuentos));
                } else {
                    JOptionPane.showMessageDialog(this, "El cliente no aplica al descuento de la tercera edad/n Tercera edad a partir de los 60 años", "SAG", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                Double Descuentos = 0.00;
                Double Obtener = Double.parseDouble(txtSubTotalP.getText());

                Descuentos = Obtener * descuentar;
                txtDescuento.setText(new DecimalFormat("####.##").format(Descuentos));
            }
        }

    }//GEN-LAST:event_btnDescuentoTMouseClicked

    private void aplicardescuentoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aplicardescuentoMouseClicked
        if (ComboProducto.equals("Seleccione Tipo de Pago...")) {
            JOptionPane.showMessageDialog(null, "Seleccione tipo de pago");

        } else {
            //int Numerofactura = Integer.parseInt(factura);
            Descuento = Double.parseDouble(txtDescP.getText());
            Subtotal = Double.parseDouble(txtSubTotalP.getText());
            Impuesto = Double.parseDouble(txtISVP.getText());
            Double desc = Double.parseDouble(txtDescuento.getText());
            Double descuentito = 0.00;
            try {
                Connection con = Conexion.getConexion();
                PreparedStatement ps = con.prepareStatement("Insert into Descuento_Factura (Id_Factura,Id_Descuento,Valor) VALUES(?,?,?)");
                ps.setInt(1, Integer.parseInt(idFactura.getText()));
                ps.setInt(2, Integer.parseInt(idDescuento.getText()));
                ps.setString(3, txtDescuento.getText());
                ps.executeUpdate();

                JOptionPane.showMessageDialog(null, "El descuento aplicado es de :" + desc);
                //Inhabillitar();
                txtNumeroFactura.setText(factura);

                CARGARtp();
                //ComboDescuentoF.setVisible(Boolean.TRUE);
                //txtSubTotalP.setText(Subtotal.toString());
                descuentito = Descuento + desc;
                txtDescP.setText(new DecimalFormat("####.##").format(descuentito));
                //txtISVP.setText(Impuesto.toString());
                Total = ((Subtotal - (this.Descuento + desc)) + Impuesto);
                txtTotalaPagarP.setText(new DecimalFormat("####.##").format(Total));
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex.toString());
            }
        }


    }//GEN-LAST:event_aplicardescuentoMouseClicked

    private void txtDescPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDescPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDescPActionPerformed

    private void AgregarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AgregarMouseClicked
        regresar = "1";
        Clientes CL = new Clientes();
        {
            CL.setVisible(true);
            dispose();

        }


    }//GEN-LAST:event_AgregarMouseClicked

    private void ComboProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboProductoActionPerformed
       /* TablaRender tr = new TablaRender();
        if (tabladetalle.getRowCount() != 0) {
            if (Seleccionados(2)) {
               JOptionPane.showMessageDialog(null, "está seleccionada");
            }else{
                JOptionPane.showMessageDialog(null, "Debe seleccionar");
            }
        }else{
            JOptionPane.showMessageDialog(null, "No tiene checks");
        }*/
    }//GEN-LAST:event_ComboProductoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Factura.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Factura.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Factura.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Factura.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Factura().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Agregar;
    private javax.swing.JLabel BotonAgregarP;
    private javax.swing.JLabel BotonEditarF;
    private javax.swing.JLabel BotonEditarP;
    private javax.swing.JLabel BotonEliminarF;
    private javax.swing.JLabel BotonEliminarP;
    private javax.swing.JLabel BotonGuardarF;
    private javax.swing.JLabel BotonRegresar;
    private javax.swing.JComboBox<String> ComboDescuento;
    private javax.swing.JComboBox<String> ComboDescuentoF;
    private javax.swing.JComboBox<String> ComboProducto;
    private javax.swing.JComboBox<String> ComboTipoImpuesto;
    private javax.swing.JComboBox<String> ComboTipoPago;
    private com.toedter.calendar.JDateChooser Fecha;
    private javax.swing.JLabel Ncaja;
    private javax.swing.JLabel Usuario;
    private javax.swing.JLabel aplicardescuento;
    private javax.swing.JLabel btnDescuentoT;
    private javax.swing.JLabel btncaldescuento;
    private javax.swing.JLabel btncalimpuesto;
    private javax.swing.JLabel buscarC;
    private javax.swing.JLabel idDescuento;
    private javax.swing.JLabel idFactura;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tablacompra;
    private javax.swing.JTable tabladetalle;
    private javax.swing.JTextField txtAgregarNombre;
    private javax.swing.JTextField txtBuscarC;
    private javax.swing.JTextField txtBuscarP;
    private javax.swing.JTextField txtCaiF;
    private javax.swing.JTextField txtCantidadP;
    private javax.swing.JTextField txtDescP;
    private javax.swing.JTextField txtDescuento;
    private javax.swing.JTextField txtDescuentoP;
    private javax.swing.JTextField txtHoraF;
    private javax.swing.JTextField txtISVP;
    private javax.swing.JLabel txtIdProducto;
    private javax.swing.JTextField txtImpuesto;
    private javax.swing.JTextField txtNumeroFactura;
    private javax.swing.JTextField txtPrecioUnitario;
    private javax.swing.JTextField txtStockP;
    private javax.swing.JTextField txtSubTotalP;
    private javax.swing.JTextField txtTotalaPagarP;
    // End of variables declaration//GEN-END:variables

    private void buscarIDCliente(String cliente) {
        cliente = txtBuscarC.getText();
        try {
            ResultSet rs;
            Connection con = Conexion.getConexion();
            PreparedStatement ps = con.prepareStatement("Select Nombre_Cliente+' '+Apellido_Cliente as NC, Id_Cliente from Cliente where RTN=?");
            ps.setString(1, cliente);
            rs = ps.executeQuery();

            if (rs.next()) {

                txtAgregarNombre.setText(rs.getString("NC"));
                idcliente = rs.getInt("Id_Cliente");

            } else {
                JOptionPane.showMessageDialog(null, "El Cliente no se encuentra en la Base de datos verifique que el RTN brindado sea correcto, o ingrese el cliente", "Advertencia", JOptionPane.WARNING_MESSAGE);
                txtAgregarNombre.setText(rs.getString("Consumidor Final"));
                idcliente = rs.getInt("1");
            }

            con.close();
            rs.close();

            System.out.println(txtAgregarNombre.getText() + " " + idcliente);
        } catch (Exception e) {
            System.out.println(e);
        }

    }

    public void ObtenerIdProd() {
        String Nombre = ComboProducto.getSelectedItem().toString();
        try {
            ResultSet rs;
            Connection con = Conexion.getConexion();
            PreparedStatement ps = con.prepareStatement("Select Id_Producto From Productos Where Nombre_Producto=?");
            ps.setString(1, Nombre);
            rs = ps.executeQuery();

            while (rs.next()) {
                txtIdProducto.setText(rs.getString("Id_Producto"));
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        }
    }

    public void ObtenerIdDesc() {
        String Nombre = ComboDescuentoF.getSelectedItem().toString();
        try {
            ResultSet rs;
            Connection con = Conexion.getConexion();
            PreparedStatement ps = con.prepareStatement("Select D.Id_Descuento,D.Descripcion\n"
                    + "from Descuento As D\n"
                    + "Inner Join Tipo_Descuento AS TD ON D.Id_Tipo_Descuento=TD.Id_Tipo_Descuento\n"
                    + "Where TD.Descripcion=? and GETDATE()<=D.[Fecha _Final]\n"
                    + "Order by D.Id_Descuento");
            ps.setString(1, Nombre);
            rs = ps.executeQuery();

            while (rs.next()) {
                idDescuento.setText(rs.getString("Id_Descuento"));
                descuentar = rs.getDouble("Descripcion");
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        }
    }

    public void cargarFact() {
        String Factura = txtNumeroFactura.getText();
        try {
            ResultSet rs;
            Connection con = Conexion.getConexion();
            PreparedStatement ps = con.prepareStatement("Select Id_Factura From Factura Where Num_Factura=?");
            ps.setString(1, Factura);
            rs = ps.executeQuery();

            while (rs.next()) {
                idFactura.setText(rs.getString("Id_Factura"));
                //txtNumeroFacturaC.setText(txtNumeroFactura.getText());
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        }
    }

    public class CargarProductor {

        public DefaultComboBoxModel getvalues() {
            //int Prove = Integer.parseInt(txtIdProv.getText());
            DefaultComboBoxModel modelo = new DefaultComboBoxModel();
            try {
                ResultSet rs;
                Connection con = Conexion.getConexion();
                PreparedStatement ps = con.prepareStatement("Select Nombre_Producto from Productos where Id_Estado=1");
                // ps.setInt(1, Prove);
                rs = ps.executeQuery();
                modelo.addElement("Seleccione Producto...");
                while (rs.next()) {
                    modelo.addElement(rs.getString(1));
                }
                con.close();
                rs.close();
            } catch (Exception e) {
                System.out.println(e);
            }
            return modelo;
        }
    }

    public void CARGARtp() {
        DefaultTableModel modeloTabla = (DefaultTableModel) tabladetalle.getModel();
        modeloTabla.setRowCount(0);
        PreparedStatement ps;
        ResultSet rs;
        ResultSetMetaData rsmd;
        int columnas;
        int id = Integer.parseInt(idFactura.getText());
        try {
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("Select DF.Id_Detalle_Factura, F.Num_Factura, P.Nombre_Producto,DF.Precio_Unitario,DF.Cantidad,DF.Impuesto,DF.Descuento\n"
                    + "	from DetalleFactura as DF\n"
                    + "	Inner Join Factura as F On Df.Id_Factura=F.Id_Factura\n"
                    + "	Inner Join Productos as P on DF.Id_Producto =P.Id_Producto\n"
                    + "Where F.Id_Factura=?\n"
                    + "	Order by DF.Id_Detalle_Factura");
            ps.setInt(1, id);
            rs = ps.executeQuery();
            rsmd = rs.getMetaData();
            columnas = rsmd.getColumnCount();

            while (rs.next()) {
                Object[] fila = new Object[columnas];
                for (int indice = 0; indice < columnas; indice++) {
                    fila[indice] = rs.getObject(indice + 1);
                }
                modeloTabla.addRow(fila);
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        }
    }

    public void llenar_tabla() {
        model.setRowCount(0);

        PreparedStatement ps;
        ResultSet rs;
        ResultSetMetaData rsmd;
        int columnas;
        int id = Integer.parseInt(txtIdProducto.getText());
        try {
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("Select RM.Id_Restriccion, RM.Restriccion\n"
                    + "from Productos as P \n"
                    + "Inner Join Medicamentos_Restringuidos as MR Inner Join Restricciones_Medicamentos as RM On MR.Id_Restriccion= RM.Id_Restriccion On MR.Id_Producto=P.Id_Producto\n"
                    + "Inner Join Inventario as I on P.Id_Producto =I.Id_Producto\n"
                    + "Where P.Id_Producto=?\n"
                    + "Order by P.Id_Producto");
            ps.setInt(1, id);
            rs = ps.executeQuery();
            rsmd = rs.getMetaData();
            columnas = rsmd.getColumnCount();

            while (rs.next()) {
                Object[] fila = new Object[columnas];
                for (int indice = 0; indice < columnas; indice++) {
                    fila[indice] = rs.getObject(indice + 1);
                }
                model.addRow(fila);
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        }
    }

    DefaultTableModel modelo;
    ResultSet rs;
    Connection con = Conexion.getConexion();
    JCheckBox check = new JCheckBox();
    /*public void llenar_tabla2() {
        String[] titulos = {"Id_Restricción", "Restricción", "Verificación"};
        String[] registros = new String[3];

        String sql = "Select RM.Id_Restriccion, RM.Restriccion\n"
                + "from Productos as P \n"
                + "Inner Join Medicamentos_Restringuidos as MR Inner Join Restricciones_Medicamentos as RM On MR.Id_Restriccion= RM.Id_Restriccion On MR.Id_Producto=P.Id_Producto\n"
                + "Inner Join Inventario as I on P.Id_Producto =I.Id_Producto\n"
                + "Where P.Id_Producto=?\n"
                + "Order by P.Id_Producto";

        modelo = new DefaultTableModel(null, titulos);

        try {
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);
            
            while (rs.next()) {                
                registros[0] = rs.getString("Id_Restriccion");
                registros[1] = rs.getString("Restriccion");
                registros[2] = rs.get;
            }
        } catch (Exception e) {
        }
    }*/

    public void cargarCAI() {
        try {
            ResultSet rs;
            Connection con = Conexion.getConexion();
            PreparedStatement ps = con.prepareStatement("Select CAI,Valor_Actual,Id_Parametro_Factura from Parametro_Factura");
            // ps.setInt(1, Prove);
            rs = ps.executeQuery();
            while (rs.next()) {
                txtCaiF.setText(rs.getString("CAI"));
                factura = rs.getString("Valor_Actual");
                idcai = rs.getInt("Id_Parametro_Factura");
            }

            con.close();
            rs.close();

            System.out.println(factura + " " + idcai);
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void ObtenerTotales() {

        try {
            ResultSet rs;
            Connection con = Conexion.getConexion();
            PreparedStatement ps = con.prepareStatement(" Select Sum(F.Precio_Unitario*F.Cantidad) AS SUBTOTAL, Sum(F.Impuesto) as Impuesto, Sum(f.Descuento) as Descuento, (Sum(F.Precio_Unitario*F.Cantidad)  + Sum(f.Descuento))-Sum(F.Impuesto) as Total\n"
                    + "        From DetalleFactura as F \n"
                    + "      where F.Id_Factura=?");
            ps.setInt(1, Integer.parseInt(idFactura.getText()));
            rs = ps.executeQuery();
            while (rs.next()) {
                txtSubTotalP.setText(rs.getString("SUBTOTAL"));
                txtDescP.setText(rs.getString("Descuento"));
                txtISVP.setText(rs.getString("Impuesto"));
                //Total = (Subtotal - this.Descuento) + Impuesto;
                txtTotalaPagarP.setText(rs.getString("Total"));
            }

            con.close();
            rs.close();

            System.out.println(factura + " " + idcai);
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public class CargarTP {

        public DefaultComboBoxModel getvalues() {
            //int Prove = Integer.parseInt(txtIdProv.getText());
            DefaultComboBoxModel modelo = new DefaultComboBoxModel();
            try {
                ResultSet rs;
                Connection con = Conexion.getConexion();
                PreparedStatement ps = con.prepareStatement("Select Tipo_Pago from Tipo_Pago");
                // ps.setInt(1, Prove);
                rs = ps.executeQuery();
                modelo.addElement("Seleccione Tipo de Pago...");
                while (rs.next()) {
                    modelo.addElement(rs.getString(1));
                }
                con.close();
                rs.close();
            } catch (Exception e) {
                System.out.println(e);
            }
            return modelo;
        }
    }

    public class CargarTipoDescuento {

        public DefaultComboBoxModel getvalues() {

            DefaultComboBoxModel modelo = new DefaultComboBoxModel();
            try {
                Connection con = Conexion.getConexion();
                String sql = "Select TD.Descripcion\n"
                        + "From Descuento as De\n"
                        + "Inner Join Tipo_Descuento as TD on De.Id_Tipo_Descuento=TD.Id_Tipo_Descuento\n"
                        + "where GETDATE() <=[Fecha _Final]";
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery(sql);
                modelo.addElement("Seleccione Descuento...");
                while (rs.next()) {
                    modelo.addElement(rs.getString(1));
                }
                con.close();
                rs.close();
            } catch (Exception e) {
                System.out.println(e);
            }
            return modelo;
        }
    }

    public class CargarTipoImpuesto {

        public DefaultComboBoxModel getvalues() {

            DefaultComboBoxModel modelo = new DefaultComboBoxModel();
            try {
                Connection con = Conexion.getConexion();
                String sql = "Select ISV from Tipo_Impuesto";
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery(sql);
                modelo.addElement("Seleccione Impuesto...");
                while (rs.next()) {
                    modelo.addElement(rs.getString(1));
                }
                con.close();
                rs.close();
            } catch (Exception e) {
                System.out.println(e);
            }
            return modelo;
        }
    }

    private boolean Seleccionados(int pos) {
        int contador = 0;
        boolean bandera = true;
        for (int i = 0; i < tablacompra.getRowCount(); i++) {
            boolean seleccion = (boolean) tablacompra.getValueAt(i, pos);
            if (seleccion) {
                contador++;
            }
        }
        if (contador == 0) {
            bandera = false;
        }
        return bandera;
    }
}
