/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Formularios_SAG;

import Conexion.Conexion;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Allisson Castro
 */
public class GerenciaSucursal extends javax.swing.JFrame {

    /**
     * Creates new form GerenciaSucursal
     */
    public GerenciaSucursal() {
        initComponents();
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DAY_OF_WEEK,-10);
        Calendar cale = Calendar.getInstance();
        cale.add(Calendar.YEAR,-3);
        Calendar calen = Calendar.getInstance();
        calen.add(Calendar.DAY_OF_WEEK,-1);
        Date min = cal.getTime();
        Date mini = cale.getTime();
        Date max = new Date();
        Date maxi= calen.getTime();
        CargarCargo ch = new CargarCargo();
        ComboNombreEmpleadoGS.setModel(ch.getvalues());
        CargarSucursal cs = new CargarSucursal();
        ComboNombreSurcursalGS.setModel(cs.getvalues());
         cargartabla();
         Inhabillitar();
        FechaFinal.setSelectableDateRange( min,max);
       FechaInicial.setSelectableDateRange(mini, maxi);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BotonRegresarGS = new javax.swing.JLabel();
        BotonAgregarGS = new javax.swing.JLabel();
        BotonEditarGS = new javax.swing.JLabel();
        BotonGuardarGS = new javax.swing.JLabel();
        BotonCancelarGS = new javax.swing.JLabel();
        ComboNombreSurcursalGS = new javax.swing.JComboBox<>();
        ComboNombreEmpleadoGS = new javax.swing.JComboBox<>();
        FechaInicial = new com.toedter.calendar.JDateChooser();
        FechaFinal = new com.toedter.calendar.JDateChooser();
        txtIdGS = new javax.swing.JLabel();
        txtIdEmpleado = new javax.swing.JLabel();
        txtBuscarPro = new javax.swing.JTextField();
        TablaGerente = new javax.swing.JScrollPane();
        TablaGerencia = new javax.swing.JTable();
        GerenciaSucursal = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        BotonRegresarGS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonRegresarGSMouseClicked(evt);
            }
        });
        getContentPane().add(BotonRegresarGS, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 36, 130, 40));

        BotonAgregarGS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonAgregarGSMouseClicked(evt);
            }
        });
        getContentPane().add(BotonAgregarGS, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 140, 130, 30));

        BotonEditarGS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonEditarGSMouseClicked(evt);
            }
        });
        getContentPane().add(BotonEditarGS, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 140, 120, 30));

        BotonGuardarGS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonGuardarGSMouseClicked(evt);
            }
        });
        getContentPane().add(BotonGuardarGS, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 140, 120, 30));

        BotonCancelarGS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonCancelarGSMouseClicked(evt);
            }
        });
        getContentPane().add(BotonCancelarGS, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 140, 120, 30));

        ComboNombreSurcursalGS.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ComboNombreSurcursalGS.setBorder(null);
        ComboNombreSurcursalGS.setOpaque(false);
        getContentPane().add(ComboNombreSurcursalGS, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 336, 180, 30));

        ComboNombreEmpleadoGS.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ComboNombreEmpleadoGS.setBorder(null);
        ComboNombreEmpleadoGS.setOpaque(false);
        getContentPane().add(ComboNombreEmpleadoGS, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 400, 180, 30));
        getContentPane().add(FechaInicial, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 460, 180, 35));
        getContentPane().add(FechaFinal, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 525, 180, 34));
        getContentPane().add(txtIdGS, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 240, 30, 20));
        getContentPane().add(txtIdEmpleado, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 230, 30, 20));

        txtBuscarPro.setBorder(null);
        txtBuscarPro.setOpaque(false);
        txtBuscarPro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscarProActionPerformed(evt);
            }
        });
        getContentPane().add(txtBuscarPro, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 220, 240, 30));

        TablaGerencia.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Sucursal", "Gerente", "Fecha Inicio", "Fecha Final"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TablaGerencia.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaGerenciaMouseClicked(evt);
            }
        });
        TablaGerente.setViewportView(TablaGerencia);

        getContentPane().add(TablaGerente, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 290, 630, 360));

        GerenciaSucursal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/componentes/Pantalla Gerente-Sucursal.png"))); // NOI18N
        GerenciaSucursal.setText("jLabel1");
        getContentPane().add(GerenciaSucursal, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 940, 680));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtBuscarProActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscarProActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBuscarProActionPerformed

    private void BotonEditarGSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonEditarGSMouseClicked
       
        if (FechaFinal.getDate().equals("")) {
            JOptionPane.showMessageDialog(null, "No se puede Actualizar datos vacios");
        } else {
            int Id = Integer.parseInt(txtIdGS.getText());
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String FechaF= sdf.format(FechaFinal.getDate());
            
            try {
                Connection con = Conexion.getConexion();
                PreparedStatement ps = con.prepareStatement("Update GerenteSucursal set Fecha_Final=? where Id_Gerente =?");
                ps.setString(1, FechaF);
                ps.setInt(2, Id);
                ps.executeUpdate();
                JOptionPane.showMessageDialog(null, "Registro Actualizado");
                cargartabla();
                Limpiar();
                Inhabillitar();

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex.toString());
            }
        }
    }//GEN-LAST:event_BotonEditarGSMouseClicked

    private void BotonGuardarGSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonGuardarGSMouseClicked
        ObtenerID();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String FechaF= sdf.format(FechaFinal.getDate());
        String FechaI =sdf.format(FechaInicial.getDate());
        int Empleado = Integer.parseInt(txtIdEmpleado.getText());
        int Sucursal = ComboNombreSurcursalGS.getSelectedIndex();
        
        if (FechaFinal.getDate().equals("") || FechaInicial.getDate().equals("")) {
            JOptionPane.showMessageDialog(null, "No se puede Guardar datos vacios");
        } else {
            try {
                Connection con = Conexion.getConexion();
                PreparedStatement ps = con.prepareStatement("Insert into GerenteSucursal (Id_Sucursal, Id_Empleado, Fecha_Inicio, Fecha_Final) VALUES(?,?,?,?)");
                ps.setInt(1, Sucursal);
                ps.setInt(2, Empleado);
                ps.setString(3, FechaI);
                ps.setString(4, FechaF);
                ps.executeUpdate();
                JOptionPane.showMessageDialog(null, "Registro guardado");
                cargartabla();
                Limpiar();
                Inhabillitar();

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex.toString());
            }
        }
    }//GEN-LAST:event_BotonGuardarGSMouseClicked

    private void BotonAgregarGSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonAgregarGSMouseClicked
        Habilitar();
    }//GEN-LAST:event_BotonAgregarGSMouseClicked

    private void BotonCancelarGSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonCancelarGSMouseClicked
       Limpiar();
       Inhabillitar();
    }//GEN-LAST:event_BotonCancelarGSMouseClicked

    private void TablaGerenciaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaGerenciaMouseClicked
       try {
            int fila = TablaGerencia.getSelectedRow();
            int id = Integer.parseInt(TablaGerencia.getValueAt(fila, 0).toString());
            PreparedStatement ps;
            ResultSet rs;
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("Select S.Nombre, E.NombreE, GS.Fecha_Inicio, GS.Fecha_Final\n"
                    + "From GerenteSucursal as GS\n"
                    + "Inner Join Sucursal as S On GS.Id_Sucursal=S.Id_Sucursal\n"
                    + "Inner Join Empleados AS E on GS.Id_Empleado=E.Id_Empleado\n"
                    + "Where GS.Id_Gerente=?\n"
                    + "Order By GS.Id_Gerente");
            ps.setInt(1, id);
            rs = ps.executeQuery();

            while (rs.next()) {
                txtIdGS.setText(String.valueOf(id));
                FechaInicial.setDate(rs.getDate("Fecha_Inicio"));
                ComboNombreEmpleadoGS.setSelectedItem(rs.getString("NombreE"));
                FechaFinal.setDate(rs.getDate("Fecha_Final"));
                ComboNombreSurcursalGS.setSelectedItem(rs.getString("Nombre"));

            }
            FechaInicial.setEnabled(Boolean.FALSE);
            ComboNombreEmpleadoGS.enable(Boolean.FALSE);
            ComboNombreSurcursalGS.enable(Boolean.FALSE);
           FechaFinal.setEnabled(Boolean.TRUE);

            BotonEditarGS.isEnabled();
            BotonCancelarGS.isEnabled();
            BotonGuardarGS.enable(Boolean.FALSE);
            //Habilitar();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        }
    }//GEN-LAST:event_TablaGerenciaMouseClicked

    private void BotonRegresarGSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonRegresarGSMouseClicked
     java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuPrincipal().setVisible(true);
            }
        });
        this.dispose();

   
    }//GEN-LAST:event_BotonRegresarGSMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GerenciaSucursal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GerenciaSucursal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GerenciaSucursal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GerenciaSucursal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GerenciaSucursal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BotonAgregarGS;
    private javax.swing.JLabel BotonCancelarGS;
    private javax.swing.JLabel BotonEditarGS;
    private javax.swing.JLabel BotonGuardarGS;
    private javax.swing.JLabel BotonRegresarGS;
    private javax.swing.JComboBox<String> ComboNombreEmpleadoGS;
    private javax.swing.JComboBox<String> ComboNombreSurcursalGS;
    private com.toedter.calendar.JDateChooser FechaFinal;
    private com.toedter.calendar.JDateChooser FechaInicial;
    private javax.swing.JLabel GerenciaSucursal;
    private javax.swing.JTable TablaGerencia;
    private javax.swing.JScrollPane TablaGerente;
    private javax.swing.JTextField txtBuscarPro;
    private javax.swing.JLabel txtIdEmpleado;
    private javax.swing.JLabel txtIdGS;
    // End of variables declaration//GEN-END:variables
  private void cargartabla() {
        DefaultTableModel modeloTabla = (DefaultTableModel) TablaGerencia.getModel();
        modeloTabla.setRowCount(0);

        PreparedStatement ps;
        ResultSet rs;
        ResultSetMetaData rsmd;
        int columnas;

        try {
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("Select GS.Id_Gerente, S.Nombre, E.NombreE, GS.Fecha_Inicio, GS.Fecha_Final\n"
                    + "From GerenteSucursal as GS\n"
                    + "Inner Join Sucursal as S On GS.Id_Sucursal=S.Id_Sucursal\n"
                    + "Inner Join Empleados AS E on GS.Id_Empleado=E.Id_Empleado\n"
                    + "Order By GS.Id_Gerente");
            rs = ps.executeQuery();
            rsmd = rs.getMetaData();
            columnas = rsmd.getColumnCount();

            while (rs.next()) {
                Object[] fila = new Object[columnas];
                for (int indice = 0; indice < columnas; indice++) {
                    fila[indice] = rs.getObject(indice + 1);
                }
                modeloTabla.addRow(fila);
            }

            // JOptionPane.showMessageDialog(null, "Registro guardado");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        }
    }

    public class CargarSucursal {

        public DefaultComboBoxModel getvalues() {

            DefaultComboBoxModel modelo = new DefaultComboBoxModel();
            try {
                Connection con = Conexion.getConexion();
                String sql = "select Nombre from sucursal";
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery(sql);
                modelo.addElement("Seleccione Sucursal...");
                while (rs.next()) {
                    modelo.addElement(rs.getString(1));
                }
                con.close();
                rs.close();
            } catch (Exception e) {
                System.out.println(e);
            }
            return modelo;
        }
    }

    public class CargarCargo {

        public DefaultComboBoxModel getvalues() {

            DefaultComboBoxModel modelo = new DefaultComboBoxModel();
            try {
                Connection con = Conexion.getConexion();
                String sql = "select NombreE from Empleados where Id_Cargo=2";
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery(sql);
                modelo.addElement("Seleccione Cargo...");
                while (rs.next()) {
                    modelo.addElement(rs.getString(1));
                }
                con.close();
                rs.close();
            } catch (Exception e) {
                System.out.println(e);
            }
            return modelo;
        }
    }
    
    private void Habilitar() {
        FechaFinal.setEnabled(Boolean.TRUE);
        ComboNombreSurcursalGS.enable(Boolean.TRUE);
        FechaInicial.setEnabled(Boolean.TRUE);
        ComboNombreEmpleadoGS.enable(Boolean.TRUE);
    }

    private void Inhabillitar() {
        FechaFinal.setEnabled(Boolean.FALSE);
        ComboNombreSurcursalGS.enable(Boolean.FALSE);
        FechaInicial.setEnabled(Boolean.FALSE);
        ComboNombreEmpleadoGS.enable(Boolean.FALSE);
        

    }
    private void Limpiar() {
        //row new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        txtIdGS.setText("");

       
        ComboNombreEmpleadoGS.setSelectedIndex(0);
        ComboNombreSurcursalGS.setSelectedIndex(0);

 

    }
    public void ObtenerID(){
        String Nombre=ComboNombreEmpleadoGS.getSelectedItem().toString();
        try {
                ResultSet rs;
                Connection con = Conexion.getConexion();
                PreparedStatement ps = con.prepareStatement("Select Id_Empleado From Empleados Where NombreE=?");
                ps.setString(1, Nombre);
                rs = ps.executeQuery();
                
               while (rs.next()) {
                txtIdEmpleado.setText(rs.getString("Id_Empleado"));
               }
                

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex.toString());
            }
    }

}
