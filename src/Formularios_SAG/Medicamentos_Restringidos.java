/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Formularios_SAG;

import Conexion.Conexion;
import static Formularios_SAG.Proveedores.Id_Proveedor;
import Logs.log;
import Reportes.ReportView;
import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author carba
 */
public class Medicamentos_Restringidos extends javax.swing.JFrame {

    log lo = new log();
    String MedicamentoR = "Medicamentos restriguidos";
    int agregari;
    int guardari;
    int editari;
    int cancelari;
    int reportesi;
    int activoi;
    int inactivoi;
    int anulari;
    int buscari;
    int crearcomprai;
    int historicoi;
    String userName;

    /**
     * Creates new form Medicamentos_Restringidos
     */
    public Medicamentos_Restringidos() {
        initComponents();
        cargartabla();
        Inhabillitar();
        CargarProducto p = new Medicamentos_Restringidos.CargarProducto();
        comboProducto.setModel(p.getvalues());
        CargarRestriccion r = new Medicamentos_Restringidos.CargarRestriccion();
        comboRestriccion.setModel(r.getvalues());
        txtId_Restriccion.setVisible(Boolean.FALSE);
        txtIdProducto.setVisible(Boolean.FALSE);
        txtIdMR.setVisible(Boolean.FALSE);
        usuario.setText(Login.txtUsuario.getText());
        habilitarroles();
        
        userName = usuario.getText();
    }

    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("componentes/LOGOSAG(2).png"));
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupMR = new javax.swing.ButtonGroup();
        botonRegresarMR = new javax.swing.JLabel();
        botonAgregarMR = new javax.swing.JLabel();
        botonEditarMR = new javax.swing.JLabel();
        botonGuardarMR = new javax.swing.JLabel();
        botonCancelarMR = new javax.swing.JLabel();
        txtBuscarMR = new javax.swing.JTextField();
        comboRestriccion = new javax.swing.JComboBox<>();
        comboProducto = new javax.swing.JComboBox<>();
        txtId_Restriccion = new javax.swing.JLabel();
        txtIdMR = new javax.swing.JLabel();
        txtDescripcionMR = new javax.swing.JTextField();
        txtIdProducto = new javax.swing.JLabel();
        usuario = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        reporte = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaMedicamentoRestri = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(getIconImage());
        setIconImages(getIconImages());
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        botonRegresarMR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonRegresarMRMouseClicked(evt);
            }
        });
        getContentPane().add(botonRegresarMR, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 120, 30));

        botonAgregarMR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonAgregarMRMouseClicked(evt);
            }
        });
        getContentPane().add(botonAgregarMR, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 120, 120, 40));

        botonEditarMR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonEditarMRMouseClicked(evt);
            }
        });
        getContentPane().add(botonEditarMR, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 130, 120, 30));

        botonGuardarMR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonGuardarMRMouseClicked(evt);
            }
        });
        getContentPane().add(botonGuardarMR, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 120, 120, 40));

        botonCancelarMR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonCancelarMRMouseClicked(evt);
            }
        });
        getContentPane().add(botonCancelarMR, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 120, 110, 40));

        txtBuscarMR.setBackground(new java.awt.Color(240, 240, 240));
        txtBuscarMR.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        txtBuscarMR.setForeground(new java.awt.Color(153, 153, 153));
        txtBuscarMR.setText("Buscar Por Restricción y Producto");
        txtBuscarMR.setBorder(null);
        txtBuscarMR.setOpaque(false);
        txtBuscarMR.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtBuscarMRFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBuscarMRFocusLost(evt);
            }
        });
        txtBuscarMR.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBuscarMRKeyTyped(evt);
            }
        });
        getContentPane().add(txtBuscarMR, new org.netbeans.lib.awtextra.AbsoluteConstraints(645, 197, 230, 26));

        comboRestriccion.setBackground(new java.awt.Color(240, 240, 240));
        comboRestriccion.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        comboRestriccion.setForeground(new java.awt.Color(153, 153, 153));
        comboRestriccion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Restricción" }));
        comboRestriccion.setBorder(null);
        comboRestriccion.setOpaque(false);
        comboRestriccion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                comboRestriccionMousePressed(evt);
            }
        });
        comboRestriccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboRestriccionActionPerformed(evt);
            }
        });
        getContentPane().add(comboRestriccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 298, 182, 30));

        comboProducto.setBackground(new java.awt.Color(240, 240, 240));
        comboProducto.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        comboProducto.setForeground(new java.awt.Color(153, 153, 153));
        comboProducto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Id Producto" }));
        comboProducto.setBorder(null);
        comboProducto.setOpaque(false);
        comboProducto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                comboProductoMousePressed(evt);
            }
        });
        getContentPane().add(comboProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 368, 182, 28));
        getContentPane().add(txtId_Restriccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 270, 80, 20));
        getContentPane().add(txtIdMR, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 200, 30, 20));

        txtDescripcionMR.setBackground(new java.awt.Color(240, 240, 240));
        txtDescripcionMR.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        txtDescripcionMR.setForeground(new java.awt.Color(153, 153, 153));
        txtDescripcionMR.setText("Ingrese Descripción");
        txtDescripcionMR.setBorder(null);
        txtDescripcionMR.setOpaque(false);
        txtDescripcionMR.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDescripcionMRFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDescripcionMRFocusLost(evt);
            }
        });
        txtDescripcionMR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtDescripcionMRMousePressed(evt);
            }
        });
        txtDescripcionMR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDescripcionMRActionPerformed(evt);
            }
        });
        txtDescripcionMR.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDescripcionMRKeyTyped(evt);
            }
        });
        getContentPane().add(txtDescripcionMR, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 438, 180, 27));
        getContentPane().add(txtIdProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 270, 60, 20));

        usuario.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        usuario.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(usuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 470, 230, 20));

        jLabel3.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Usuario");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 490, 70, -1));

        reporte.setBackground(new java.awt.Color(204, 204, 204));
        reporte.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        reporte.setForeground(new java.awt.Color(255, 255, 255));
        reporte.setIcon(new javax.swing.ImageIcon(getClass().getResource("/componentes/analitica.png"))); // NOI18N
        reporte.setText("REPORTE");
        reporte.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reporteMouseClicked(evt);
            }
        });
        getContentPane().add(reporte, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 50, 120, 40));

        TablaMedicamentoRestri.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Id Restricción", "Restricción", "Producto", "Descripción"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TablaMedicamentoRestri.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaMedicamentoRestriMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TablaMedicamentoRestri);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 240, 520, 210));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/componentes/Pantalla restricciones.png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 521));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void comboRestriccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboRestriccionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboRestriccionActionPerformed

    private void botonRegresarMRMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonRegresarMRMouseClicked
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Productos().setVisible(true);
            }
        });
        this.dispose();
    }//GEN-LAST:event_botonRegresarMRMouseClicked

    private void botonAgregarMRMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonAgregarMRMouseClicked
        if (botonAgregarMR.isEnabled()) {
            Habilitar();
            if (guardari == 1) {
                botonGuardarMR.isEnabled();
                //BotonCancelarPro.isEnabled();   
            }
            if (cancelari == 1) {
                //BotonGuardarPro.isEnabled();
                botonCancelarMR.isEnabled();
            }
        } else {

            JOptionPane.showMessageDialog(null, "Esta acción no se encuentra disponible para tu usuario", "ERROR", JOptionPane.ERROR_MESSAGE);
            lo.LogUsuarios(MedicamentoR, "Boton Agregar", userName);
        }
    }//GEN-LAST:event_botonAgregarMRMouseClicked

    private void txtDescripcionMRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDescripcionMRActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDescripcionMRActionPerformed

    private void botonGuardarMRMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonGuardarMRMouseClicked
        if (botonGuardarMR.isEnabled()) {
            String Guardar = "Guardar medicamento";
            ObtenerIDRestriccion();
            ObtenerIDProducto();
            if (comboRestriccion.getSelectedIndex() == 0 && comboProducto.getSelectedIndex() == 0 && txtDescripcionMR.getText().equals("Ingrese Descripción")) {
                JOptionPane.showMessageDialog(null, "No se puede Guardar datos vacios");
            } else {
                int Restricciones = Integer.parseInt(txtId_Restriccion.getText());
                int Productos = Integer.parseInt(txtIdProducto.getText());
                String Descripcion = txtDescripcionMR.getText();

                try {
                    Connection con = Conexion.getConexion();
                    PreparedStatement ps = con.prepareStatement("Insert into Medicamentos_Restringuidos( Id_Restriccion,Id_Producto,Descripcion) VALUES(?,?,?)");
                    ps.setInt(1, Restricciones);
                    ps.setInt(2, Productos);
                    ps.setString(3, Descripcion);
                    ps.executeUpdate();

                    JOptionPane.showMessageDialog(null, "Registro guardado");
                    cargartabla();

                    //Limpiar();
                    Inhabillitar();

                } catch (SQLException ex) {
                    lo.LogBitacora("Error: No se pudo guardar medicamento " + "Excepción: " + ex + ". Origen: " + this.getClass().getSimpleName(), MedicamentoR, Guardar);

                    JOptionPane.showMessageDialog(null, ex.toString());
                }
            }
        } else {

            JOptionPane.showMessageDialog(null, "Esta acción no se encuentra disponible para tu usuario", "ERROR", JOptionPane.ERROR_MESSAGE);
             lo.LogUsuarios(MedicamentoR, "Boton Guardar", userName);
        }
    }//GEN-LAST:event_botonGuardarMRMouseClicked

    private void botonEditarMRMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonEditarMRMouseClicked
        if (botonEditarMR.isEnabled()) {
            String EditarM = "Editar medicamento Restringuido";
            ObtenerIDProducto();
            ObtenerIDRestriccion();
            if (comboRestriccion.equals("Seleccione Restricción") || comboProducto.equals("Seleccione Producto") || txtDescripcionMR.getText().equals("Ingrese Descripción")) {
                JOptionPane.showMessageDialog(null, "No se puede Guardar datos vacios");
            } else {
                int Id = Integer.parseInt(txtIdMR.getText());
                int restriccion = Integer.parseInt(txtId_Restriccion.getText());
                int Producto = Integer.parseInt(txtIdProducto.getText());
                String Descripcion = txtDescripcionMR.getText();
                ;

                try {
                    Connection con = Conexion.getConexion();
                    PreparedStatement ps = con.prepareStatement("Update Medicamentos_Restringuidos set Id_Restriccion=?, Id_Producto=?,Descripcion=? Where Id_MR=?");
                    ps.setInt(1, restriccion);
                    ps.setInt(2, Producto);
                    ps.setString(3, Descripcion);
                    ps.setInt(4, Id);

                    ps.executeUpdate();
                    JOptionPane.showMessageDialog(null, "Registro Actualizado");

                    cargartabla();
                    Limpiar();
                    Inhabillitar();

                } catch (SQLException ex) {
                    lo.LogBitacora("Error: No se pudo editar medicamento " + "Excepción: " + ex + ". Origen: " + this.getClass().getSimpleName(), MedicamentoR, EditarM);

                    JOptionPane.showMessageDialog(null, ex.toString());
                }
            }

        } else {

            JOptionPane.showMessageDialog(null, "Esta acción no se encuentra disponible para tu usuario", "ERROR", JOptionPane.ERROR_MESSAGE);
             lo.LogUsuarios(MedicamentoR, "Boton Editar", userName);
        }
    }//GEN-LAST:event_botonEditarMRMouseClicked

    private void botonCancelarMRMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonCancelarMRMouseClicked
        if (botonCancelarMR.isEnabled()) {
            // Limpiar();
            //Inhabillitar();
            botonCancelarMR.setEnabled(Boolean.FALSE);
            botonCancelarMR.setEnabled(Boolean.FALSE);
        } else {
            JOptionPane.showMessageDialog(null, "Esta acción no se encuentra disponible para tu usuario", "ERROR", JOptionPane.ERROR_MESSAGE);
             lo.LogUsuarios(MedicamentoR, "Boton Cancelar", userName);
        }


    }//GEN-LAST:event_botonCancelarMRMouseClicked

    private void TablaMedicamentoRestriMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaMedicamentoRestriMouseClicked
        String TablaMR = "Tabla medicamento Restringuido";
        try {
            int fila = TablaMedicamentoRestri.getSelectedRow();
            int id = Integer.parseInt(TablaMedicamentoRestri.getValueAt(fila, 0).toString());
            PreparedStatement ps;
            ResultSet rs;
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("Select MR.Id_MR,P.Nombre_Producto,RMM.Restriccion,MR.Descripcion\n"
                    + "From Medicamentos_Restringuidos as MR\n"
                    + "INNER JOIN Productos AS P ON MR.Id_Producto = P.Id_Producto\n"
                    + "INNER JOIN Restricciones_Medicamentos AS RMM ON MR.Id_Restriccion =RMM.Id_Restriccion\n"
                    + "where MR.Id_MR=?\n"
                    + "Order By MR.Id_MR");

            ps.setInt(1, id);
            rs = ps.executeQuery();

            while (rs.next()) {
                txtIdMR.setText(String.valueOf(id));
                comboRestriccion.setSelectedItem(rs.getString("Restriccion"));
                comboProducto.setSelectedItem(rs.getString("Nombre_Producto"));
                txtDescripcionMR.setText(rs.getString("Descripcion"));

                Habilitar();
            }
        } catch (SQLException ex) {
            lo.LogBitacora("Error: No se pudo guardar medicamento " + "Excepción: " + ex + ". Origen: " + this.getClass().getSimpleName(), MedicamentoR, TablaMR);

            JOptionPane.showMessageDialog(null, ex.toString());
        }
    }//GEN-LAST:event_TablaMedicamentoRestriMouseClicked

    private void txtBuscarMRFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBuscarMRFocusGained
        if (txtBuscarMR.getText().equals("Buscar Por Restricción y Producto")) {
            txtBuscarMR.setText("");
            txtBuscarMR.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtBuscarMRFocusGained

    private void txtBuscarMRFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBuscarMRFocusLost
        if (txtBuscarMR.getText().equals("")) {
            txtBuscarMR.setText("Buscar Por Restricción y Producto");
            txtBuscarMR.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtBuscarMRFocusLost

    private void txtDescripcionMRFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDescripcionMRFocusGained
        if (txtDescripcionMR.getText().equals("Ingrese Descripción")) {
            txtDescripcionMR.setText("");
            txtDescripcionMR.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtDescripcionMRFocusGained

    private void txtDescripcionMRFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDescripcionMRFocusLost
        if (txtDescripcionMR.getText().equals("")) {
            txtDescripcionMR.setText("Ingrese Dirección");
            txtDescripcionMR.setForeground(new Color(153, 153, 153));
        }
        if (txtDescripcionMR.getText().length() < 10) {
            JOptionPane.showMessageDialog(null, "La descripción debe contener al menos 10 caracteres", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_txtDescripcionMRFocusLost

    private void comboRestriccionMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_comboRestriccionMousePressed
        if (comboRestriccion.isEnabled() == false) {

            JOptionPane.showMessageDialog(null, "Dar Click en Agregar o Editar para utilizar el campo", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_comboRestriccionMousePressed

    private void comboProductoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_comboProductoMousePressed
        if (comboProducto.isEnabled() == false) {

            JOptionPane.showMessageDialog(null, "Dar Click en Agregar o Editar para utilizar el campo", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_comboProductoMousePressed

    private void txtBuscarMRKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarMRKeyTyped
        buscarData(txtBuscarMR.getText());
        validarNumerosLetras(evt);
        if (txtBuscarMR.getText().length() > 15) {
            JOptionPane.showMessageDialog(null, "Alcanzaste el máximo de caracteres para este campo", "Advertencia", JOptionPane.WARNING_MESSAGE);
            evt.consume();
        } else if (txtBuscarMR.getText().length() > 0) {
            if (!txtBuscarMR.getText().matches("^(?!.*([A-Za-zñÑáéíóúÁÉÍÓÚ\\s])\\1{2})[A-Za-zñÑáéíóúÁÉÍÓÚ\\s0-9]+$")) {
                JOptionPane.showMessageDialog(null, "No repitas caracteres de forma incorrecta", "Advertencia", JOptionPane.WARNING_MESSAGE);
                evt.consume();

            }
        }
    }//GEN-LAST:event_txtBuscarMRKeyTyped

    private void txtDescripcionMRMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtDescripcionMRMousePressed
        if (txtDescripcionMR.isEnabled() == false) {

            JOptionPane.showMessageDialog(null, "Dar Click en Agregar o Editar para utilizar el campo", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_txtDescripcionMRMousePressed

    private void txtDescripcionMRKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDescripcionMRKeyTyped
        buscarData(txtDescripcionMR.getText());
        validarNumerosLetras(evt);
        if (txtDescripcionMR.getText().length() > 50) {
            JOptionPane.showMessageDialog(null, "Alcanzaste el máximo de 50 caracteres para este campo", "Advertencia", JOptionPane.WARNING_MESSAGE);
            evt.consume();
        } else if (txtDescripcionMR.getText().length() > 0) {
            if (!txtDescripcionMR.getText().matches("^(?!.*([A-Za-zñÑáéíóúÁÉÍÓÚ\\s])\\1{2})[A-Za-zñÑáéíóúÁÉÍÓÚ\\s0-9]+$")) {
                JOptionPane.showMessageDialog(null, "No repitas caracteres de forma incorrecta", "Advertencia", JOptionPane.WARNING_MESSAGE);
                evt.consume();

            }
        }
    }//GEN-LAST:event_txtDescripcionMRKeyTyped

    private void reporteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reporteMouseClicked
        net.sf.jasperreports.engine.JasperReport reporte;
        HashMap hm = new HashMap();
        hm.put("Usuario", usuario.getText());
        try {
            Connection con = Conexion.getConexion();
            reporte = JasperCompileManager.compileReport("src/Reportes/ReporteMR.jrxml");
            JasperPrint jp = JasperFillManager.fillReport(reporte, hm, con);
            JasperViewer.viewReport(jp, true);
            ReportView view = new ReportView(jp, false);
            view.setVisible(true);
        } catch (JRException ex) {
            Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_reporteMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Medicamentos_Restringidos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Medicamentos_Restringidos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Medicamentos_Restringidos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Medicamentos_Restringidos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Medicamentos_Restringidos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TablaMedicamentoRestri;
    private javax.swing.JLabel botonAgregarMR;
    private javax.swing.JLabel botonCancelarMR;
    private javax.swing.JLabel botonEditarMR;
    private javax.swing.JLabel botonGuardarMR;
    private javax.swing.JLabel botonRegresarMR;
    private javax.swing.ButtonGroup buttonGroupMR;
    private javax.swing.JComboBox<String> comboProducto;
    private javax.swing.JComboBox<String> comboRestriccion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel reporte;
    private javax.swing.JTextField txtBuscarMR;
    private javax.swing.JTextField txtDescripcionMR;
    private javax.swing.JLabel txtIdMR;
    private javax.swing.JLabel txtIdProducto;
    private javax.swing.JLabel txtId_Restriccion;
    private javax.swing.JLabel usuario;
    // End of variables declaration//GEN-END:variables

    private void Habilitar() {

        comboRestriccion.enable(Boolean.TRUE);
        comboProducto.enable(Boolean.TRUE);
        txtDescripcionMR.enable(Boolean.TRUE);

    }

    public class CargarProducto {

        public DefaultComboBoxModel getvalues() {
            String CargarMR = "Cargar medicamento Restringuido";
            DefaultComboBoxModel modelo = new DefaultComboBoxModel();
            try {
                Connection con = Conexion.getConexion();
                String sql = "select Nombre_Producto from Productos";
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery(sql);
                modelo.addElement("Seleccione Producto...");
                while (rs.next()) {
                    modelo.addElement(rs.getString(1));
                }
                con.close();
                rs.close();
            } catch (Exception e) {
                lo.LogBitacora("Error: No se pudo cargar medicamento restringuido " + "Excepción: " + e + ". Origen: " + this.getClass().getSimpleName(), MedicamentoR, CargarMR);

                System.out.println(e);
            }
            return modelo;
        }
    }

    public class CargarRestriccion {

        public DefaultComboBoxModel getvalues() {
            String CargarRestriccion = "Cargar restriccion de medicamento";
            DefaultComboBoxModel modelo = new DefaultComboBoxModel();
            try {
                Connection con = Conexion.getConexion();
                String sql = "select Restriccion from Restricciones_Medicamentos";
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery(sql);
                modelo.addElement("Seleccione Restriccion...");
                while (rs.next()) {
                    modelo.addElement(rs.getString(1));
                }
                con.close();
                rs.close();
            } catch (Exception e) {
                lo.LogBitacora("Error: No se pudo cargar la restriccion " + "Excepción: " + e + ". Origen: " + this.getClass().getSimpleName(), MedicamentoR, CargarRestriccion);

                System.out.println(e);
            }
            return modelo;
        }
    }

    private void ObtenerIDRestriccion() {
        String Nombre = comboRestriccion.getSelectedItem().toString();
        try {
            ResultSet rs;
            Connection con = Conexion.getConexion();
            PreparedStatement ps = con.prepareStatement("Select Id_Restriccion From Restricciones_Medicamentos Where Restriccion=?");
            ps.setString(1, Nombre);
            rs = ps.executeQuery();

            while (rs.next()) {
                txtId_Restriccion.setText(rs.getString("Id_Restriccion"));
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        }
    }

    private void ObtenerIDProducto() {
        String Nombre = comboProducto.getSelectedItem().toString();
        try {
            ResultSet rs;
            Connection con = Conexion.getConexion();
            PreparedStatement ps = con.prepareStatement("Select Id_Producto From Productos Where Nombre_Producto=?");
            ps.setString(1, Nombre);
            rs = ps.executeQuery();

            while (rs.next()) {
                txtIdProducto.setText(rs.getString("Id_Producto"));
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        }

    }

    private void cargartabla() {
        String CargarTablaMR = "Cargar tabla medicamento restringuido";
        DefaultTableModel modeloTabla = (DefaultTableModel) TablaMedicamentoRestri.getModel();
        modeloTabla.setRowCount(0);

        PreparedStatement ps;
        ResultSet rs;
        ResultSetMetaData rsmd;
        int columnas;

        try {
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("Select MR.Id_MR,P.Nombre_Producto,RMM.Restriccion,MR.Descripcion\n"
                    + "From Medicamentos_Restringuidos as MR\n"
                    + "INNER JOIN Productos AS P ON MR.Id_Producto = P.Id_Producto\n"
                    + "INNER JOIN Restricciones_Medicamentos AS RMM ON MR.Id_Restriccion =RMM.Id_Restriccion\n"
                    + "Order By MR.Id_MR");
            rs = ps.executeQuery();
            rsmd = rs.getMetaData();
            columnas = rsmd.getColumnCount();

            while (rs.next()) {
                Object[] fila = new Object[columnas];
                for (int indice = 0; indice < columnas; indice++) {
                    fila[indice] = rs.getObject(indice + 1);
                }
                modeloTabla.addRow(fila);
            }

        } catch (SQLException ex) {
            lo.LogBitacora("Error: No se pudo cargar tabla  " + "Excepción: " + ex + ". Origen: " + this.getClass().getSimpleName(), MedicamentoR, CargarTablaMR);

            JOptionPane.showMessageDialog(null, ex.toString());
        }

    }

    private void Inhabillitar() {
        comboRestriccion.enable(Boolean.FALSE);
        comboProducto.enable(Boolean.FALSE);
        txtDescripcionMR.enable(Boolean.FALSE);

    }

    private void Limpiar() {
        comboRestriccion.setSelectedIndex(0);
        comboProducto.setSelectedIndex(0);

        txtDescripcionMR.setText("");
        if (txtDescripcionMR.getText().equals("")) {
            txtDescripcionMR.setText("Ingrese Descripción");
            txtDescripcionMR.setForeground(new Color(153, 153, 153));
        }
    }

    private void buscarData(String valor) {
        String BuscarDato = "Buscar medicamento R";
        String[] titulos = {"Id Restricción", "Restricción", "Producto", "Descipcion"};
        String[] registros = new String[13];
        String sql = "Select MR.Id_MR,P.Nombre_Producto,RMM.Restriccion,MR.Descripcion\n"
                + "From Medicamentos_Restringuidos as MR\n"
                + "INNER JOIN Productos AS P ON MR.Id_Producto = P.Id_Producto\n"
                + "INNER JOIN Restricciones_Medicamentos AS RMM ON MR.Id_Restriccion =RMM.Id_Restriccion\n"
                + "WHERE CONCAT (P.Nombre_Producto, ' ', RMM.Descripcion, ' ') LIKE '%" + valor + "%'\n"
                + "Order By MR.Id_MR";

        DefaultTableModel model = new DefaultTableModel(null, titulos);
        Connection con = Conexion.getConexion();

        try {

            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);

            while (rs.next()) {
                registros[0] = rs.getString("Id_MR");
                registros[1] = rs.getString("Nombre_Producto");
                registros[1] = rs.getString("Restriccion");
                registros[2] = rs.getString("Descripcion");

                model.addRow(registros);
            }

            TablaMedicamentoRestri.setModel(model);
            // anchoColumnas();
        } catch (SQLException ex) {
            lo.LogBitacora("Error: No se pudo buscar medicamento " + "Excepción: " + ex + ". Origen: " + this.getClass().getSimpleName(), MedicamentoR, BuscarDato);

            Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void validarNumerosLetras(KeyEvent e) {
        if (e.getKeyChar() >= 33 && e.getKeyChar() <= 47
                || e.getKeyChar() >= 58 && e.getKeyChar() <= 64
                || e.getKeyChar() >= 91 && e.getKeyChar() <= 96
                || e.getKeyChar() >= 123 && e.getKeyChar() <= 129
                || e.getKeyChar() >= 145 && e.getKeyChar() <= 159
                || e.getKeyChar() >= 164 && e.getKeyChar() <= 238) {

            e.consume();
            JOptionPane.showMessageDialog(null, "Este campo no acepta caracteres especiales", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }

    public void habilitarroles() {
        try {

            PreparedStatement ps;
            ResultSet rs;
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("Select PU.Agregar, PU.Guardar, PU.Cancelar, PU.Editar, PU.Activo, PU.Inactivo, PU.Reporte, PU.Anular, PU.CrearCompra, PU.Historicos, PU.Buscar\n"
                    + "From PermisosUsuario AS PU\n"
                    + "Inner Join Usuario as U on PU.IdUsuario=U.Id_Usuario\n"
                    + "where PU.IdPermiso=? and U.Nombre=?");
            ps.setInt(1, 11);
            ps.setString(2, usuario.getText());
            rs = ps.executeQuery();
            System.out.println(usuario.getText());

            while (rs.next()) {
                agregari = rs.getInt("Agregar");
                guardari = rs.getInt("Guardar");
                cancelari = rs.getInt("Cancelar");
                editari = rs.getInt("Editar");
                activoi = rs.getInt("Activo");
                inactivoi = rs.getInt("Inactivo");
                reportesi = rs.getInt("Reporte");
                anulari = rs.getInt("Anular");
                crearcomprai = rs.getInt("CrearCompra");
                historicoi = rs.getInt("Historicos");
                buscari = rs.getInt("Buscar");
                System.out.print(agregari + " " + guardari + " " + cancelari);

            }
        } catch (SQLException ex) {
            //lo.LogBitacora("Error: No se pudo seleccionar la tabla" + "Excepción: " + ex + ". Origen: " + this.getClass().getSimpleName(), proveedores, tablap);
            JOptionPane.showMessageDialog(null, ex.toString());
        }
        if (agregari == 1) {
            botonAgregarMR.setEnabled(Boolean.TRUE);
        } else if (agregari == 0) {
            botonAgregarMR.setEnabled(Boolean.FALSE);
            botonAgregarMR.setIcon(new javax.swing.ImageIcon(getClass().getResource("/componentes/obstruido (1).png")));
        }

        if (guardari == 1) {
            botonGuardarMR.setEnabled(Boolean.TRUE);
        } else if (guardari == 0) {
            botonGuardarMR.setEnabled(Boolean.FALSE);
            botonGuardarMR.setIcon(new javax.swing.ImageIcon(getClass().getResource("/componentes/obstruido (1).png")));

        }
        if (editari == 1) {
            botonEditarMR.setEnabled(Boolean.TRUE);
        } else {
            botonEditarMR.setEnabled(Boolean.FALSE);
            botonEditarMR.setIcon(new javax.swing.ImageIcon(getClass().getResource("/componentes/obstruido (1).png")));
        }

        if (cancelari == 1) {
            botonCancelarMR.setEnabled(Boolean.TRUE);

        } else {
            botonCancelarMR.setEnabled(Boolean.FALSE);
            botonCancelarMR.setIcon(new javax.swing.ImageIcon(getClass().getResource("/componentes/obstruido (1).png")));
        }
        if (reportesi == 1) {
            reporte.setVisible(Boolean.TRUE);

        } else {
            reporte.setVisible(Boolean.FALSE);
            //jLabel2.setEnabled(Boolean.TRUE);
        }
        if (buscari == 1) {
            txtBuscarMR.setEnabled(Boolean.TRUE);
        } else {
            txtBuscarMR.setEnabled(Boolean.FALSE);
            txtBuscarMR.setText("NO DISPONIBLE");
        }
        /* if (anulari == 1) {
            Anular.setSelected(Boolean.TRUE);
        } else {
            Anular.setSelected(Boolean.FALSE);
        }*/
//        if (activoi == 1) {
//            //BotonActivoPro.setVisible(Boolean.TRUE);
//        } else {
//            BotonActivoPro.setVisible(Boolean.FALSE);
//        }
//        if (inactivoi == 1) {
//            //BotonInactivoPro.setVisible(Boolean.TRUE);
//        } else {
//            BotonInactivoPro.setVisible(Boolean.FALSE);
//        }
        /*if (historicoi == 1) {
            Historico.setSelected(Boolean.TRUE);
        } else {
            Historico.setSelected(Boolean.FALSE);
        }
        if (crearcomprai == 1) {
            CrearCompra.setSelected(Boolean.TRUE);
        } else {
            CrearCompra.setSelected(Boolean.FALSE);
        }*/
    }
}
